{
    "id": "merge_cubes",
    "summary": "Merging two data cubes",
    "description": "The data cubes have to be compatible. A merge is the inverse of a split if there is no overlap. If data overlaps the parameter `overlap_resolver` must be specified to resolve the overlap. It doesn't add dimensions.",
    "categories": [
        "cubes"
    ],
    "parameter_order": ["cube1", "cube2", "overlap_resolver", "binary"],
    "parameters": {
        "cube1": {
            "description": "The first data cube.",
            "schema": {
                "type": "object",
                "format": "raster-cube"
            },
            "required": true
        },
        "cube2": {
            "description": "The second data cube.",
            "schema": {
                "type": "object",
                "format": "raster-cube"
            },
            "required": true
        },
        "overlap_resolver": {
            "description": "A reducer that resolves the conflict if the data overlaps. The reducer must be a callable process (or a set of processes as process graph) such as ``mean()`` that accepts by default array as input. The process can also work on two values by setting the parameter `binary` to `true`. The reducer must return a value of the same data type as the input values in the array. `null` (default) can be specified if no overlap resolver is required.",
            "schema": {
                "anyOf": [
                    {
                        "title": "Unary behaviour",
                        "description": "Passes an array to the reducer.",
                        "type": "object",
                        "format": "callback",
                        "parameters": {
                            "data": {
                                "description": "An array with elements of any data type.",
                                "type": "array",
                                "items": {
                                    "description": "Any data type."
                                }
                            }
                        } 
                    },
                    {
                        "title": "Binary behaviour",
                        "description": "Passes two values to the reducer.",
                        "type": "object",
                        "format": "callback",
                        "parameters": {
                            "x": {
                                "description": "The first value. Any data type could be passed."
                            },
                            "y": {
                                "description": "The second value. Any data type could be passed."
                            }
                        } 
                    },
                    {
                        "title": "No overlap resolver",
                        "type": "null"
                    }
                ],
                "default": null
            }
        },
        "binary": {
            "description": "Specifies whether the process should pass two values to the reducer or a list of values (default).\n\nIf the process passes two values, the reducer must be both associative and commutative as the execution may be executed in parallel and therefore the order of execution is arbitrary.\n\nThis parameter is especially useful for UDFs passed as reducers. Back-ends may still optimize and parallelize processes that work on list of values.",
            "schema": {
                "type": "boolean",
                "default": false
            }
        }
    },
    "returns": {
        "description": "The merged data cube.",
        "schema": {
            "type": "object",
            "format": "raster-cube"
        }
    },
    "exceptions": {
        "OverlapResolverMissing": {
            "message": "Two data cubes with overlap but without an overlap resolver have been specified."
        }
    },
    "links": [
        {
            "rel": "about",
            "href": "https://en.wikipedia.org/wiki/Reduction_Operator",
            "title": "Background information on reduction operators (binary reducers) by Wikipedia"
        }
    ]
}