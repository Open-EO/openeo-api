{
    "id": "reduce",
    "summary": "Reduce dimensions",
    "description": "Applies a reducer to a data cube dimension by collapsing all the input values along the specified dimension into an output value computed by the reducer.\n\nThe reducer must be a callable process (or a set of processes as process graph) that accepts by default array as input. The process can also work on two values by setting the parameter `binary` to `true`. The reducer must compute a single or multiple return values of the same type as the input values were. Multiple values must be wrapped in an array. An example for a process returning a single value is ``median()``. In this case the specified dimension would be removed. If a callback such as ``extrema()`` returns multiple values, a new dimension with the specified name in `target_dimension` is created (see the description of the parameter for more information).\n\nA special case is that the reducer can be set to `null`, which is the default if no reducer is specified. It acts as a no-operation reducer so that the remaining value is treated like a reduction result and the dimension gets dropped. This only works on dimensions with a single dimension value left (e.g. after filtering for a single band), otherwise the process fails with a `TooManyDimensionValues` error.\n\nNominal values can be reduced too, but need to be mapped. For example date strings to numeric timestamps since 1970 etc.",
    "categories": [
        "cubes",
        "reducer"
    ],
    "parameter_order": ["data", "reducer", "dimension", "target_dimension", "binary"],
    "parameters": {
        "data": {
            "description": "A data cube.",
            "schema": {
                "type": "object",
                "format": "raster-cube"
            },
            "required": true
        },
        "reducer": {
            "description": "A reducer to be applied on the specified dimension (see the process description for more details).",
            "schema": {
                "anyOf": [
                    {
                        "title": "Unary behaviour",
                        "description": "Passes an array to the reducer.",
                        "type": "object",
                        "format": "callback",
                        "parameters": {
                            "data": {
                                "description": "An array with elements of any data type.",
                                "type": "array",
                                "items": {
                                    "description": "Any data type."
                                }
                            }
                        } 
                    },
                    {
                        "title": "Binary behaviour",
                        "description": "Passes two values to the reducer.",
                        "type": "object",
                        "format": "callback",
                        "parameters": {
                            "x": {
                                "description": "The first value. Any data type could be passed."
                            },
                            "y": {
                                "description": "The second value. Any data type could be passed."
                            }
                        } 
                    },
                    {
                        "title": "No operation behaviour",
                        "description": "Specifying `null` works only on dimensions with a single dimension value left. In this case the remaining value is treated like a reduction result and the dimension gets dropped.",
                        "type": "null"
                    }
                ],
                "default": null
            }
        },
        "dimension": {
            "description": "The dimension over which to reduce. Fails with a `DimensionNotAvailable` error if the specified dimension does not exist.\n\n**Remarks:**\n\n* The default dimensions a data cube provides are described in the collection's metadata field `cube:dimensions`.\n* There could be multiple spatial dimensions such as `x`, `y` or `z`.\n* For multi-spectral imagery there is usually a separate dimension of type `bands` for the bands.",
            "schema": {
                "type": "string"
            },
            "required": true
        },
        "target_dimension": {
            "description": "The name of the target dimension. Only required if the reducer returns multiple values, otherwise ignored. By default creates a new dimension with the specified name and the type `other` (see ``add_dimension()``). If a dimension with the specified name exists, the dimension is replaced, but keeps the original type.",
            "schema": {
                "type": ["string", "null"],
                "default": null
            }
        },
        "binary": {
            "description": "Specifies whether the process should pass two values to the reducer or a list of values (default).\n\nIf the process passes two values, the reducer must be both associative and commutative as the execution may be executed in parallel and therefore the order of execution is arbitrary.\n\nThis parameter is especially useful for UDFs passed as reducers. Back-ends may still optimize and parallelize processes that work on list of values.\n\nThis parameter can't be used with the reducer set to `null`. If a reducer is specified but only a single value is available, the reducer doesn't get executed.",
            "schema": {
                "type": "boolean",
                "default": false
            }
        }
    },
    "returns": {
        "description": "A data cube with the newly computed values. The number of dimensions is reduced for callbacks returning a single value or doesn't change if the callback returns multiple values. The resolution and cardinality are the same as for the original data cube.",
        "schema": {
            "type": "object",
            "format": "raster-cube"
        }
    },
    "exceptions": {
        "TooManyDimensionValues": {
            "message": "The number of dimension values exceeds one, which requires a reducer."
        },
        "DimensionNotAvailable": {
            "message": "A dimension with the specified name does not exist."
        }
    },
    "links": [
        {
            "rel": "about",
            "href": "https://en.wikipedia.org/wiki/Reduction_Operator",
            "title": "Background information on reduction operators (binary reducers) by Wikipedia"
        }
    ]
}