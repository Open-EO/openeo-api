openapi: 3.0.2
info:
  title: openEO API
  version: draft
  description: |-
    The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.

    # API Principles

    ## Language

    In the specification the key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in [RFC 2119](http://tools.ietf.org/html/rfc2119).

    ## HTTP / REST

    This uses [HTTP REST](https://en.wikipedia.org/wiki/Representational_state_transfer) [Level 2](https://martinfowler.com/articles/richardsonMaturityModel.html#level2) for communication between client and back-end server.

    Public APIs MUST be available via HTTPS only. 
    
    Endpoints are made use meaningful HTTP verbs (e.g. GET, POST, PUT, PATCH, DELETE) whenever technically possible. If there is a need to transfer big chunks of data for a GET requests to the back-end, POST requests MAY be used as a replacement as they support to send data via request body. Unless otherwise stated, PATCH requests are only defined to work on direct (first-level) children of the full JSON object. Therefore, changing a property on a deeper level of the full JSON object always requires to send the whole JSON object defined by the first-level property.

    Naming of endpoints follow the REST principles. Therefore, endpoints are centered around resources. Resource identifiers MUST be named with a noun in plural form except for single actions that can not be modelled with the regular HTTP verbs. Single actions MUST be single endpoints with a single HTTP verb (POST is RECOMMENDED) and no other endpoints beneath it.

    ## JSON

    The API uses JSON for request and response bodies whenever feasible. Services use JSON as the default encoding. Other encodings can be requested using [Content Negotiation](https://www.w3.org/Protocols/rfc2616/rfc2616-sec12.html). Clients and servers MUST NOT rely on the order in which properties appears in JSON. Collections usually don't include nested JSON objects if those information can be requested from the individual resources.

    ## Casing

    Unless otherwise stated the API works **case sensitive**.

    All names SHOULD be written in snake case, i.e. words are separated with one underscore character (_) and no spaces, with all letters lowercased. Example: `hello_world`. This applies particularly to endpoints and JSON property names. HTTP header fields follow their respective casing conventions, e.g. `Content-Type` or `OpenEO-Costs`, despite being case-insensitive according to [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2).

    ## Temporal data

    Date, time, intervals and durations are formatted based on ISO 8601 or its profile [RFC 3339](https://www.ietf.org/rfc/rfc3339) whenever there is an appropriate encoding available in the standard. All temporal data are specified based on the Gregorian calendar.

    # Authentication

    The openEO API offers two forms of authentication by default:
    * OpenID Connect (recommended) at `GET /credentials/oidc`
    * Basic at `GET /credentials/basic`
      
    After authentication with any of the methods listed above, the tokens obtained during the authentication workflows can be sent to protected endpoints in subsequent requests.
    
    Further authentication methods MAY be added by back-ends.

    <SecurityDefinitions />

    # Cross-Origin Resource Sharing (CORS)

    > Cross-origin resource sharing (CORS) is a mechanism that allows restricted resources [...] on a web page to be requested from another domain outside the domain from which the first resource was served. [...]
    > CORS defines a way in which a browser and server can interact to determine whether or not it is safe to allow the cross-origin request. It allows for more freedom and functionality than purely same-origin requests, but is more secure than simply allowing all cross-origin requests.
    
    Source: [https://en.wikipedia.org/wiki/Cross-origin_resource_sharing](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)
    
    openEO-based back-ends are usually hosted on a different domain / host than the client that is requesting data from the back-end. Therefore most requests to the back-end are blocked by all modern browsers. This leads to the problem that the JavaScript library and any browser-based application can't access back-ends. Therefore, all back-end providers SHOULD support CORS to enable browser-based applications to access back-ends. [CORS is a recommendation of the W3C organization](https://www.w3.org/TR/cors/). The following chapters will explain how back-end providers can implement CORS support.
    
    ## OPTIONS method
    
    All endpoints must respond to the `OPTIONS` HTTP method. This is a response for the preflight requests made by the browsers. It needs to respond with a status code of `204` and send the HTTP headers shown in the table below. No body needs to be provided.
    
    | Name                             | Description                                                  | Example |
    | -------------------------------- | ------------------------------------------------------------ | ------- |
    | Access-Control-Allow-Origin      | Allowed origin for the request, including protocol, host and port. It is RECOMMENDED to return the value of the request's origin header. If no `Origin` is sent to the back-end CORS headers SHOULD NOT be sent at all. | `http://client.isp.com:80` |
    | Access-Control-Allow-Credentials | If authorization is implemented by the back-end the value MUST be `true`. | `true` |
    | Access-Control-Allow-Headers     | Comma-separated list of HTTP headers allowed to be send. MUST contain at least `Authorization` if authorization is implemented by the back-end. | ` Authorization, Content-Type` |
    | Access-Control-Allow-Methods     | Comma-separated list of HTTP methods allowed to be requested. Back-ends MUST list all implemented HTTP methods for the endpoint here. | `OPTIONS, GET, POST, PATCH, PUT, DELETE` |
    | Access-Control-Expose-Headers    | Some endpoints send non-safelisted HTTP response headers such as `OpenEO-Identifier` and `OpenEO-Costs`. All headers except `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified` and `Pragma` must be listed in this header. Currently, the openEO API requires at least the following headers to be listed: `Location, OpenEO-Identifier, OpenEO-Costs`. | `Location, OpenEO-Identifier, OpenEO-Costs` |
    | Content-Type                     | SHOULD return the content type delivered by the request that the permission is requested for. | `application/json` |
    
    ### Example request and response
    
    Request:
    
    ```http
    OPTIONS /api/v1/jobs HTTP/1.1
    Host: openeo.cloudprovider.com
    Origin: http://client.org:8080
    Access-Control-Request-Method: POST 
    Access-Control-Request-Headers: Authorization, Content-Type
    ```
    
    Response:
    
    ```http
    HTTP/1.1 204 No Content
    Access-Control-Allow-Origin: http://client.org:8080
    Access-Control-Allow-Credentials: true
    Access-Control-Allow-Methods: OPTIONS, GET, POST, PATCH, PUT, DELETE
    Access-Control-Allow-Headers: Authorization, Content-Type
    Content-Type: application/json
    ```
    
    ## CORS headers
    
    The following headers MUST be included with every response:
    
    | Name                             | Description                                                  | Example |
    | -------------------------------- | ------------------------------------------------------------ | ------- |
    | Access-Control-Allow-Origin      | Allowed origin for the request, including protocol, host and port. It is RECOMMENDED to return the value of the request's origin header. If no `Origin` is sent to the back-end CORS headers SHOULD NOT be sent at all. | `http://client.isp.com:80` |
    | Access-Control-Allow-Credentials | If authorization is implemented by the back-end the value MUST be `true`. | `true` |
    | Access-Control-Expose-Headers    | Some endpoints send non-safelisted HTTP response headers such as `OpenEO-Identifier` and `OpenEO-Costs`. All headers except `Cache-Control`, `Content-Language`, `Content-Type`, `Expires`, `Last-Modified` and `Pragma` must be listed in this header. Currently, the openEO API requires at least the following headers to be listed: `Location, OpenEO-Identifier, OpenEO-Costs`. | `Location, OpenEO-Identifier, OpenEO-Costs` |
    
    
    **Tip**: Most server can send the required headers and the responses to the OPTIONS requests globally. Otherwise you may want to use a proxy server to add the headers and OPTIONS responses.

    # Error Handling

    The success of requests MUST be indicated using [HTTP status codes](https://tools.ietf.org/html/rfc7231#section-6) according to [RFC 7231](https://tools.ietf.org/html/rfc7231).

    If the API responds with a status code between 100 and 399 the back-end indicates that the request has been handled successfully.

    In general an error is communicated with a status code between 400 and 599. Client errors are defined as a client passing invalid data to the service and the service *correctly* rejecting that data. Examples include invalid credentials, incorrect parameters, unknown versions, or similar. These are generally "4xx" HTTP error codes and are the result of a client passing incorrect or invalid data. Client errors do *not* contribute to overall API availability. 

    Server errors are defined as the server failing to correctly return in response to a valid client request. These are generally "5xx" HTTP error codes. Server errors *do* contribute to the overall API availability. Calls that fail due to rate limiting or quota failures MUST NOT count as server errors. 

    ## JSON error object

    A JSON error object SHOULD be sent with all responses that have a status code between 400 and 599.

    ``` json
    {
      "id": "936DA01F-9ABD-4D9D-80C7-02AF85C822A8",
      "code": "SampleError",
      "message": "A sample error message.",
      "url": "http://www.openeo.org/docs/errors/SampleError"
    }
    ```

    Sending `code` and `message` is REQUIRED. 

    * A back-end MAY add a free-form `id` (unique identifier) to the error response to be able to log and track errors with further non-disclosable details.
    * The `code` is either one of the [standardized textual openEO error codes](https://open-eo.github.io/openeo-api/draft/errors/index.html) or a proprietary error code.
    * The `message` explains the reason the server is rejecting the request. For "4xx" error codes the message explains how the client needs to modify the request.

      By default the message MUST be sent in English language. Content Negotiation is used to localize the error messages: If an `Accept-Language` header is sent by the client and a translation is available, the message should be translated accordingly and the `Content-Language` header must be present in the response. See "[How to localize your API](http://apiux.com/2013/04/25/how-to-localize-your-api/)" for more information.
    * `url` is an OPTIONAL attribute and contains a link to a resource that is explaining the error and potential solutions in-depth.

    ## Standardized status codes

    The openEO API usually uses the following HTTP status codes for successful requests: 

    - **200 OK**:
      Indicates a successful request **with** a response body being sent.
    - **201 Created**
      Indicates a successful request that successfully created a new resource. Sends a `Location` header to the newly created resource **without** a response body.
    - **202 Accepted**
      Indicates a successful request that successfully queued the creation of a new resource, but it has not been created yet. The response is sent **without** a response body.
    - **204 No Content**:
      Indicates a successful request **without** a response body being sent.

    The openEO API has some commonly used HTTP status codes for failed requests: 

    - **400 Bad Request**:
      The back-end responds with this error code whenever the error has its origin on client side and no other HTTP status code in the 400 range is suitable.

    - **401 Unauthorized**:
      The client did not provide any authentication details for a resource requiring authentication or the provided authentication details are not correct.

    - **403 Forbidden**:
      The client did provided correct authentication details, but the privileges/permissions of the provided credentials do not allow to request the resource.

    - **404 Not Found**:
      The resource specified by the path does not exist, i.e. one of the resources belonging to the specified identifiers are not available at the back-end.
      *Note:* Unsupported endpoints MUST use HTTP status code 501.

    - **500 Internal Server Error**:
      The error has its origin on server side and no other status code in the 500 range is suitable.


    If a HTTP status code in the 400 range is returned, the client SHOULD NOT repeat the request without modifications. For HTTP status code in the 500 range, the client MAY repeat the same request later.

    All HTTP status codes defined in RFC 7231 in the 400 and 500 ranges can be used as openEO error code in addition to the most used status codes mentioned here. Responding with openEO error codes 400 and 500 SHOULD be avoided in favor of any more specific standardized or proprietary openEO error code.

    # Web Linking
    
    The API is designed in a way that to most entities (e.g. collections and processes) a set of links can be added. These can be alternate representations, e.g. data discovery via OGC WCS or OGC CSW, references to a license, references to actual raw data for downloading, detailed information about pre-processing and more. Clients should allow users to follow the links.

    Whenever links are utilized in the API, the description explains which relation (`rel` property) types are commonly used.
    A [list of standardized link relations types is provided by IANA](https://www.iana.org/assignments/link-relations/link-relations.xhtml) and the API tries to align whenever feasible.

    Some very common relation types - usually not mentioned explicitly in the description of `links` fields - are:
    
    1. `self`: which allows link to the location that the resource can be (permanently) found online.This is particularly useful when the data is data is made available offline, so that the downstream user knows where the data has come from.

    2. `alternate`: An alternative representation of the resource, may it be another metadata standard the data is available in or simply a human-readable version in HTML or PDF.

    3. `about`: A resource that is related or further explains the resource, e.g. a user guide.
  contact:
    name: openEO Consortium
    url: 'http://www.openeo.org'
    email: openeo@list.tuwien.ac.at
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: openEO Documentation
  url: 'https://open-eo.github.io/openeo-api/draft/'
tags:
  - name: Capabilities
    description: General information about the API implementation and other supported capabilities at the back-end.
  - name: EO Data Discovery
    description: |-      
      For data discovery of Earth Observation Collections at the back-ends, openEO strives for compatibility with the specifications [SpatioTemporal Asset Catalog (STAC)](https://stacspec.org/) and [OGC API - Features - Part 1: Core](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) as far as possible. Implementing the data discovery endpoints of openEO should also produce valid STAC 0.8.1 and OGC API - Features 1.0 responses, including a partial compatibility with their APIs.

      The data discovery endpoints `GET /collections` and `GET /collections/{name}` are compatible with OGC API - Features and STAC. Both specifications define additional endpoints that need to be implemented to be fully compatible. The additional endpoints can easily be integrated into an openEO API implementation. A rough list of actions for compatibility is available below, but please refer to their specifications to find out the full details.
      
      **WARNING**: STAC, as well as openEO, is still under development. Therefore, it is very likely that further changes and adjustments will be made in the future.
      
      # Content Extensions
      
      STAC has several [content extensions](https://github.com/radiantearth/stac-spec/tree/v0.8.1/extensions) that can be used to better describe your data. Clients and server are not required to implement all of them, so be aware that some clients may not be able to read all your metadata.
      
      Some commonly used extensions that are relevant for datasets exposed through the openEO API are:
      
      - Data Cube extension (part of the openEO API)
      - [EO (Electro-Optical) extension](https://github.com/radiantearth/stac-spec/tree/v0.8.1/extensions/eo)
      - [SAR extension](https://github.com/radiantearth/stac-spec/tree/v0.8.1/extensions/sar)
      - [Scientific extension](https://github.com/radiantearth/stac-spec/tree/v0.8.1/extensions/scientific)
      
      # Provide data for download
      
      If you'd like to provide your data for download in addition to offering the cloud processing service, you can implement the full STAC API. Therefore you can implement the endpoints  `GET /collections/{collectionId}/items` and `GET /collections/{collection-name}/items/{featureId}` to support retrieval of individual items. To benefit from the STAC ecosystem it is also recommended to implement the `GET /stac` endpoint. To allow searching for items you can also implement `POST /stac/search`. Further information can be found in the [STAC API respository](https://github.com/radiantearth/stac-spec/tree/v0.8.1/api-spec) and in the corresponding [OpenAPI specification](https://stacspec.org/STAC-api.html).
      
      # OGC API - Features: Part 1: Core compatibility
      
      As of now, OGC API - Features requires more endpoints for full compatibility. You should add the following things to your API:
      
      * Add [additional links](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html#core-overview) to the `links` property in the `GET /` response:
        * the API definition (link relations `service-desc` and `service-doc`),
        * the Conformance declaration (path `/conformance`, link relation `conformance`), and
        * the Collections (path `/collections`, link relation `data`).
      * Implement `GET /conformance` and specify which conformance classes the service conforms to.
      * Implement `GET /collections/{collectionId}/items` and `GET /collections/{collectionId}/items/{featureId}` to support retrieval of individual features.
      
      # STAC compatibility
      
      As of now, STAC has two more required endpoints that need to be implemented:
      
      * `GET /stac`
      * `POST /stac/search`
  - name: Process Discovery
    description: |-
      These endpoints allow to the processes that are available at the back-end.

      A process is an operation that performs a specific task, see the [glossary](glossary.md) for a detailed definition. It consists of an id (the identifying name of the process), a set of parameters, a return type and may throw errors or exceptions. In openEO, processes are used to build a chain of processes ([process graph](#tag/Process-Graphs)), which can be applied to EO data to derive your own findings from the data.

      There are some processes that we define to be core processes that are pre-defined and back-ends SHOULD follow these specifications to be interoperable. Not all processes need to be implemented by all back-ends. See the **[process reference](processreference.md)** for pre-defined processes.

      In addition, back-ends MAY define new proprietary processes for their domain. To define new processes, back-end providers MUST follow the `process` schema in the API specification. This includes:

      * Choosing a intuitive and ideally unique name as process id, consisting of only letters (a-z), numbers and underscores.
      * Defining the parameters and their exact (JSON) schemes.
      * Specifying the return value of a process also with a (JSON) schema.
      * Providing examples or compliance tests.
      * Trying to make the process universally usable so that other back-end providers or openEO can adopt it.

      If the process is potentially useful for other back-ends, the new process can be proposed to be included in the pre-defined processes.

      # Schemas

      Each process parameter and the return values of a process define a schema that the value MUST comply to. The schemas are based on [JSON Schema draft-07](http://json-schema.org/).

      Two custom keywords have been defined:
      * `subtype` for more fine-grained data-types than JSON Schema supports (see chapter 'Subtypes' below).
      * `parameters` to specify parameters that process parameters can pass to parametrized process graphs (see chapter 'Parametrized Process Graphs' below).

      ## Subtypes

      JSON Schema allows to specify only a small set of native data types (string, boolean, number, integer, array, object, null).
      To support more fine grained data types, a custom [JSON Schema keyword](https://tools.ietf.org/html/draft-handrews-json-schema-01#section-6.4) has been defined: `subtype`.
      It works similarly as the JSON Schema keyword [`format`](https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-7) and defines a number of subtypes for the native data types.
      These should be re-used in process schema definitions whenever suitable.

      | Subtype                   | Data type | Description |
      | ------------------------- | --------- | ----------- |
      | `band-name`               | string    | Either a unique band name (metadata field `name`) or a [common band name](https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names) (metadata field `common_name`) available in the data cube. If unique band name and common name conflict, the unique band name has higher priority. |
      | `bounding-box`            | object    | A bounding box with the required fields `west`, `south`, `east`, `north` and optionally `base`, `height`, `crs`. The `crs` is a EPSG code, a WKT2:2018 string, PROJJSON or a PROJ definition (deprecated). |
      | `collection-id`           | string    | A collection id from the list of supported collections. Pattern: `^[A-Za-z0-9_\-\.~/]+$` |
      | `date`                    | string    | Date only representation, as defined for `full-date` by [RFC 3339 in section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). The time zone is UTC. |
      | `date-time`               | string    | Date and time representation, as defined for `date-time` by [RFC 3339 in section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). |
      | `epsg-code`               | integer   | Specifies details about cartographic projections as [EPSG](http://www.epsg.org) code. |
      | `file-paths`              | array     | An array with relative paths to user-uploaded files. Clients should assist to generate a list of files for folders. |
      | `file-path`               | string    | A relative path to a user-uploaded file. Folders can't be specified. |
      | `geojson`                 | object    | GeoJSON as defined by [RFC 7946](https://tools.ietf.org/html/rfc7946). [JSON Schemes for validation are available.](https://github.com/geojson/schema) |
      | `input-format`            | string    | An input format supported by the back-end. |
      | `input-format-options`    | object    | Key-value-pairs with arguments for the input format options supported by the back-end. |
      | `job-id`                  | string    | A batch job id, either one of the jobs a user has stored or a publicly available job. Pattern: `^[A-Za-z0-9_\-\.~]+$` |
      | `kernel`                  | array     | Image kernel, a multi-dimensional array of numbers. |
      | `output-format`           | string    | An output format supported by the back-end. |
      | `output-format-options`   | object    | Key-value-pairs with arguments for the output format options supported by the back-end. |
      | `process-graph`           | object    | An parametrized process graph that is passed as an argument and is expected to be executed by the process. Parameters passed to the process graph are specified in a `parameters` property (see chapter "Parametrized Process Graphs" below). |
      | `process-graph-id`        | string    | A process graph id, either one of the process graphs a user has stored or a publicly available process graph. Pattern: `^[A-Za-z0-9_\-\.~]+$` |
      | `process-graph-variables` | object    | Key-value-pairs with values for variables that are defined by the process graph. The key of the pair is the `variable_id` for the value specified. |
      | `proj-definition`         | string    | **DEPRECATED.** Specifies details about cartographic projections as [PROJ](https://proj.org/usage/quickstart.html) definition. |
      | `projjson-definition`     | object    | Specifies details about cartographic projections as [PROJJSON](https://proj.org/projjson.html) definition. |
      | `raster-cube`             | object    | A raster data cube, an image collection stored at the back-end. Different back-ends have different internal representations for this data structure. |
      | `temporal-interval`       | array     | A two-element array, which describes a left-closed temporal interval. The first element is the start of the date and/or time interval. The second element is the end of the date and/or time interval. The specified temporal strings follow the subtypes `date-time`, `date` (see above) and `time` (see below). |
      | `temporal-intervals`      | array     | An array of two-element arrays, each being an array with subtype `temporal-interval` (see above). |
      | `time`                    | string    | Time only representation, as defined for `full-time` by [RFC 3339 in section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6). Although [RFC 3339 prohibits the hour to be '24'](https://tools.ietf.org/html/rfc3339#section-5.7), this definition allows the value '24' for the hour as end time in an interval in order to make it possible that left-closed time intervals can fully cover the day. |
      | `udf-code`                | string    | The (multi-line) source code of an user-defined function (UDF). |
      | `udf-runtime`             | string    | The name of an UDF runtime. |
      | `udf-runtime-version`     | string    | The version of an UDF runtime. |
      | `uri`                     | string    | A valid URI according to [RFC3986](https://tools.ietf.org/html/rfc3986). |
      | `vector-cube`             | object    | A vector data cube, a vector collection stored at the back-end. Different back-ends have different internal representations for this data structure |
      | `wkt2-definition`         | string    | Specifies details about cartographic projections as WKT2 string. Refers to the latest WKT2 version (currently [WKT2:2018](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html) / ISO 19162:2018) unless otherwise stated by the process. |

      ## Parametrized Process Graphs

      A parametrized process graph is a process graph that is passed as an argument to a process parameter and is expected to be executed by the process.

      In a process definition, a parameter that accepts a parametrized process graph is defined by setting the `type` to `object` and the `subtype` to `process-graph` in the parameter schema. Additionally, it must have a property `parameters` (a custom JSON Schema keyword). `parameters` must be an object with the keys being the parameter names and the values being a valid JSON Schema again.

      A schema for a process parameter that accepts a parametrized process graph with two parameters `dimension` (a string) and `data` (an array of numbers) could be defined as follows:

      ```json
      {
        "type": "object",
        "subtype": "process-graph",
        "parameters": {
          "dimension": {
            "description": "Name of the dimension",
            "type": "string"
          },
          "data": {
            "description": "Data for the dimension",
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      }
      ```
  - name: Account Management
    description: |-
      The following endpoints handle user profiles, accounting and authentication. See also [Authentication](#section/Authentication). In general, the openEO API only defines a minimum subset of user management and accounting functionality. It allows to

      * [authenticate and authorize](http://www.differencebetween.net/technology/difference-between-authentication-and-authorization/) a user, which may include [user registration with OpenID Connect](http://openid.net/specs/openid-connect-registration-1_0.html),
      * handle storage space limits (disk quota),
      * manage billing, which includes to
          * query the credit a user has available,
          * estimate costs for certain operations (data processing and downloading),
          * get information about produced costs,
          * limit costs of certain operations.

      Therefore, the API leaves some aspects open that have to be handled by the back-ends separately, including 

      * credential recovery, e.g. retrieving a forgotten password
      * user data management, e.g. changing the users payment details or email address
      * payments, i.e. topping up credits for pre-paid services or paying for post-paid services
      * other accounting related tasks, e.g. creating invoices,
      * user registration (except for [user registration with OpenID Connect](http://openid.net/specs/openid-connect-registration-1_0.html)).
  - name: File Storage
    description: Management of user-uploaded assets and processed data.
  - name: Process Graphs
    description: |-
      These endpoints allow to store and manage process graphs at the back-end.

      A process graph is a chain of specific [processes](#section/Processes). Similarly to scripts in the context of programming, process graphs organize and automate the execution of one or more processes that could alternatively be executed individually. In a process graph, processes need to be specific, which means that concrete values for input parameters need to be specified. These arguments can again be parametrized process graphs, scalar values, arrays, objects or variables.

      # Definition

      A process graph is defined to be a map of connected processes with exactly one node returning the final result:

      ```
      <ProcessGraph> := {
        <ProcessNodeIdentifier>: <ProcessNode>,
        ...
      }
      ```

      `<ProcessNodeIdentifier>` is a unique key within the process graph that is used to reference (the return value of) this process in arguments of other processes. The identifier is unique only within its own process graph, excluding any parent and child process graphs. Identifiers are also strictly scoped and can not be referenced from child or parent process graphs. Please note that circular references are not allowed.

      Note: [Below you can find a JSON Schema for process graph validation](#process-graph-validation).

      ## Processes (Process Nodes)

      A single node in a process graph (i.e. a specific instance of a process) is defined as follows:

      ```
      <ProcessNode> := {
        "process_id": <string>,
        "description": <string>,
        "arguments": <Arguments>,
        "result": <boolean>
      }
      ```
      A process node MUST always contain key-value-pairs named `process_id` and `arguments` (see the next section). It MAY contain a `description`.

      One of the nodes in a map of processes (the final one) MUST have the `result` flag set to `true`, all the other nodes can omit it as the default value is `false`.  This is important as multiple end nodes are possible, but in most use cases it is important to have exactly one end node, which can be referenced and the return value be used by other processes. Please note each parametrized sub process graph also has a result node similar to the "main" process graph.

      `process_id` can contain any of the process names defined by a back-end, which are all listed at `GET /processes`, e.g. `load_collection` to retrieve data from a specific collection for processing.

      ## Arguments

      A process can have an arbitrary number of arguments. Their name and value are specified 
      in the process specification as an object of key-value pairs:

      ```
      <Arguments> := {
        <ParameterName>: <ArgumentValue>
      }
      ```

      The key `<ParameterName>` is RECOMMENDED to use [snake case](https://en.wikipedia.org/wiki/Snake_case) (e.g. `window_size` or `scale_factor`) and MUST limit the characters to letters (a-z), numbers and underscores.

      A value is defined as follows:

      ```
      <ArgumentValue> := <string|number|boolean|null|array|object|Callback|CallbackParameter|Result|Variable>
      ```

      Notes:
      - The specified value types, except `Callback`, `CallbackParameter`, `Result` and `Variable`, are the native data types supported by JSON. 
      - Object-type values are not allowed to have keys with the following names:

          * `variable_id`, except for objects of type `Variable`
          * `from_argument`, except for objects of type `PGParameter`
          * `from_node`, except for objects of type `Result`

      - A value of type `<Result>` is simply an object with a key `from_node` with a `<ProcessNodeIdentifier>` as value, which tells the back-end that the process expects the result (i.e. the return value) from another node to be passed as argument:

          ```
          <Result> := {
            "from_node": <ProcessNodeIdentifier>
          }
          ```

          Note that the `<ProcessNodeIdentifier>` is strictly scoped and can only referenced from within the same process graph, i.e. can not be referenced in child or parent process graphs.

      - For `Variable`, `Callback` and `CallbackParameter` see the sections below.


      **Important:** Arrays and objects can also contain any of the data types defined above for `<ArgumentValue>`. So back-ends must *fully* traverse the process graphs, including all children.


      ## Parametrized Process Graphs

      A parametrized process graph is a child process graph to be evaluated as part of a parent process graph.
      The child process graph is passed as argument of one of the processes in the parent process graph.
      It is called parametrized process graph as the parent process can pass parameters to the child process graph.
      The child process graph must be wrapped in an object with a single key `callback`.

      ```
      <ParametrizedProcessGraph> := {
        "callback": <ProcessGraph>
      }
      ```

      For example, you want to iterate over an array and calculate the absolute value of each value in the array.
      You can do so by executing the `apply` process in openEO (often also called `map` in other languages) and pass a process graph containing a single process `absolute`.

      The parameters made available by the "parent" process (`apply` in the example) to the "child" process graph are the *process graph parameters*. 
      Processes in the parametrized process graph can access the values of a parameter by passing a certain type of object to the parameters of processes in the parametrized process graph (similar to the `Result` type discussed above).
      It is a simple object with key `from_argument` specifying the name of the process graph parameter: 

      ```
      <PGParameter> := {
        "from_argument": <PGParameterName>
      }
      ```

      The available parameter names (`<PGParameterName>`) are defined by the processes.
      A process parameter has a [`parameters` property](#section/Additional-data-types-for-schemas/Parametrized-Process-Graphs)
      in the JSON Schema, which defines the parameters made available to the child process graph.

      In case of the `apply-absolute` example, the parameter `process` in the process `apply` provides a process graph parameter named `x` 
      and `absolute` expects an argument with the same name.
      `loadcollection1` would be a result from another process (not defined in this example):

      ```
      {
        "process_id": "apply",
        "arguments": {
          "data": {"from_node": "loadcollection1"}
          "process": {
            "callback": {
              "abs1": {
                "process_id": "absolute",
                "arguments: {
                  "x": {"from_argument": "x"}
                },
                "result": true
              }
            }
          }
        }
      }
      ```

      Please note that the `<PGParameterName>` is also strictly scoped within the child process graph and can not be referenced from other process graphs. 

      ## Variables

      Process graphs can also hold a variable, which can be filled in later. For shared process graphs this can be useful to make them more portable, e.g in case a back-end specific product name would be stored with the process graph.

      Variables are defined as follows:

      ```
      <Variable> := {
        "variable_id": <string>,
        "description": <string>,
        "type": <string>,
        "default": <string|number|boolean|null|array|object>
      }
      ```

      The value for `type` is the expected data type for the content of the variable and MUST be one of `string` (default), `number`, `boolean`, `array` or `object`.

      The value for `variable_id` is the name of the variable and can be any valid JSON key, but it is RECOMMENDED to use [snake case](https://en.wikipedia.org/wiki/Snake_case) and limit the characters to `a-z`, `0-9` and `_`.

      Whenever no value for the variable is defined, the `default` value is used or the process graph is rejected if not default value has been specified.

      # Validation

      Process graph validation is a quite complex task. Below you can find a process graph JSON schema for basic validation. It checks the general structure of a process graph, but only checking against the schema is not fully validating a process graph. Note that this JSON Schema is probably good enough for a first version, but should be revised and improved for production. There are further steps to do:

      1. Validate whether there's exactly one `result: true` per process graph.
      2. Check whether the process names that are referenced in the field `process_id` are actually available. There's a custom format `process-id`, which can be used to check the value directly during validation against the JSON Schema.
      3. Validate all arguments for each process against the JSON schemas that are specified in the corresponding process specifications.
      4. Check whether the values specified for `from_node` have a corresponding node in the same process graph.
      5. Validate whether the return value and the arguments requesting a return value with `from_node` are compatible.
      6. Validate whether the data types of process graph variables are compatible to the JSON schema of the parameters.
      7. Check the content of arrays and objects. These could include variables and other references (`from_node`, `from_argument` etc.). Note that this is a very complex validation step and [still under discussions in issue #183](https://github.com/Open-EO/openeo-api/issues/183).

      ```json
      {
        "$schema":"http://json-schema.org/draft-07/schema#",
        "title":"Process Graph",
        "description":"A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node id) that is used to refer to the process in the graph.",
        "allOf":[
          {
            "$ref":"#/definitions/process_graph"
          }
        ],
        "definitions":{
          "process_graph":{
            "title":"Process Graph",
            "type":"object",
            "additionalProperties":{
              "$ref":"#/definitions/process_node"
            }
          },
          "process_node":{
            "title":"Process Node",
            "type":"object",
            "required":[
              "process_id",
              "arguments"
            ],
            "properties":{
              "process_id":{
                "$ref":"#/definitions/process_id"
              },
              "result":{
                "type":"boolean",
                "default":false
              },
              "description":{
                "type":[
                  "string",
                  "null"
                ]
              },
              "arguments":{
                "$ref":"#/definitions/process_arguments"
              }
            }
          },
          "process_arguments":{
            "title":"Process Arguments",
            "type":"object",
            "additionalProperties":{
              "$ref":"#/definitions/process_argument_value"
            }
          },
          "process_argument_value":{
            "title":"Process Argument Value",
            "anyOf":[
              {
                "type":"null"
              },
              {
                "type":"object",
                "title":"Object"
              },
              {
                "type":"string",
                "title":"String"
              },
              {
                "type":"number",
                "title":"Number (incl. integers)"
              },
              {
                "type":"boolean",
                "title":"Boolean"
              },
              {
                "type":"array",
                "title":"Array",
                "items":{
                  "$ref":"#/definitions/process_argument_value"
                }
              },
              {
                "$ref":"#/definitions/variable"
              },
              {
                "type":"object",
                "title":"Result",
                "required":[
                  "from_node"
                ],
                "properties":{
                  "from_node":{
                    "type":"string"
                  }
                },
                "additionalProperties":false
              },
              {
                "type":"object",
                "title":"Callback Parameter",
                "required":[
                  "from_argument"
                ],
                "properties":{
                  "from_argument":{
                    "type":"string"
                  }
                },
                "additionalProperties":false
              },
              {
                "type":"object",
                "title":"Callback",
                "required":[
                  "callback"
                ],
                "properties":{
                  "callback":{
                    "$ref":"#/definitions/process_graph"
                  }
                },
                "additionalProperties":false
              }
            ]
          },
          "variable":{
            "title":"Process Graph Variable",
            "type":"object",
            "required":[
              "variable_id"
            ],
            "properties":{
              "variable_id":{
                "type":"string"
              },
              "type":{
                "type":"string",
                "enum":[
                  "string",
                  "number",
                  "integer",
                  "boolean",
                  "array",
                  "object"
                ],
                "default":"string"
              },
              "description":{
                "type":[
                  "string",
                  "null"
                ]
              },
              "default":{
                "anyOf":[
                  {
                    "type":"null"
                  },
                  {
                    "type":"object"
                  },
                  {
                    "type":"string"
                  },
                  {
                    "type":"number"
                  },
                  {
                    "type":"array",
                    "items":{
                      "description": "Any type is allowed."
                    }
                  },
                  {
                    "type":"boolean"
                  },
                  {
                    "$ref":"#/definitions/process_graph"
                  }
                ]
              }
            }
          },
          "process_id":{
            "type":"string",
            "subtype":"process-id",
            "pattern":"^[A-Za-z0-9_]+$"
          }
        }
      }
      ```

      # Execution

      To process the process graph on the back-end you need to go through all nodes/processes in the list and set for each node to which node it passes data and from which it expects data. In another iteration the back-end can find all start nodes for processing by checking for zero dependencies.

      You can now start and execute the start nodes (in parallel, if possible). Results can be passed to the nodes that were identified beforehand. For each node that depends on multiple inputs you need to check whether all dependencies have already finished and only execute once the last dependency is ready.

      Please be aware that the result node (`result` set to `true`) is not necessarily the last node that is executed. The author of the process graph may choose to set a non-end node to the result node!

      # Example

      Deriving minimum EVI (Enhanced Vegetation Index) measurements over pixel time series of Sentinel 2 imagery. The main process graph in blue, parametrized child process graphs in yellow:

      ![Graph with processing instructions](img/pg-example.png)

      The process graph representing the algorithm:

      ``` json
      {
        "dc": {
          "process_id": "load_collection",
          "description": "Loading the data; The order of the specified bands is important for the following reduce operation.",
          "arguments": {
            "id": "Sentinel-2",
            "spatial_extent": {
              "west": 16.1,
              "east": 16.6,
              "north": 48.6,
              "south": 47.2
            },
            "temporal_extent": ["2018-01-01", "2018-02-01"],
            "bands": ["B08", "B04", "B02"]
          }
        },
        "evi": {
          "process_id": "reduce",
          "description": "Compute the EVI. Formula: 2.5 * (NIR - RED) / (1 + NIR + 6*RED + -7.5*BLUE)",
          "arguments": {
            "data": {"from_node": "dc"},
            "dimension": "spectral",
            "reducer": {
              "callback": {
                "nir": {
                  "process_id": "array_element",
                  "arguments": {
                    "data": {"from_argument": "data"},
                    "index": 0
                  }
                },
                "red": {
                  "process_id": "array_element",
                  "arguments": {
                    "data": {"from_argument": "data"},
                    "index": 1
                  }
                },
                "blue": {
                  "process_id": "array_element",
                  "arguments": {
                    "data": {"from_argument": "data"},
                    "index": 2
                  }
                },
                "sub": {
                  "process_id": "subtract",
                  "arguments": {
                    "data": [{"from_node": "nir"}, {"from_node": "red"}]
                  }
                },
                "p1": {
                  "process_id": "product",
                  "arguments": {
                    "data": [6, {"from_node": "red"}]
                  }
                },
                "p2": {
                  "process_id": "product",
                  "arguments": {
                    "data": [-7.5, {"from_node": "blue"}]
                  }
                },
                "sum": {
                  "process_id": "sum",
                  "arguments": {
                    "data": [1, {"from_node": "nir"}, {"from_node": "p1"}, {"from_node": "p2"}]
                  }
                },
                "div": {
                  "process_id": "divide",
                  "arguments": {
                    "data": [{"from_node": "sub"}, {"from_node": "sum"}]
                  }
                },
                "p3": {
                  "process_id": "product",
                  "arguments": {
                    "data": [2.5, {"from_node": "div"}]
                  },
                  "result": true
                }
              }
            }
          }
        },
        "mintime": {
          "process_id": "reduce",
          "description": "Compute a minimum time composite by reducing the temporal dimension",
          "arguments": {
            "data": {"from_node": "evi"},
            "dimension": "temporal",
            "reducer": {
              "callback": {
                "min": {
                  "process_id": "min",
                  "arguments": {
                    "data": {"from_argument": "data"}
                  },
                  "result": true
                }
              }
            }
          }
        },
        "save": {
          "process_id": "save_result",
          "arguments": {
            "data": {"from_node": "mintime"},
            "format": "GTiff"
          },
          "result": true
        }
      }
      ```
  - name: Batch Jobs
    description: Management of batch processing tasks (jobs) and their results.
  - name: Secondary Services
    description: On-demand access to data using other web service protocols.
servers:
  - url: 'https://localhost/api/{version}'
    description: >-
      The URL of the API MAY freely be chosen by the back-end providers. The
      path, including API versioning, is a *recommendation* only. Nevertheless,
      all servers MUST support HTTPS as the authentication methods are not
      secure with HTTP only!
    variables:
      version:
        default: v0.4
        description: >-
          API versioning is RECOMMENDED. As the openEO API is following
          [SemVer](https://semver.org/) only the MAJOR part of the stable
          version numbers (i.e. versions >= 1.0.0) SHOULD be used for API
          versioning in the URL. The reason is that backward-incompatible
          changes are usually introduced by major changes. Therefore, the
          version number in the URL MUST not be used by the clients to detect
          the version number of the API. Use the version number returned from
          `GET /` instead.
paths:
  /:
    get:
      summary: Information about the back-end
      description: >-
        Returns general information about the back-end, including which version
        and endpoints of the openEO API are supported. May also include billing
        information.
      tags:
        - Capabilities
      security:
        - {}
      responses:
        '200':
          description: >-
            Information about the API version and supported endpoints /
            features.
          content:
            application/json:
              schema:
                title: Capabilities Response
                type: object
                required:
                  - title
                  - description
                  - api_version
                  - backend_version
                  - endpoints
                  - links
                properties:
                  api_version:
                    type: string
                    description: >-
                      Version number of the openEO specification this back-end
                      implements.
                    example: 1.0.1
                  backend_version:
                    type: string
                    description: >-
                      Version number of the back-end implementation.

                      Every change on back-end side MUST cause a change of the
                      version number.
                    example: 1.1.2
                  title:
                    type: string
                    description: The name of the service.
                    example: Cool Cloud EOPS
                  description:
                    type: string
                    description: >-
                      A description of the service, which allows the service
                      provider to introduce the user to its service.

                      [CommonMark 0.29](http://commonmark.org/) syntax MAY be
                      used for rich text representation.
                    example: >-
                      EOPS - the most advanced EO processing service - is
                      provided to you by [Cool Cloud
                      Corp.](http://cool-cloud-corp.com). It implements the full
                      openEO API and allows to process a range of 999 EO data
                      sets, including 

                      * Sentinel 1/2/3 and 5

                      * Landsat 7/8


                      A free plan is available to test the service. For further
                      information please contact our customer service at
                      [support@cool-cloud-corp.com](mailto:support@cool-cloud-corp.com).
                  production:
                    $ref: '#/components/schemas/production'
                  endpoints:
                    type: array
                    description: >-
                      Lists all supported endpoints. Supported are all
                      endpoints, which are implemented, return a 2XX or 3XX HTTP
                      status code and are fully compatible to the API
                      specification.
                    items:
                      title: Endpoint
                      type: object
                      required:
                        - path
                        - methods
                      properties:
                        path:
                          description: >-
                            Path to the endpoint, relative to the URL of this
                            endpoint. In general the paths MUST follow the paths
                            specified in the openAPI specification as closely as
                            possible. Therefore, paths MUST be prepended with a
                            leading slash, but MUST NOT contain a trailing
                            slash. Variables in the paths MUST be placed in
                            curly braces and follow the parameter names in the
                            openAPI specification, e.g. `{job_id}`.
                          type: string
                        methods:
                          description: >-
                            Supported HTTP verbs in uppercase. It is not
                            required to list OPTIONS as method (see the
                            documentation regarding CORS).
                          type: array
                          items:
                            type: string
                            enum:
                              - GET
                              - POST
                              - PATCH
                              - PUT
                              - DELETE
                    example:
                      - path: /collections
                        methods:
                          - GET
                      - path: '/collections/{collection_id}'
                        methods:
                          - GET
                      - path: /processes
                        methods:
                          - GET
                      - path: /jobs
                        methods:
                          - GET
                          - POST
                      - path: '/jobs/{job_id}'
                        methods:
                          - GET
                          - DELETE
                          - PATCH
                  billing:
                    title: Billing
                    description: >-
                      Billing related data, e.g. the currency used or available
                      plans to process jobs. MUST be specified if the back-end
                      uses any billing related functionalities, e.g. budgeting,
                      estimates.
                    type: object
                    required:
                      - currency
                    properties:
                      currency:
                        description: >-
                          The currency the back-end is billing in. The currency
                          MUST be either a valid currency code as defined in
                          ISO-4217 or a proprietary currency, e.g. tiles or
                          back-end specific credits. If set to the default value
                          `null`, budget and costs are not supported by the
                          back-end and users can't be charged.
                        type: string
                        nullable: true
                        default: null
                        example: USD
                      default_plan:
                        type: string
                        description: >-
                          Name of the default plan to use when the user doesn't
                          specify a plan. Is allowed to be *case insensitive*
                          throughout the API.
                        example: free
                      plans:
                        description: Array of plans
                        type: array
                        items:
                          title: Billing Plan
                          type: object
                          required:
                            - name
                            - description
                            - paid
                          properties:
                            name:
                              type: string
                              description: >-
                                Name of the plan. Is allowed to be *case
                                insensitive* throughout the API.
                              example: free
                            description:
                              type: string
                              description: >-
                                A description that gives a rough overview over
                                the plan.


                                [CommonMark 0.29](http://commonmark.org/) syntax
                                MAY be used for rich text representation.
                              example: Free plan for testing.
                            paid:
                              type: boolean
                              description: >-
                                Indicates whether the plan is a paid plan
                                (`true`) or a free plan (`false`).
                            url:
                              type: string
                              description: >-
                                URL to a web page with more details about the
                                plan.
                              format: url
                              example: 'http://cool-cloud-corp.com/plans/free-plan'
                        example:
                          - name: free
                            description: >-
                              Free plan. Calculates one tile per second and a
                              maximum amount of 100 tiles per hour.
                            url: 'http://cool-cloud-corp.com/plans/free-plan'
                            paid: false
                          - name: premium
                            description: >-
                              Premium plan. Calculates unlimited tiles and each
                              calculated tile costs 0.003 USD.
                            url: 'http://cool-cloud-corp.com/plans/premium-plan'
                            paid: true
                  links:
                    description: |-
                      Links related to this service, e.g. the homepage of
                      the service provider or the terms of service.

                      It is highly RECOMMENDED to provide links with the
                      following `rel` (relation) types:

                      1. `version-history`: A link back to the Well-Known URL
                      (see `/.well-known/openeo`) to allow clients to work on
                      the most recent version.

                      2. `terms-of-service`: A link to the terms of service. If
                      a back-end provides a link to the terms of service, the
                      clients MUST provide a way to read the terms of service
                      and only connect to the back-end after the user agreed to
                      them. The user interface MUST be designed in a way that
                      the terms of service are not agreed to by default, i.e.
                      the user MUST explicitly agree to them.

                      3. `privacy-policy`: A link to the privacy policy (GDPR).
                      If a back-end provides a link to a privacy policy, the
                      clients MUST provide a way to read the privacy policy and
                      only connect to the back-end after the user agreed to
                      them. The user interface MUST be designed in a way that
                      the privacy policy is not agreed to by default, i.e. the
                      user MUST explicitly agree to them.

                      4. `service-desc` or `service-doc`: A link to the API definition.
                      Use `service-desc` for machine-readable API definition and 
                      `service-doc` for human-readable API definition.

                      For additional relation types see also the lists of
                      [common relation types in openEO](#section/Web-Linking).
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                    example:
                      - href: 'http://www.cool-cloud-corp.com'
                        rel: about
                        type: text/html
                        title: Homepage of the service provider
                      - href: 'https://www.cool-cloud-corp.com/tos'
                        rel: terms-of-service
                        type: text/html
                        title: Terms of service
                      - href: 'https://www.cool-cloud-corp.com/privacy'
                        rel: privacy-policy
                        type: text/html
                        title: Privacy Policy
                      - href: 'http://www.cool-cloud-corp.com/.well-known/openeo'
                        rel: version-history
                        type: application/json
                        title: List of supported openEO versions
        4XX:
          $ref: '#/components/responses/client_error'
        5XX:
          $ref: '#/components/responses/server_error'
  /.well-known/openeo:
    get:
      summary: Supported openEO versions
      description: >-
        Well-Known URI (see [RFC 57855](https://tools.ietf.org/html/rfc5785))
        for openEO, listing all implemented openEO versions supported by the
        service provider.


        This allows a client to easily identify the most recent openEO
        implementation it supports. By default, a client SHOULD connect to the
        most recent production-ready version it supports. Clients MAY let users
        choose to connect to versions that are not production-ready versions or
        outdated.


        The Well-Known URI is the entry point for clients and users, so make
        sure it is permanent and easy to use and remember. Clients MUST NOT
        require the well-known path (`./well-known/openeo`) in the URL that is
        specified by a user to connect to the back-end. A client MUST request
        `https://example.com/.well-known/openeo` if a user tries to connect to
        `https://example.com`. If the request to the well-known URI fails, the
        client SHOULD try to request the capabilities at `/` from
        `https://example.com`.


        **This URI MUST NOT be versioned as the other endpoints.** If your API
        is available at `https://example.com/api/v1.0`, the Well-Known URI
        SHOULD be located at `https://example.com/.well-known/openeo` and the
        URI users connect to SHOULD be `https://example.com`.


        Clients MAY get additional information (e.g. title or description) about
        a back-end from the most recent version that has the `production` flag
        set to `true`.
      tags:
        - Capabilities
      security:
        - {}
      servers:
        - url: 'https://localhost'
          description: >-
            The Well-Known URI SHOULD be available directly at
            `https://{{domain}}/.well-known/openeo` in contrast to the other
            endpoints, which may be versioned and can run on other hosts, ports,
            ... etc.
      responses:
        '200':
          description: >-
            List of all available service instances, each with URL and the
            implemented openEO API version.
          content:
            application/json:
              schema:
                title: Well Known Discovery Response
                type: object
                required:
                  - versions
                properties:
                  versions:
                    type: array
                    items:
                      title: Service Instance
                      type: object
                      required:
                        - url
                        - api_version
                      properties:
                        url:
                          type: string
                          format: url
                          description: '*Absolute* URLs to the service.'
                          example: 'https://example.com/api/v0.4'
                        production:
                          $ref: '#/components/schemas/production'
                        api_version:
                          type: string
                          description: >-
                            Version number of the openEO specification this
                            back-end implements.
                          example: 1.0.1
                example:
                  versions:
                    - url: 'https://www.openeo.org/api/v0.5'
                      api_version: 0.5.1
                    - url: 'https://www.openeo.org/api/v1.0'
                      api_version: 1.0.0
                    - url: 'https://www.openeo.org/api/v1.1'
                      production: false
                      api_version: 1.1.0-beta
        4XX:
          $ref: '#/components/responses/client_error'
        5XX:
          $ref: '#/components/responses/server_error'
  /file_formats:
    get:
      summary: Supported file formats
      description: >-
        The request will ask the back-end for supported input and output file
        formats. *Input* file formats specify which file a back-end can *read*
        from. *Output* file formats specify which file a back-end can *write*
        to.


        The response to this request is an object listing all available input
        and output file formats separately with their parameters and additional
        data. This endpoint does not include the supported secondary web
        services.


        **Note**: Format names and parameters MUST be fully aligned with the
        GDAL codes if available, see [GDAL Raster
        Formats](http://www.gdal.org/formats_list.html) and [OGR Vector
        Formats](http://www.gdal.org/ogr_formats.html). It is OPTIONAL to
        support all output format parameters supported by GDAL. Some file
        formats not available through GDAL may be defined centrally for openEO.
        Custom file formats or parameters MAY be defined.


        The format descriptions must describe how the file formats relate to 
        data cubes. Input file formats must describe how the files have to be
        structured to be transformed into data cubes. Output file formats must
        describe how the data cubes are stored at the back-end and how the 
        resulting file structure looks like.


        Back-ends MUST NOT support aliases, for example it is not allowed to
        support `geotiff` instead of `gtiff`. Nevertheless, openEO Clients MAY
        translate user input input for convenience (e.g. translate `geotiff` to
        `gtiff`). Also, for a better user experience the back-end can specify a
        `title`.


        Format names are allowed to be *case insensitive* throughout the API.
      tags:
        - Capabilities
        - Batch Jobs
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: >-
            An object with containing all input and output format separately. 
            For each property `input` and `output` an object is defined where
            the  file format names are the property keys and the property values
            are objects that define a title, supported parameters and related
            links.
          content:
            application/json:
              schema:
                type: object
                required:
                  - input
                  - output
                properties:
                  input:
                    title: Input Formats Response
                    type: object
                    description: >-
                      List of supported input file formats, i.e. file formats a
                      back-end can **read** from. The property keys are the file
                      format names that are used by clients and users, for
                      example in process graphs.
                    additionalProperties:
                      $ref: '#/components/schemas/file_format'
                  output:
                    title: Output Formats Response
                    type: object
                    description: >-
                      List of supported output file formats, i.e. file formats a
                      back-end can **write** to. The property keys are the file
                      format names that are used by clients and users, for
                      example in process graphs.
                    additionalProperties:
                      $ref: '#/components/schemas/file_format'
                example:
                  output:
                    GTiff:
                      title: GeoTiff
                      gis_data_types:
                        - raster
                      parameters:
                        tiled:
                          type: boolean
                          description: >-
                            This option can be used to force creation of tiled
                            TIFF files [true]. By default [false] stripped TIFF
                            files are created.
                          default: false
                        compress:
                          type: string
                          description: Set the compression to use.
                          default: none
                          enum:
                            - JPEG
                            - LZW
                            - DEFLATE
                            - NONE
                        jpeg_quality:
                          type: integer
                          description: Set the JPEG quality when using JPEG.
                          minimum: 1
                          maximum: 100
                          default: 75
                      links:
                        - href: 'https://www.gdal.org/frmt_gtiff.html'
                          rel: about
                          title: GDAL on the GeoTiff file format and storage options
                    GPKG:
                      title: OGC GeoPackage
                      gis_data_types:
                        - raster
                        - vector
                      parameters:
                        version:
                          type: string
                          description: >-
                            Set GeoPackage version. In AUTO mode, this will be
                            equivalent to 1.2 starting with GDAL 2.3.
                          enum:
                            - auto
                            - '1'
                            - '1.1'
                            - '1.2'
                          default: auto
                      links:
                        - href: 'https://www.gdal.org/drv_geopackage_raster.html'
                          rel: about
                          title: GDAL on GeoPackage for raster data
                        - href: 'https://www.gdal.org/drv_geopackage.html'
                          rel: about
                          title: GDAL on GeoPackage for vector data
                  input:
                    GPKG:
                      title: OGC GeoPackage
                      gis_data_types:
                        - raster
                        - vector
                      parameters:
                        table:
                          type: string
                          description: >-
                            **RASTER ONLY.** Name of the table containing the
                            tiles. If the GeoPackage dataset only contains one
                            table, this option is not necessary. Otherwise, it
                            is required.
                      links:
                        - href: 'https://www.gdal.org/drv_geopackage_raster.html'
                          rel: about
                          title: GDAL on GeoPackage for raster data
                        - href: 'https://www.gdal.org/drv_geopackage.html'
                          rel: about
                          title: GDAL on GeoPackage for vector data
        4XX:
          $ref: '#/components/responses/client_error'
        5XX:
          $ref: '#/components/responses/server_error'
  /collections:
    get:
      summary: Basic metadata for all datasets.
      description: >-
        Lists available collections with basic information. To retrieve data
        cube (property `cube:dimensions`) and domain specific information
        (property `summaries`, e.g. SAR-specific information) request all
        information for a specific collection using `GET
        /collections/{collection_id}`.


        This endpoint is compatible with [STAC 0.8.1](https://stacspec.org) and
        [OGC API -
        Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html).
        [STAC
        API](https://github.com/radiantearth/stac-spec/tree/master/api-spec)
        features / extensions and [STAC content
        extensions](https://github.com/radiantearth/stac-spec/tree/master/extensions#list-of-content-extensions)
        can be implemented in addition to what is documented here.


        More information on [data
        discovery](https://open-eo.github.io/openeo-api/draft/collections/),
        including common relation types for links, are available in the
        documentation.
      tags:
        - EO Data Discovery
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: A list of collections and related links.
          content:
            application/json:
              schema:
                title: Collections Response
                type: object
                required:
                  - collections
                  - links
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/collection'
                  links:
                    $ref: '#/components/schemas/links_pagination'
                example:
                  collections:
                    - stac_version: 0.8.1
                      stac_extensions:
                        - datacube
                      id: Sentinel-2A
                      title: Sentinel-2A MSI L1C
                      description: >-
                        Sentinel-2A is a wide-swath, high-resolution,
                        multi-spectral imaging mission supporting Copernicus
                        Land Monitoring studies, including the monitoring of
                        vegetation, soil and water cover, as well as observation
                        of inland waterways and coastal areas.
                      license: proprietary
                      extent:
                        spatial:
                          bbox:
                            - - 180
                              - -56
                              - -180
                              - 83
                        temporal:
                          interval:
                            - - '2015-06-23T00:00:00Z'
                              - '2019-01-01T00:00:00Z'
                      keywords:
                        - copernicus
                        - esa
                        - msi
                        - sentinel
                      providers:
                        - name: European Space Agency (ESA)
                          roles:
                            - producer
                            - licensor
                          url: >-
                            https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
                        - name: openEO
                          roles:
                            - host
                          url: >-
                            https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2
                      links:
                        - rel: license
                          href: >-
                            https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
                    - stac_version: 0.8.1
                      stac_extensions:
                        - datacube
                      id: MOD09Q1
                      title: >-
                        MODIS/Terra Surface Reflectance 8-Day L3 Global 250m SIN
                        Grid V006
                      description: >-
                        The MOD09Q1 Version 6 product provides an estimate of
                        the surface spectral reflectance of Terra MODIS Bands
                        1-2 corrected for atmospheric conditions such as gasses,
                        aerosols, and Rayleigh scattering. Provided along with
                        the two 250 m MODIS bands is one additional layer, the
                        Surface Reflectance QC 250 m band. For each pixel, a
                        value is selected from all the acquisitions within the
                        8-day composite period. The criteria for the pixel
                        choice include cloud and solar zenith. When several
                        acquisitions meet the criteria the pixel with the
                        minimum channel 3 (blue) value is used. Validation at
                        stage 3 has been achieved for all MODIS Surface
                        Reflectance products.
                      license: proprietary
                      extent:
                        spatial:
                          bbox:
                            - - 180
                              - -90
                              - -180
                              - 90
                        temporal:
                          interval:
                            - - '2000-02-01T00:00:00Z'
                              - null
                      links:
                        - rel: license
                          href: 'https://openeo.org/api/collections/MOD09Q1/license'
                  links:
                    - rel: alternate
                      href: 'https://openeo.org/csw'
                      title: openEO catalog (OGC Catalogue Services 3.0)
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/collections/{collection_id}':
    parameters:
      - name: collection_id
        in: path
        description: Collection identifier
        required: true
        schema:
          $ref: '#/components/schemas/collection_id'
    get:
      summary: Full metadata for a specific dataset
      description: >-
        Lists **all** information about a specific collection specified by the
        identifier `collection_id`.


        This endpoint is compatible with [STAC 0.8.1](https://stacspec.org) and
        [OGC API -
        Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html).
        [STAC
        API](https://github.com/radiantearth/stac-spec/tree/master/api-spec)
        features / extensions and [STAC content
        extensions](https://github.com/radiantearth/stac-spec/tree/master/extensions#list-of-content-extensions)
        can be implemented in addition to what is documented here.


        More information on [data
        discovery](https://open-eo.github.io/openeo-api/draft/collections/),
        including common relation types for links, are available in the
        documentation.
      tags:
        - EO Data Discovery
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: JSON object with metadata about the collection.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/collection'
                  - type: object
                    required:
                      - 'cube:dimensions'
                      - summaries
                    properties:
                      'cube:dimensions':
                        title: STAC Collection Cube Dimensions
                        description: >-
                          Uniquely named dimensions of the data cube.


                          The keys of the object are the dimension names. For
                          interoperability, it is RECOMMENDED to use the
                          following dimension names if there is only a single
                          dimension with the specified criteria:

                          * `x` for the dimension of type `spatial` with the
                          axis set to `x`

                          * `y` for the dimension of type `spatial` with the
                          axis set to `y`

                          * `z` for the dimension of type `spatial` with the
                          axis set to `z`

                          * `temporal` for the dimension of type `temporal`

                          * `spectral` for the dimension of type `bands` if the
                          data IS multi-spectral

                          * `bands` for dimensions of type `bands` if the data
                          IS NOT multi-spectral.
                        type: object
                        additionalProperties:
                          x-additionalPropertiesName: Dimension Name
                          anyOf:
                            - title: Additional Dimension
                              description: An additional dimension that is not `spatial`.
                              type: object
                              required:
                                - type
                              anyOf:
                                - title: Additional Dimension with Extent
                                  required:
                                    - extent
                                - title: Additional Dimension with Values
                                  required:
                                    - values
                              properties:
                                type:
                                  description: >-
                                    Custom type of the dimension, MUST NOT be
                                    `spatial`.
                                  type: string
                                extent:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_extent_open
                                values:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_values
                                step:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_step
                                unit:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_unit
                                reference_system:
                                  description: The reference system for the data.
                                  type: string
                            - title: Band Dimension
                              description: >-
                                A dimension for the bands.


                                The band dimension only specifies the band names
                                as dimension labels. Further information to the
                                bands are available in either `sar:bands` or
                                `eo:bands` in the `summaries` property.
                              type: object
                              required:
                                - type
                                - values
                              properties:
                                type:
                                  description: 'Type of the dimension, always `bands`.'
                                  type: string
                                  enum:
                                    - bands
                                values:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_values
                            - title: Horizontal Spatial Dimension
                              description: >-
                                A spatial dimension in one of the horizontal (x
                                or y) directions.
                              type: object
                              required:
                                - type
                                - axis
                                - extent
                              properties:
                                type:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_type_spatial
                                axis:
                                  description: 'Axis of the spatial dimension (`x`, `y`).'
                                  type: string
                                  enum:
                                    - x
                                    - 'y'
                                extent:
                                  description: >-
                                    Extent (lower and upper bounds) of the
                                    dimension as two-dimensional array. Open
                                    intervals with `null` are not allowed.
                                  type: array
                                  minItems: 2
                                  maxItems: 2
                                  items:
                                    type: number
                                values:
                                  description: 'Optionally, a set of all potential values.'
                                  type: array
                                  minItems: 1
                                  items:
                                    type: number
                                step:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_step
                                reference_system:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_reference_system_spatial
                            - title: Vertical Spatial Dimension
                              description: A spatial dimension in vertical (z) direction.
                              type: object
                              required:
                                - type
                                - axis
                              anyOf:
                                - title: Vertical Spatial Dimension with Extent
                                  required:
                                    - extent
                                - title: Vertical Spatial Dimension with Values
                                  required:
                                    - values
                              properties:
                                type:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_type_spatial
                                axis:
                                  description: 'Axis of the spatial dimension, always `z`.'
                                  type: string
                                  enum:
                                    - z
                                extent:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_extent_open
                                values:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_values
                                step:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_step
                                unit:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_unit
                                reference_system:
                                  $ref: >-
                                    #/components/schemas/collection_dimension_reference_system_spatial
                            - title: Temporal Dimension
                              description: >-
                                A temporal dimension based on the ISO 8601
                                standard. The temporal reference system for the
                                data is expected to be ISO 8601 compliant
                                (Gregorian calendar / UTC). Data not compliant
                                with ISO 8601 can be represented as an
                                *Additional Dimension Object* with `type` set to
                                `temporal`.
                              type: object
                              required:
                                - type
                                - extent
                              properties:
                                type:
                                  description: 'Type of the dimension, always `temporal`.'
                                  type: string
                                  enum:
                                    - temporal
                                values:
                                  description: >-
                                    If the dimension consists of set of specific
                                    values they can be listed here. The dates
                                    and/or times must be strings compliant to
                                    [ISO
                                    8601](https://en.wikipedia.org/wiki/ISO_8601).
                                  type: array
                                  minItems: 1
                                  items:
                                    type: string
                                extent:
                                  description: >-
                                    Extent (lower and upper bounds) of the
                                    dimension as two-dimensional array. The
                                    dates and/or times must be strings compliant
                                    to [ISO
                                    8601](https://en.wikipedia.org/wiki/ISO_8601).
                                    `null` is allowed for open date ranges.
                                  type: array
                                  minItems: 2
                                  maxItems: 2
                                  items:
                                    type: string
                                    nullable: true
                                step:
                                  description: >-
                                    The space between the temporal instances as
                                    [ISO 8601
                                    duration](https://en.wikipedia.org/wiki/ISO_8601#Durations),
                                    e.g. `P1D`. Use `null` for irregularly
                                    spaced steps.
                                  type: string
                                  nullable: true
                      summaries:
                        title: STAC Summaries (Collection Properties)
                        description: >-
                          Collection properties from STAC extensions (e.g. EO,
                          SAR or Scientific) or even custom extensions.


                          Summaries are either a unique set of all available
                          values *or* statistics. Statistics by default only
                          specify the range (minimum and maximum values), but
                          can optionally be accompanied by additional
                          statistical values. The range can specify the
                          potential range of values, but it is recommended to be
                          as precise as possible. The set of values must contain
                          at least one element and it is strongly recommended to
                          list all values. It is recommended to list as many
                          properties as reasonable so that consumers get a full
                          overview of the Collection. Properties that are
                          covered by the Collection specification (e.g.
                          `providers` and `license`) may not be repeated in the
                          summaries.
                        type: object
                        additionalProperties:
                          oneOf:
                            - type: array
                              title: Set of values
                              items:
                                description: A value of any type.
                            - type: object
                              title: Statistics
                              description: >-
                                By default, only ranges with a minimum and a
                                maximum value can be specified. Ranges can be
                                specified for ordinal values only, which means
                                they need to have a rank order. Therefore,
                                ranges can only be specified for numbers and
                                some special types of strings. Examples: grades
                                (A to F), dates or times. Implementors are free
                                to add other derived statistical values to the
                                object, for example `mean` or `stddev`.
                              required:
                                - min
                                - max
                              properties:
                                min:
                                  anyOf:
                                    - type: string
                                    - type: number
                                max:
                                  anyOf:
                                    - type: string
                                    - type: number
                example:
                  stac_version: 0.8.1
                  id: Sentinel-2
                  title: Sentinel-2 MSI L2A
                  description: >-
                    Sentinel-2A is a wide-swath, high-resolution, multi-spectral
                    imaging mission supporting Copernicus Land Monitoring
                    studies.
                  license: proprietary
                  keywords:
                    - copernicus
                    - esa
                    - msi
                    - sentinel
                  providers:
                    - name: European Space Agency (ESA)
                      roles:
                        - producer
                        - licensor
                      url: >-
                        https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi
                    - name: Google
                      roles:
                        - host
                      url: >-
                        https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2
                  extent:
                    spatial:
                      bbox:
                        - - 180
                          - -56
                          - -180
                          - 83
                    temporal:
                      interval:
                        - - '2015-06-23T00:00:00Z'
                          - null
                  links:
                    - rel: license
                      href: >-
                        https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf
                    - rel: about
                      href: >-
                        https://earth.esa.int/web/sentinel/user-guides/sentinel-2-msi/product-types/level-1c
                      title: ESA Sentinel-2 MSI Level-1C User Guide
                  'cube:dimensions':
                    x:
                      type: spatial
                      axis: x
                      extent:
                        - -180
                        - 180
                      reference_system: 4326
                    'y':
                      type: spatial
                      axis: 'y'
                      extent:
                        - -56
                        - 83
                      reference_system: 4326
                    temporal:
                      type: temporal
                      extent:
                        - '2015-06-23T00:00:00Z'
                        - null
                      step: null
                    spectral:
                      type: bands
                      values:
                        - B1
                        - B2
                        - B3
                        - B4
                        - B5
                        - B6
                        - B7
                        - B8
                        - B8A
                        - B9
                        - B10
                        - B11
                        - B12
                  'sci:citation': 'Copernicus Sentinel data [Year]'
                  summaries:
                    'eo:constellation':
                      - Sentinel-2
                    'eo:instrument':
                      - MSI
                    'eo:bands':
                      - - name: B1
                          common_name: coastal
                          center_wavelength: 0.4439
                          gsd: 60
                        - name: B2
                          common_name: blue
                          center_wavelength: 0.4966
                          gsd: 10
                        - name: B3
                          common_name: green
                          center_wavelength: 0.56
                          gsd: 10
                        - name: B4
                          common_name: red
                          center_wavelength: 0.6645
                          gsd: 10
                        - name: B5
                          center_wavelength: 0.7039
                          gsd: 20
                        - name: B6
                          center_wavelength: 0.7402
                          gsd: 20
                        - name: B7
                          center_wavelength: 0.7825
                          gsd: 20
                        - name: B8
                          common_name: nir
                          center_wavelength: 0.8351
                          gsd: 10
                        - name: B8A
                          center_wavelength: 0.8648
                          gsd: 20
                        - name: B9
                          center_wavelength: 0.945
                          gsd: 60
                        - name: B10
                          center_wavelength: 1.3735
                          gsd: 60
                        - name: B11
                          common_name: swir16
                          center_wavelength: 1.6137
                          gsd: 20
                        - name: B12
                          common_name: swir22
                          center_wavelength: 2.2024
                          gsd: 20
                    'eo:platform':
                      - Sentinel-2A
                      - Sentinel-2B
                    'eo:epsg':
                      min: 32601
                      max: 32660
                    'eo:cloud_cover':
                      min: 0
                      max: 100
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /processes:
    get:
      summary: Supported processes
      description: >-
        The request asks the back-end for available processes and returns
        detailed process descriptions, including parameters and return values.
      tags:
        - Process Discovery
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: Formal specification describing the supported processes.
          content:
            application/json:
              schema:
                title: Processes Response
                type: object
                required:
                  - processes
                  - links
                properties:
                  processes:
                    type: array
                    items:
                      $ref: '#/components/schemas/process'
                  links:
                    $ref: '#/components/schemas/links_pagination'
                example:
                  processes:
                    - id: round
                      summary: Rounds to a specified precision
                      description: >-
                        Rounds a real number `x` to specified precision `p`.


                        If the fractional part of `x` is halfway between two
                        integers, one of which is even and the other odd, then
                        the even number is returned.

                        This behavior follows [IEEE Standard
                        754](https://ieeexplore.ieee.org/document/4610935). This
                        kind of rounding is also called "rounding to nearest" or
                        "banker's rounding". It minimizes rounding errors that
                        result from consistently rounding a midpoint value in a
                        single direction.


                        The nodata value `null` is passed through and therefore
                        gets propagated.
                      categories:
                        - math
                      parameter_order:
                        - x
                        - p
                      parameters:
                        x:
                          description: A number to round.
                          schema:
                            type:
                              - number
                              - 'null'
                          required: true
                        p:
                          description: >-
                            A positive number specifies the number of digits
                            after the decimal point to round to. A negative
                            number means rounding to a power of ten, so for
                            example *-2* rounds to the nearest hundred. Defaults
                            to *0*.
                          schema:
                            type: integer
                          default: 0
                      returns:
                        description: The rounded number.
                        schema:
                          type:
                            - number
                            - 'null'
                      examples:
                        - arguments:
                            x: 0
                          returns: 0
                        - arguments:
                            x: 3.56
                            p: 1
                          returns: 3.6
                        - arguments:
                            x: -0.4444444
                            p: 2
                          returns: -0.44
                        - arguments:
                            x: -2.5
                          returns: -2
                        - arguments:
                            x: -3.5
                          returns: -4
                        - arguments:
                            x: 1234.5
                            p: -2
                          returns: 1200
                      links:
                        - rel: about
                          href: 'http://mathworld.wolfram.com/AbsoluteValue.html'
                          title: Absolute value explained by Wolfram MathWorld
                        - rel: about
                          href: 'https://ieeexplore.ieee.org/document/4610935'
                          title: IEEE Standard 754-2008 for Floating-Point Arithmetic
                    - id: e
                      summary: Euler's number (e)
                      description: >-
                        The real number *e* is a mathematical constant that is
                        the base of the natural logarithm such that *ln(e) = 1*.
                        The numerical value is approximately *2.71828*.
                      categories:
                        - math > constants
                      parameters: {}
                      returns:
                        description: >-
                          Returns the numerical value of Euler's number.
                          Precision may be limited by the processing software.
                        schema:
                          type: number
                      examples:
                        - title: Test for ln(e) = 1
                          process_graph:
                            e1:
                              process_id: e
                              arguments: {}
                            ln1:
                              process_id: ln
                              arguments:
                                data:
                                  from_node: e1
                              result: true
                          returns: 1
                      links:
                        - rel: about
                          href: 'http://mathworld.wolfram.com/e.html'
                          title: Mathematical constant e on Wolfram MathWorld
                  links:
                    - rel: alternate
                      href: 'https://provider.com/processes'
                      type: text/html
                      title: HTML version of the processes
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /udf_runtimes:
    get:
      summary: Supported UDF runtimes
      description: >-
        Returns a list of supported runtimes for user-defined functions (UDFs),
        which includes either the programming languages including version
        numbers and available libraries including version numbers or docker
        containers.
      tags:
        - Capabilities
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: Description of UDF runtime support
          content:
            application/json:
              schema:
                title: UDF Runtimes Response
                type: object
                description: >-
                  List of available runtime environments. Each runtime
                  environment has a unique name, which is used as the property
                  key. The name is used in processes to select the runtime
                  environment for UDFs, so the names should be stable and
                  meaningful (see example). Runtime environments can be either a
                  programming language environment or Docker-based.
                additionalProperties:
                  x-additionalPropertiesName: UDF Runtime Name
                  oneOf:
                    - title: Programming language
                      type: object
                      required:
                        - default
                        - versions
                      properties:
                        description:
                          $ref: '#/components/schemas/description'
                        default:
                          description: The default version.
                          type: string
                        versions:
                          title: Programming language versions
                          description: Versions available for the programming language.
                          type: object
                          additionalProperties:
                            x-additionalPropertiesName: Programming Language Name
                            title: Programming language version
                            type: object
                            required:
                              - libraries
                            properties:
                              libraries:
                                description: >-
                                  List of installed
                                  libraries/modules/packages/extensions for the
                                  programming language. The names of the
                                  extension are used as the property keys.
                                additionalProperties:
                                  x-additionalPropertiesName: Library Name
                                  title: Programming language library
                                  type: object
                                  required:
                                    - version
                                  properties:
                                    version:
                                      type: string
                                      description: Version number of the library.
                                    deprecated:
                                      type: boolean
                                      default: false
                                      description: |-
                                        Specifies that the library is deprecated with the potential to be
                                        removed in any of the next versions. It should be transitioned out
                                        of usage as soon as possible and users should refrain from using it
                                        in new implementations.

                                        A link with relation type `latest-version` SHOULD be added to the
                                        `links` and MUST refer to the library or library version that can be
                                        used instead.
                                    links:
                                      type: array
                                      description: |-
                                        Additional links related to this library,
                                        e.g. external documentation for this library.

                                        It is highly RECOMMENDED to provide links with
                                        the following `rel` (relation) types:

                                        1. `about`: A resource that further explains the library,
                                        e.g. a user guide or the documentation.

                                        2. `latest-version`: If a library has been marked as deprecated,
                                        a link should point to either a new library replacing the deprecated
                                        library or a latest version of the library available at the back-end.

                                        For additional relation types see also the lists of
                                        [common relation types in openEO](#section/Web-Linking).
                                      items:
                                        $ref: '#/components/schemas/link'
                        links:
                          $ref: '#/components/schemas/udf_links'
                    - title: Docker container
                      type: object
                      required:
                        - docker
                        - default
                        - tags
                      properties:
                        description:
                          $ref: '#/components/schemas/description'
                        docker:
                          type: string
                          description: >-
                            Identifier of a Docker image on Docker Hub or a
                            private repository, i.e. the docker image name.
                        default:
                          description: The default tag.
                          type: string
                        tags:
                          type: array
                          description: The docker tags that are supported.
                          minItems: 1
                          items:
                            type: string
                        links:
                          $ref: '#/components/schemas/udf_links'
                example:
                  PHP7:
                    description: Just an example how to reference a docker image.
                    docker: openeo/udf-php7
                    default: latest
                    tags:
                      - latest
                      - 7.3.1
                      - '7.3'
                      - '7.2'
                    links:
                      - href: 'https://hub.docker.com/openeo/udf-php7/'
                        rel: about
                  R:
                    description: R programming language with Rcpp and rmarkdown.
                    default: 3.5.2
                    versions:
                      3.1.0:
                        libraries:
                          Rcpp:
                            version: 1.0.10
                            links:
                              - href: >-
                                  https://cran.r-project.org/web/packages/Rcpp/index.html
                                rel: about
                          rmarkdown:
                            version: 1.7.0
                            links:
                              - href: >-
                                  https://cran.r-project.org/web/packages/rmarkdown/index.html
                                rel: about
                      3.5.2:
                        libraries:
                          Rcpp:
                            version: 1.2.0
                            links:
                              - href: >-
                                  https://cran.r-project.org/web/packages/Rcpp/index.html
                                rel: about
                          rmarkdown:
                            version: 1.7.0
                            links:
                              - href: >-
                                  https://cran.r-project.org/web/packages/rmarkdown/index.html
                                rel: about
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /credentials/oidc:
    get:
      summary: OpenID Connect authentication
      description: >-
        This endpoint lists the supported [OpenID
        Connect](http://openid.net/connect/) providers (OP). OpenID Providers
        MUST support [OpenID Connect
        Discovery](http://openid.net/specs/openid-connect-discovery-1_0.html).


        For each OpenID provider, a name and the issuer location MUST be listed.
        A description and related links can OPTIONALLY be added. The [issuer
        location](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig)
        (also referred to as 'authority' in client libraries) is the URL of the
        OpenID provider, which conforms to a set of rules:

        1. After appending `/.well-known/openid-configuration` to the URL, a
        [HTTP/1.1 GET
        request](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationRequest)
        to the concatenated URL must return a [OpenID Discovery Configuration
        Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
        The response provides all information required to authenticate using
        OpenID Connect.

        2. The URL MUST NOT contain a terminating forward slash `/`.


        It is highly RECOMMENDED to implement OpenID Connect for public services
        in favor of Basic authentication.


        openEO clients MUST use the **access token** as part of the Bearer token
        for authorization in subsequent API calls (see also the information
        about Bearer tokens in this document). Clients MUST NOT use the id token
        or the authorization code. The access token provided by this the OpenID
        Provider does not always provide information about the issuer (i.e. the
        OpenID provider) and therefore a prefix MUST be added to the Bearer
        Token sent in subsequent API calls to protected endpoints. The Bearer
        Token sent to protected endpoints MUST consist of the authentification
        method (here `oidc`), the provider ID and the access token itself. All
        separated by a forward slash `/`. The provider ID corresponds to the
        value specified for `id` for each provider in the response body of this
        endpoint.  The header in subsequent API calls for a provider with `id`
        `ms` would look as follows: `Authorization: Bearer oidc/ms/TOKEN`
        (replace `TOKEN` with the actual access token received from the OpenID
        Provider).


        Back-ends MAY request user information ([including Claims](https://openid.net/specs/openid-connect-core-1_0.html#Claims))
        from the [OpenID Connect Userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)
        using the access token (without the prefix described above). Therefore,
        both openEO client and openEO back-end are relying parties (clients) to
        the OpenID Provider.
      tags:
        - Account Management
      security:
        - {}
      responses:
        '200':
          description: Lists the the OpenID Providers.
          content:
            application/json:
              schema:
                title: OpenID Provider List
                type: object
                required:
                  - providers
                properties:
                  providers:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      required:
                        - id
                        - issuer
                        - scopes
                        - title
                      properties:
                        id:
                          type: string
                          description: >-
                            A **unique** identifier for the OpenID Provider to
                            be as prefix for the Bearer token.
                          pattern: '[\d\w]{1,20}'
                        issuer:
                          type: string
                          format: url
                          description: >-
                            The [issuer
                            location](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig),
                            i.e. the URL of the OpenID provider (see endpoint
                            description).
                          example: 'https://accounts.google.com'
                        scopes:
                          type: array
                          description: >-
                            A list of OpenID Scopes that the client MUST use.


                            If empty, the default scopes of OpenID Connect MUST
                            be used.
                          items:
                            type: string
                        title:
                          type: string
                          description: >-
                            The name that is publicly shown in clients for this
                            OpenID provider.
                        description:
                          $ref: '#/components/schemas/description'
                        links:
                          type: array
                          description: |-
                            Links related to this provider, for example a
                            help page or a page to register a new user account.

                            For relation types see the lists of
                            [common relation types in openEO](#section/Web-Linking).
                          items:
                            $ref: '#/components/schemas/link'
                example:
                  providers:
                    - id: google
                      issuer: 'https://accounts.google.com'
                      title: Google
                      description: Login with your Google Account.
                      scopes:
                        - oidc
                        - profile
                        - email
                        - earthengine
                    - id: ms
                      issuer: 'https://login.microsoftonline.com/example-tenant/v2.0'
                      title: Microsoft
                      description: Login with your Microsoft or Skype Account.
                      scopes: []
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /credentials/basic:
    get:
      summary: HTTP Basic authentication
      description: >-
        This request checks the credentials provided through [HTTP Basic
        Authentication according to RFC
        7617](https://tools.ietf.org/html/rfc7617) and returns an access token
        for valid credentials.


        The credentials (username and password) must be sent in the HTTP header
        `Authorization` with type `Basic` and the Base64 encoded string
        consiting of username and password separated by a double colon `:`. The
        header would look as follows for username `user` and password `pw`:
        `Authorization: Basic dXNlcjpwdw==`.


        The access token has to be used in the Bearer token for authorization in
        subsequent API calls (see also the information about Bearer tokens in
        this document). The access token returned by this request MUST NOT be
        provided with `basic//` prefix, but the Bearer Token sent in subsequent
        API calls to protected endpoints MUST be prefixed with `basic//`. The
        header in subsequent API calls would look as follows: `Authorization:
        Bearer basic//TOKEN` (replace `TOKEN` with the actual access token).


        It is RECOMMENDED to implement this authentication method for non-public
        services only.
      tags:
        - Account Management
      security:
        - Basic: []
      responses:
        '200':
          description: Credentials are correct and authentication succeeded.
          content:
            application/json:
              schema:
                title: HTTP Basic Authentication Response
                type: object
                required:
                  - access_token
                properties:
                  access_token:
                    description: >-
                      The access token (without `basic//` prefix) to be used in
                      the Bearer token for authorization in subsequent API
                      calls.
                    type: string
                    example: b34ba2bdf9ac9ee1
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /validation:
    post:
      summary: Validate a process graph
      description: >-
        Validates a process graph without executing it. A process graph is
        considered valid unless the `errors` array in the response contains at
        least one error.


        Checks whether the process graph is schematically correct and the
        processes are supported by the back-end. It MUST also checks the
        parameter values against the schema, but checking whether the values are
        adequate in the context of data is OPTIONAL. For example, a non-existing
        band name may may get rejected only by a few back-ends.


        Errors that usually occur during processing MAY NOT get reported, e.g.
        if a referenced file is accessible at the time of execution.


        Back-ends can either report all errors at once or stop the validation
        once they found the first error. 


        Please note that a validation always returns with HTTP status code 200.
        Error codes in the 4xx and 5xx ranges MUST be returned only when the
        general validation request is invalid (e.g. server is busy or no process
        graph parameter specified), but never if the process graph validation
        found an error (e.g. an unsupported process).
      tags:
        - Process Graphs
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: >-
            Returns the validation result as a list of errors. An empty list
            indicates a successful validation.
          content:
            application/json:
              schema:
                title: Validation Response
                type: object
                required:
                  - errors
                properties:
                  errors:
                    description: A list of validation errors.
                    type: array
                    items:
                      $ref: '#/components/schemas/error'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Validation Request
              type: object
              required:
                - process_graph
              properties:
                process_graph:
                  $ref: '#/components/schemas/process_graph'
        description: Specifies the process graph to be validated.
  /result:
    post:
      summary: Process and download data synchronously
      description: >-
        Process graphs will be executed directly and the result will be
        downloaded in the format specified in the process graph. This endpoint
        can be used to generate small previews or test process graphs before
        starting a batch job.
        
        Timeouts on either client- or server-side are to be expected for complex
        computations. Back-ends MAY send the openEO error `ProcessGraphComplexity`
        immediately if the computation is expected to time out. Otherwise requests
        MAY time-out after a certain amount of time by sending openEO error `RequestTimeout`.
        
        A header named `OpenEO-Costs` MAY be sent with all responses, which MUST
        include the costs for processing and downloading the data. Additionally, 
        a link to a log file MAY be sent in the header.
      tags:
        - Process Graphs
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '200':
          description: Result data in the requested output format
          headers:
            Content-Type:
              description: >-
                The appropriate media (MIME) type for the requested output
                format MUST be sent.
              schema:
                type: string
            OpenEO-Costs:
              description: MAY include the costs for processing and downloading the data.
              schema:
                $ref: '#/components/schemas/money'
            Link:
              description: >-
                The header MAY indicate a link to a log file generated by the request. If provided, the link MUST be serialized according to [RFC 8288](https://tools.ietf.org/html/rfc8288#section-3) and MUST use the relation type `monitor`. The link MUST follow the specifications for the links `GET /jobs/{job_id}/logs` and `GET /services/{service_id}/logs`, except that is MUST NOT accept any parameters (limit/offset). Therefore, the link MUST be accessible with HTTP GET, MUST be secured using a Bearer token and MUST follow the corresponding request body schema.
              schema:
                type: string
                pattern: ^<[^>]+>;\s?rel="monitor"
                example: <https://openeo.org/api/logs/258489231>; rel="monitor"
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        description: 'Specifies the job details, e.g. the process graph and billing details.'
        required: true
        content:
          application/json:
            schema:
              title: Synchronous Result Request
              type: object
              required:
                - process_graph
              properties:
                process_graph:
                  $ref: '#/components/schemas/process_graph'
                budget:
                  $ref: '#/components/schemas/budget'
                plan:
                  $ref: '#/components/schemas/billing_plan_defaultable'
  /process_graphs:
    get:
      summary: List all stored process graphs
      description: >-
        This service lists all process graphs of the authenticated user that are
        stored at the back-end.
      tags:
        - Process Graphs
      security:
        - Bearer: []
      responses:
        '200':
          description: JSON array with stored process graph meta data
          content:
            application/json:
              schema:
                title: Stored Process Graph List Response
                type: object
                required:
                  - process_graphs
                  - links
                properties:
                  process_graphs:
                    description: Array of stored process graphs
                    type: array
                    items:
                      title: Stored Process Graph Metadata
                      description: >-
                        Defines limited metadata of stored process graphs that
                        have been submitted by users.
                      type: object
                      required:
                        - id
                      properties:
                        id:
                          $ref: '#/components/schemas/process_graph_id'
                        title:
                          $ref: '#/components/schemas/eo_title'
                        description:
                          $ref: '#/components/schemas/eo_description'
                  links:
                    $ref: '#/components/schemas/links_pagination'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    post:
      summary: Store a process graph
      description: >-
        Creates a unique resource for a provided process graph that can be
        reused in other process graphs.
      tags:
        - Process Graphs
      security:
        - Bearer: []
      responses:
        '201':
          $ref: '#/components/responses/created'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Store Process Graph Request
              type: object
              required:
                - process_graph
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
        description: Specifies the process graph with its meta data.
  '/process_graphs/{process_graph_id}':
    parameters:
      - $ref: '#/components/parameters/process_graph_id'
    get:
      summary: Full metadata for a stored process graph
      description: Returns all information about a process graph.
      tags:
        - Process Graphs
      security:
        - Bearer: []
      responses:
        '200':
          description: JSON object with process graph
          content:
            application/json:
              schema:
                title: Stored Process Graph Response
                description: >-
                  Defines full metadata of stored process graphs that have been
                  submitted by users.
                type: object
                required:
                  - id
                  - process_graph
                properties:
                  id:
                    $ref: '#/components/schemas/process_graph_id'
                  title:
                    $ref: '#/components/schemas/eo_title'
                  description:
                    $ref: '#/components/schemas/eo_description'
                  process_graph:
                    $ref: '#/components/schemas/process_graph'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    patch:
      summary: Modify a stored process graph
      description: >-
        Replaces a process graph or modifies the metadata, but maintains the
        identifier.
      tags:
        - Process Graphs
      security:
        - Bearer: []
      responses:
        '204':
          description: The process graph data has been updated successfully.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Update Stored Process Graph Request
              type: object
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
        description: Specifies the process graph details to update.
    delete:
      summary: Delete a stored process graph
      tags:
        - Process Graphs
      security:
        - Bearer: []
      responses:
        '204':
          description: The process graph has been successfully deleted
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /service_types:
    get:
      summary: Supported secondary web service protocols
      description: >-
        The request will ask the back-end for supported secondary web service
        protocols, e.g. WMS or WCS. The response is an object of all available
        secondary web service protocols, including their parameters, attributes
        and process graph variables.

        Parameters configure the service and therefore need to be defined upon
        creation of a service. Attributes are read-only characteristics of the
        service and may be computed based on the parameters, e.g. available
        layers for a WMS based on the bands in the underlying GeoTiff.

        A list of process graph variables is also available. This variables can
        be used by users in a process graph that is used to compute web service
        results. The objects can directly be used inside the process graph. Such
        variables are usually things that have to be injected into the process
        graph from the context of the web service. For example, a map service
        such as a WMS would need to inject the spatial extent into the process
        graph so that the back-end can compute the corresponding tile correctly.

        To improve interoperability between back-ends common names for the
        services SHOULD be used, e.g. the abbreviations used in the official
        [OGC Schema Repository](http://schemas.opengis.net/) for the respective
        services.

        Service names are allowed to be *case insensitive* throughout the API.
      tags:
        - Capabilities
        - Secondary Services
      security:
        - {}
        - Bearer: []
      responses:
        '200':
          description: >-
            An object with a map containing all service names as keys and an
            object that defines supported parameters and attributes.
          content:
            application/json:
              schema:
                title: Service Types Response
                type: object
                description: List of supported secondary web services.
                additionalProperties:
                  x-additionalPropertiesName: Service Name
                  title: Service Type
                  type: object
                  properties:
                    parameters:
                      title: Service Type Parameters
                      description: List of supported parameters for configuration.
                      type: object
                      additionalProperties:
                        $ref: '#/components/schemas/argument'
                    attributes:
                      title: Service Type Attributes
                      description: List of supported attributes.
                      type: object
                      additionalProperties:
                        $ref: '#/components/schemas/argument'
                    variables:
                      title: Service Type Variables
                      description: List of supported process graph variables.
                      type: array
                      items:
                        $ref: '#/components/schemas/variable'
                    links:
                      description: |-
                        Links related to this service type, e.g. more
                        information about the parameters, attributes or options
                        to access the created services

                        For relation types see the lists of
                        [common relation types in openEO](#section/Web-Linking).
                      type: array
                      items:
                        $ref: '#/components/schemas/link'
                example:
                  WMS:
                    parameters:
                      version:
                        type: string
                        description: The WMS version to use.
                        default: 1.3.0
                        enum:
                          - 1.1.1
                          - 1.3.0
                    attributes:
                      layers:
                        type: array
                        description: Array of layer names.
                        example:
                          - roads
                          - countries
                          - water_bodies
                    variables:
                      - variable_id: layer
                        type: string
                        description: The layer name.
                        default: roads
                      - variable_id: spatial_extent_west
                        type: number
                      - variable_id: spatial_extent_east
                        type: number
                      - variable_id: spatial_extent_north
                        type: number
                      - variable_id: spatial_extent_south
                        type: number
                    links:
                      - href: 'https://www.opengeospatial.org/standards/wms'
                        rel: about
                        title: OGC Web Map Service Standard
                  WFS:
                    parameters:
                      version:
                        type: string
                        description: The WFS version to use.
                        default: 2.0.0
                        enum:
                          - 1.0.0
                          - 1.1.0
                          - 2.0.0
                      maxFeatures:
                        type: integer
                        description: Maximum number of features (since WFS 2.0.0 only).
                        default: 10000
                        minimum: 1
                        maximum: 100000
                    attributes:
                      typeNames:
                        type: array
                        description: Array of available feature type names.
                        example:
                          - 'topp:states'
                          - 'topp:cities'
                    links:
                      - href: 'https://www.opengeospatial.org/standards/wfs'
                        rel: about
                        title: OGC Web Feature Service Standard
        4XX:
          $ref: '#/components/responses/client_error'
        5XX:
          $ref: '#/components/responses/server_error'
  /services:
    get:
      summary: List all web services
      description: >-
        Requests to this endpoint will list all running secondary web services
        submitted by a user with given id.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      responses:
        '200':
          description: Array of service descriptions
          content:
            application/json:
              schema:
                title: Secondary Web Services List Response
                type: object
                required:
                  - services
                  - links
                properties:
                  services:
                    type: array
                    items:
                      title: Secondary Web Service Metadata
                      description: Defines metadata of services.
                      type: object
                      required:
                        - id
                        - enabled
                        - type
                        - url
                      properties:
                        id:
                          $ref: '#/components/schemas/service_id'
                        title:
                          $ref: '#/components/schemas/eo_title'
                        description:
                          $ref: '#/components/schemas/eo_description'
                        url:
                          $ref: '#/components/schemas/service_url'
                        type:
                          $ref: '#/components/schemas/service_type'
                        enabled:
                          $ref: '#/components/schemas/service_enabled'
                        submitted:
                          $ref: '#/components/schemas/submitted'
                        plan:
                          $ref: '#/components/schemas/billing_plan'
                        costs:
                          $ref: '#/components/schemas/money'
                        budget:
                          $ref: '#/components/schemas/budget'
                  links:
                    $ref: '#/components/schemas/links_pagination'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    post:
      summary: Publish a new service
      description: >-
        Calling this endpoint will create a secondary web service such as WMTS,
        TMS or WCS. The underlying data is processes on-demand, but a process
        graph may simply access results from a batch job. Computations should be
        performed in the sense that it is only evaluated for the requested
        spatial / temporal extent and resolution.


        **Note:** Costs incurred by shared secondary web services are usually
        paid by the owner, but this depends on the service type and whether it
        supports charging fees or not.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      responses:
        '201':
          $ref: '#/components/responses/created'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Store Secondary Web Service Request
              type: object
              required:
                - type
                - process_graph
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
                type:
                  $ref: '#/components/schemas/service_type'
                enabled:
                  $ref: '#/components/schemas/service_enabled'
                parameters:
                  $ref: '#/components/schemas/service_parameters'
                plan:
                  $ref: '#/components/schemas/billing_plan_defaultable'
                budget:
                  $ref: '#/components/schemas/budget'
        description: The base data for the secondary web service to create
  '/services/{service_id}':
    parameters:
      - $ref: '#/components/parameters/service_id'
    patch:
      summary: Modify a service
      description: >-
        Calling this endpoint will change the specified secondary web service,
        but maintain its identifier. Changes can be grouped in a single request.
        To change the service type create a new service.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      responses:
        '204':
          description: Changes to the service were applied successfully.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Update Secondary Web Service Request
              type: object
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
                enabled:
                  $ref: '#/components/schemas/service_enabled'
                parameters:
                  $ref: '#/components/schemas/service_parameters'
                plan:
                  $ref: '#/components/schemas/billing_plan_defaultable'
                budget:
                  $ref: '#/components/schemas/budget'
        description: The data to change for the specified secondary web service.
    get:
      summary: Full metadata for a service
      description: >-
        Requests to this endpoint will return JSON description of the secondary
        web service.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      responses:
        '200':
          description: Details of the created service
          content:
            application/json:
              schema:
                title: Secondary Web Service Response
                description: Metadata of a service.
                type: object
                required:
                  - id
                  - process_graph
                  - enabled
                  - type
                  - url
                  - parameters
                  - attributes
                properties:
                  id:
                    $ref: '#/components/schemas/service_id'
                  title:
                    $ref: '#/components/schemas/eo_title'
                  description:
                    $ref: '#/components/schemas/eo_description'
                  process_graph:
                    $ref: '#/components/schemas/process_graph'
                  url:
                    $ref: '#/components/schemas/service_url'
                  type:
                    $ref: '#/components/schemas/service_type'
                  enabled:
                    $ref: '#/components/schemas/service_enabled'
                  parameters:
                    $ref: '#/components/schemas/service_parameters'
                  attributes:
                    title: Secondary Web Service Attributes
                    type: object
                    description: >-
                      Additional attributes of the secondary web service, e.g.
                      available layers for a WMS based on the bands in the
                      underlying GeoTiff. See `GET /service_types` for supported
                      attributes.
                    example:
                      layers:
                        - ndvi
                        - evi
                  submitted:
                    $ref: '#/components/schemas/submitted'
                  plan:
                    $ref: '#/components/schemas/billing_plan'
                  costs:
                    $ref: '#/components/schemas/money'
                  budget:
                    $ref: '#/components/schemas/budget'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    delete:
      summary: Delete a service
      description: >-
        Calling this endpoint will stop a given secondary web service to access
        result data.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      responses:
        '204':
          description: The service has been successfully deleted.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/services/{service_id}/logs':
    get:
      summary: Logs for a secondary service
      description: Logs for the secondary service.
      tags:
        - Secondary Services
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/service_id'
        - $ref: '#/components/parameters/log_offset'
        - $ref: '#/components/parameters/log_limit'
      responses:
        '200':
          $ref: '#/components/responses/logs'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /jobs:
    get:
      summary: List all batch jobs
      description: >-
        Requests to this endpoint will list all batch jobs submitted by a user
        with given id.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '200':
          description: Array of job descriptions
          content:
            application/json:
              schema:
                title: Batch Job List Response
                type: object
                required:
                  - jobs
                  - links
                properties:
                  jobs:
                    description: Array of job descriptions
                    type: array
                    items:
                      title: Batch Job Metadata
                      description: >-
                        Defines a metadata subset of batch jobs that have been
                        submitted by users. To get the full metadata for a job
                        including a process graph call `GET /jobs/{job_id}`
                      type: object
                      required:
                        - id
                        - status
                        - submitted
                      properties:
                        id:
                          $ref: '#/components/schemas/job_id'
                        title:
                          $ref: '#/components/schemas/eo_title'
                        description:
                          $ref: '#/components/schemas/eo_description'
                        status:
                          $ref: '#/components/schemas/status'
                        submitted:
                          $ref: '#/components/schemas/submitted'
                        updated:
                          $ref: '#/components/schemas/updated'
                        plan:
                          $ref: '#/components/schemas/billing_plan'
                        costs:
                          $ref: '#/components/schemas/money'
                        budget:
                          $ref: '#/components/schemas/budget'
                  links:
                    $ref: '#/components/schemas/links_pagination'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    post:
      summary: Create a new batch job
      description: >-
        Creates a new batch processing task (job) from one or more (chained)
        processes at the back-end.


        Processing the data doesn't start yet. The job status gets initialized
        as `submitted` by default.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '201':
          $ref: '#/components/responses/created'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Store Batch Job Request
              type: object
              required:
                - process_graph
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
                plan:
                  $ref: '#/components/schemas/billing_plan_defaultable'
                budget:
                  $ref: '#/components/schemas/budget'
        description: 'Specifies the job details, e.g. the process graph and billing details.'
  '/jobs/{job_id}':
    parameters:
      - $ref: '#/components/parameters/job_id'
    patch:
      summary: Modify a batch job
      description: >-
        Modifies an existing job at the back-end but maintains the identifier.
        Changes can be grouped in a single request.


        Jobs can only be modified when the job is not queued or running.
        Otherwise requests to this endpoint MUST be rejected with openEO error
        `JobLocked`.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '204':
          description: Changes to the job applied successfully.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/json:
            schema:
              title: Update Batch Job Request
              type: object
              properties:
                title:
                  $ref: '#/components/schemas/eo_title'
                description:
                  $ref: '#/components/schemas/eo_description'
                process_graph:
                  $ref: '#/components/schemas/process_graph'
                plan:
                  $ref: '#/components/schemas/billing_plan_defaultable'
                budget:
                  $ref: '#/components/schemas/budget'
        description: Specifies the job details to update.
    get:
      summary: Full metadata for a batch job
      description: Returns detailed information about a submitted batch job.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '200':
          description: Full job information.
          content:
            application/json:
              schema:
                title: Batch Job Response
                description: >-
                  Defines full metadata of batch jobs that have been submitted
                  by users.
                type: object
                required:
                  - id
                  - process_graph
                  - status
                  - submitted
                properties:
                  id:
                    $ref: '#/components/schemas/job_id'
                  title:
                    $ref: '#/components/schemas/eo_title'
                  description:
                    $ref: '#/components/schemas/eo_description'
                  process_graph:
                    $ref: '#/components/schemas/process_graph'
                  status:
                    $ref: '#/components/schemas/status'
                  progress:
                    type: number
                    description: >-
                      Indicates the process of a running batch job in percent.

                      Can also be set for a job which errored out or was
                      canceled by the user. In this case, the value indicates
                      the progress at which the job stopped. Property may not be
                      available for the status codes `submitted` and `queued`.

                      Submitted and queued jobs only allow the value `0`,
                      finished jobs only allow the value `100`.
                    minimum: 0
                    maximum: 100
                    example: 75.5
                  submitted:
                    $ref: '#/components/schemas/submitted'
                  updated:
                    $ref: '#/components/schemas/updated'
                  plan:
                    $ref: '#/components/schemas/billing_plan'
                  costs:
                    $ref: '#/components/schemas/money'
                  budget:
                    $ref: '#/components/schemas/budget'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    delete:
      summary: Delete a batch job
      description: >-
        Deletes all data related to this job. Computations are stopped and
        computed results are deleted. This job won't generate additional costs
        for processing.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '204':
          description: The job has been successfully deleted.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/jobs/{job_id}/estimate':
    get:
      summary: Get an estimate for a batch job
      description: >-
        Clients can ask for an estimate for a batch job. Back-ends can decide to
        either calculate the duration, the costs, the size or a combination of
        them. This MUST be the upper limit of the incurring costs. Clients can
        be charged less than specified, but never more. Back-end providers MAY
        specify an expiry time for the estimate. Starting to process data
        afterwards MAY be charged at a higher cost. Costs MAY NOT include
        downloading costs. This can be indicated with the `downloads_included`
        flag.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/job_id'
      responses:
        '200':
          description: >-
            The estimated costs with regard to money, processing time and
            storage capacity. At least one of `costs`, `duration` or `size` MUST
            be provided.
          content:
            application/json:
              schema:
                title: Batch Job Estimate Response
                type: object
                properties:
                  costs:
                    $ref: '#/components/schemas/money'
                  duration:
                    type: string
                    description: >-
                      Estimated duration for the operation. Duration MUST be
                      specified as a ISO 8601 duration.
                    example: P1Y2M10DT2H30M
                  size:
                    type: integer
                    description: >-
                      Estimated required storage capacity, i.e. the size of the
                      generated files. Size MUST be specified in bytes.
                    example: 157286400
                  downloads_included:
                    type: integer
                    nullable: true
                    description: >-
                      Specifies how many full downloads of the processed data
                      are included in the estimate. Set to `null` for unlimited
                      downloads, which is also the default value.
                    example: 5
                    default: null
                  expires:
                    type: string
                    format: date-time
                    description: >-
                      Time until which the estimate is valid, formatted as a
                      [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time.
                    example: '2020-11-01T00:00:00Z'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/jobs/{job_id}/logs':
    get:
      summary: Logs for a batch job
      description: Logs for the batch job.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/job_id'
        - $ref: '#/components/parameters/log_offset'
        - $ref: '#/components/parameters/log_limit'
      responses:
        '200':
          $ref: '#/components/responses/logs'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/jobs/{job_id}/results':
    parameters:
      - $ref: '#/components/parameters/job_id'
    get:
      summary: Download results for a completed batch job
      description: >-
        After finishing processing, this request will provide signed URLs to the
        processed files of the batch job with some additional metadata. The
        response is a [STAC Item (version
        0.8.1)](https://github.com/radiantearth/stac-spec/tree/master/item-spec)
        if it has spatial and temporal references included.


        URL signing is a way to protect files from unauthorized access with a
        key in the URL instead of HTTP header based authorization. The URL
        signing key is similar to a password and its inclusion in the URL allows
        to download files using simple GET requests supported by a wide range of
        programs, e.g. web browsers or download managers. Back-ends are
        responsible to generate the URL signing keys and to manage their
        appropriate expiration. The back-end MAY indicate an expiration time by
        setting the `expires` property.


        If processing has not finished yet requests to this endpoint MUST be
        rejected with openEO error `JobNotFinished`.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Valid download links have been returned. The download links doesn't
            necessarily need to be located under the API base url.
          headers:
            OpenEO-Costs:
              description: >-
                Specifies the costs for fully downloading the data **once**,
                i.e. this header MAY change in subsequent calls. It MUST be set
                to `0` if the requester is the owner of the job and still has
                free downloads included in his processing charges estimated by
                `GET /jobs/{job_id}/estimate`.
                 If a requester other than the owner is requesting the data of a shared job this header indicates the costs for the requester.
              schema:
                $ref: '#/components/schemas/money'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/job_result'
            application/geo+json:
              schema:
                $ref: '#/components/schemas/job_result'
        '424':
          description: >-
            The request can't be fulfilled as the batch job failed. This request
            will deliver the last error message that was produced by the batch job.


            This HTTP code MUST be sent only when the job `status` is `error`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/log_entry'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    post:
      summary: Start processing a batch job
      description: >-
        Adds a batch job to the processing queue to compute the results.


        The result will be stored in the format specified in the process graph.
        To specify the format use a process such as `save_result`.


        This endpoint has no effect if the job status is already `queued` or
        `running`. In particular, it doesn't restart a running job. Processing
        MUST be canceled before to restart it.


        The job status is set to `queued`, if processing doesn't start
        instantly.

        * Once the processing starts the status is set to `running`.
         
        * Once the data is available to download the status is set to
        `finished`.
            
        * Whenever an error occurs during processing, the status must be set to
        `error`.
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '202':
          description: The creation of the resource has been queued successfully.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    delete:
      summary: Cancel processing a batch job
      description: >-
        Cancels all related computations for this job at the back-end. It will
        stop generating additional costs for processing.


        A subset of processed results may be available for downloading depending
        on the state of the job as it was canceled. Finished results MUST NOT be
        deleted until the job is deleted or job processing is started again.


        This endpoint only has an effect if the job status is `queued` or
        `running`.


        The job status is set to `canceled` if the status was `running`
        beforehand and partial or preliminary results are available to be
        downloaded. Otherwise the status is set to `submitted`. 
      tags:
        - Batch Jobs
      security:
        - Bearer: []
      responses:
        '204':
          description: Processing the job has been successfully canceled.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/files':
    get:
      summary: List all files in the workspace
      description: >-
        This service lists all user-uploaded files that are stored at the
        back-end.
      tags:
        - File Storage
      security:
        - Bearer: []
      responses:
        '200':
          description: >-
            Flattened file tree with path relative to the user's root directory
            and some basic properties such as the file size and the timestamp of
            the last modification. All properties except the name are optional.
            Folders MUST NOT be listed separately so each element in the list
            MUST be a downloadable file.
          content:
            application/json:
              schema:
                title: Workspace Files List Response
                type: object
                required:
                  - files
                  - links
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/file'
                  links:
                    $ref: '#/components/schemas/links_pagination'
                example:
                  files:
                    - path: test.txt
                      size: 182
                      modified: '2015-10-20T17:22:10Z'
                    - path: test.tif
                      size: 183142
                      modified: '2017-01-01T09:36:18Z'
                    - path: >-
                        Sentinel2/S2A_MSIL1C_20170819T082011_N0205_R121_T34KGD_20170819T084427.zip
                      size: 4183353142
                      modified: '2018-01-03T10:55:29Z'
                  links: []
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  '/files/{path}':
    parameters:
      - $ref: '#/components/parameters/file_path'
    get:
      summary: Download a file from the workspace
      description: >-
        This service downloads a user files identified by its path relative to
        the user's root directory.

        If a folder is specified as path a `FileOperationUnsupported` error MUST
        be sent as response.
      tags:
        - File Storage
      security:
        - Bearer: []
      responses:
        '200':
          description: A file from the workspace.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
    put:
      summary: Upload a file to the workspace
      description: >-
        This service uploads a new or updates an existing file at a given path.


        Folders are created once required by a file upload. Empty folders can't
        be created.
      tags:
        - File Storage
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/file_path'
      responses:
        '200':
          description: The file has been uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
    delete:
      summary: Delete a file from the workspace
      description: >-
        This service deletes an existing user-uploaded file specified by its
        path. Resulting empty folders MUST be deleted automatically.


        Back-ends MAY support deleting folders including its files and
        subfolders.  If not supported by the back-end a
        `FileOperationUnsupported` error MUST be sent as response.
      tags:
        - File Storage
      security:
        - Bearer: []
      parameters:
        - $ref: '#/components/parameters/file_path'
      responses:
        '204':
          description: The file has been successfully deleted at the back-end.
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
  /me:
    get:
      summary: Information about the authenticated user
      description: >-
        This endpoint always returns the user id and MAY return the disk quota
        available to the user. It MAY also return links related to user management
        and the user profile, e.g. where payments are handled or the user profile
        could be edited.

        For back-ends that involve accounting, this service MAY also return the
        currently available money or credits in the currency the back-end is
        working with.

        This endpoint MAY be extended to fulfil the specification of the [OpenID
        Connect UserInfo
        Endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
      tags:
        - Account Management
      security:
        - Bearer: []
      responses:
        '200':
          description: Information about the logged in user.
          content:
            application/json:
              schema:
                title: User Data Response
                description: >-
                  Holds user information. If no budget or storage limit applies
                  to the user account the corresponding properties MUST be set
                  to null.
                type: object
                required:
                  - user_id
                properties:
                  user_id:
                    $ref: '#/components/schemas/user_id'
                  storage:
                    title: User Storage
                    description: Information about the storage space available to the user.
                    type: object
                    nullable: true
                    required:
                      - free
                      - quota
                    properties:
                      free:
                        type: integer
                        description: >-
                          Free storage space in bytes, which is still available
                          to the user. Effectively, this is the disk quota minus
                          the used space by the user, e.g. user-uploaded files
                          and job results.
                        example: 536870912
                      quota:
                        type: integer
                        description: >-
                          Maximum storage space (disk quota) in bytes available
                          to the user.
                        example: 1073741824
                  budget:
                    $ref: '#/components/schemas/budget'
                  links:
                    description: |-
                      Links related to the user profile, e.g. where payments
                      are handled or the user profile could be edited.

                      It is RECOMMENDED to provide links with the following `rel` (relation) types:

                      1. `payment`: A page where users can recharge their user account with money or credits.

                      2. `edit-form`: Points to a page where the user can edit his user profile.

                      For additional relation types see also the lists of
                      [common relation types in openEO](#section/Web-Linking).
                    type: array
                    items:
                      $ref: '#/components/schemas/link'
                    example:
                      - href: 'http://www.openeo.org/john_doe/payment/'
                        rel: payment
                      - href: 'http://www.openeo.org/john_doe/edit/'
                        rel: edit-form
                      - href: 'http://www.openeo.org/john_doe/'
                        rel: alternate
                        type: text/html
                        title: User profile
                      - href: 'http://www.openeo.org/john_doe.vcf'
                        rel: alternate
                        type: text/vcard
                        title: vCard of John Doe
        4XX:
          $ref: '#/components/responses/client_error_auth'
        5XX:
          $ref: '#/components/responses/server_error'
components:
  schemas:
    job_result:
      title: Batch Job Results Response as STAC Item
      type: object
      required:
        - stac_version
        - id
        - type
        - bbox
        - geometry
        - properties
        - assets
        - links
      properties:
        stac_version:
          $ref: '#/components/schemas/stac_version'
        id:
          $ref: '#/components/schemas/job_id'
        type:
          type: string
          enum:
            - Feature
        bbox:
          $ref: '#/components/schemas/bbox'
        geometry:
          description: >-
            Defines the full footprint of the asset represented by this item as
            GeoJSON Geometry.
          allOf:
            - $ref: '#/components/schemas/GeoJsonGeometry'
          example:
            type: Polygon
            coordinates:
              - - - -180
                  - -90
                - - 180
                  - -90
                - - 180
                  - 90
                - - -180
                  - 90
                - - -180
                  - -90
        properties:
          type: object
          title: Item Properties
          description: >-
            MAY contain any additional properties, e.g. other STAC Item
            properties, properties from STAC extensions or custom properties.
          required:
            - datetime
          properties:
            datetime:
              title: Date and Time
              description: >-
                The searchable date/time of the data, in UTC. Formatted as a
                [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time. For
                timeseries: The center date and time for the data.


                It is NOT RECOMMENDED to set this field to `null` as this field
                is required for the answer to be a valid STAC Item.
              type: string
              format: date-time
              nullable: true
            'dtr:start_datetime':
              type: string
              format: date-time
              description: >-
                For timeseries: The first or start date and time for the data,
                in UTC. Formatted as a [RFC
                3339](https://www.ietf.org/rfc/rfc3339) date-time.
            'dtr:end_datetime':
              type: string
              format: date-time
              description: >-
                For timeseries: The last or end date and time for the data, in
                UTC. Formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339)
                date-time.
            title:
              $ref: '#/components/schemas/eo_title'
            description:
              $ref: '#/components/schemas/eo_description'
            updated:
              $ref: '#/components/schemas/updated'
            expires:
              type: string
              format: date-time
              description: >-
                Time until which the assets are accessible, in UTC. Formatted as
                a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time.
              example: '2020-11-01T00:00:00Z'
        assets:
          type: object
          title: Item Assets
          description: >-
            Dictionary of asset objects that can be downloaded, each with a
            unique key. The keys MAY be used by clients as file names.
          additionalProperties:
            type: object
            required:
              - href
            properties:
              href:
                title: Signed URL to the downloadable asset.
                type: string
              title:
                title: The displayed title for clients and users.
                type: string
              type:
                title: Media type of the asset.
                type: string
          example:
            1.tif:
              href: 'https://openeo.org/api/download/583fba8b2ce583fba8b2ce/1.tif'
              type: image/tiff; application=geotiff
            2.tif:
              href: 'https://openeo.org/api/download/583fba8b2ce583fba8b2ce/2.tif'
              type: image/tiff; application=geotiff
        links:
          type: array
          description: >-
            Links related to this batch job result, e.g. a link to an 
            invoice, additional log files or external documentation.

            The links MUST NOT contain links to the processed and
            downloadable data. Instead specify these in the `assets` property.
            Clients MUST NOT download the data referenced in the links by
            default.

            For relation types see the lists of
            [common relation types in openEO](#section/Web-Linking).
          items:
            $ref: '#/components/schemas/link'
    file_format:
      x-additionalPropertiesName: File Format Name
      title: File Format
      type: object
      description: Describes a specific file format.
      required:
        - gis_data_types
      properties:
        title:
          type: string
          description: >-
            A human-readable short title for the format to be displayed to users
            **in addition** to the format names specified in the keys. This
            property is only for better user experience so that users can
            understand format names better, e.g. GeoTiff for `GTiff` or
            GeoPackage for `GPKG`. The title MUST NOT be used in communication
            (e.g. in process graphs), although clients MAY translate the titles
            into the corresponding format names.
        gis_data_types:
          type: array
          description: Specifies the supported GIS spatial data type for this format.
          items:
            type: string
            enum:
              - raster
              - vector
              - table
              - other
        parameters:
          title: File Format Parameters
          description: Specifies the supported parameters for this file format.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/argument'
        links:
          type: array
          description: |-
            Links related to this file format, e.g. external documentation.

            For relation types see the lists of
            [common relation types in openEO](#section/Web-Linking).
          items:
            $ref: '#/components/schemas/link'
    production:
      type: boolean
      description: >-
        Specifies whether the implementation is ready to be used in production
        use (`true`) or not (`false`).

        Clients SHOULD only connect to non-production implementations if the
        user explicitly confirmed to use a non-production implementation.
      default: true
    links_pagination:
      description: |-
        Links related to this list of resources, for example links for pagination
        or alternative formats such as a human-readable HTML version.

        Pagination is currently OPTIONAL and back-ends and clients may not support it.
        Therefore it MUST be implemented in a way that clients not supporting
        pagination get all resources regardless. The links array MUST NOT be paginated.
        If pagination is implemented, the following `rel` (relation) types apply:

        1. `next` (REQUIRED): A link to the next page.

        2. `prev` (OPTIONAL): A link to the previous page.

        3. `first` (OPTIONAL): A link to the first page.

        4. `last` (OPTIONAL): A link to the last page.

        For additional relation types see also the lists of
        [common relation types in openEO](#section/Web-Linking).
      type: array
      items:
        $ref: '#/components/schemas/link'
    udf_links:
      type: array
      description: |-
        Links related to this runtime, e.g. external documentation.

        It is highly RECOMMENDED to provide at least links with
        the following `rel` (relation) types:

        1. `about`: A resource that further explains the runtime,
        e.g. a user guide or the documentation.

        For additional relation types see also the lists of
        [common relation types in openEO](#section/Web-Linking).
      items:
        $ref: '#/components/schemas/link'
    link:
      title: Link
      description: >-
        A link to another resource on the web. Bases on [RFC
        5899](https://tools.ietf.org/html/rfc5988).
      type: object
      required:
        - href
      properties:
        rel:
          type: string
          description: >-
            Relationship between the current document and the linked document.
            SHOULD be a [registered link relation
            type](https://www.iana.org/assignments/link-relations/link-relations.xml)
            whenever feasible.
          example: related
        href:
          type: string
          description: The value MUST be a dereferenceable URL.
          format: url
          example: 'http://www.openeo.org'
        type:
          type: string
          description: >-
            The value MUST be a string that hints at the format used to
            represent data at the provided URI, preferably a media (MIME) type.
          example: text/html
        title:
          type: string
          description: Used as a human-readable label for a link.
          example: openEO
    money:
      description: >-
        An amount of money or credits. The value MUST be specified in the
        currency the back-end is working with. The currency can be retrieved by
        calling `GET /`. If no currency is set, this field MUST be `null`.
      type: number
      example: 12.98
      nullable: true
      default: null
    budget:
      type: number
      nullable: true
      default: null
      description: >-
        Maximum amount of costs the request is allowed to produce. The value
        MUST be specified in the currency the back-end is working with. The
        currency can be retrieved by calling `GET /`. If no currency is set,
        this field MUST NOT be a number.



        If possible, back-ends SHOULD reject jobs with openEO error
        `PaymentRequired` if the budget is too low to process the request
        completely. Otherwise, when reaching the budget jobs MAY try to return
        partial results if possible. Otherwise the request and results are
        discarded. Users SHOULD be warned by clients that reaching the budget
        MAY discard the results and that setting this value should be
        well-wrought.



        Setting the budget to `null` means there is no specified budget.
      example: 100
    billing_plan_defaultable:
      type: string
      description: >-
        The billing plan to process and charge the job with.


        The plans and the default plan can be retrieved by calling `GET /`.


        Billing plans MUST be accepted *case insensitive*. Billing plans not on
        the list of available plans MUST be rejected with openEO error
        `BillingPlanInvalid`.


        If no billing plan is specified by the client, the server MUST default
        to the default billing plan in `GET /`. If the default billing plan of
        the provider changes, the job or service MUST not be affected by the
        change, i.e. the default plan which is valid during job or service
        creation must be permanently assigned to the job or service until the
        client requests to change it.
      example: free
      nullable: true
    billing_plan:
      type: string
      description: >-
        The billing plan to process and charge the job with. The plans can be
        retrieved by calling `GET /`. Billing plans MUST be accepted *case
        insensitive*.
      example: free
    collection:
      title: STAC Collection
      type: object
      required:
        - stac_version
        - id
        - description
        - license
        - extent
        - links
      properties:
        stac_version:
          $ref: '#/components/schemas/stac_version'
        stac_extensions:
          $ref: '#/components/schemas/stac_extensions'
        id:
          $ref: '#/components/schemas/collection_id'
        title:
          type: string
          description: A short descriptive one-line title for the collection.
        description:
          type: string
          description: >-
            Detailed multi-line description to fully explain the collection.


            [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for
            rich text representation.
        keywords:
          type: array
          description: List of keywords describing the collection.
          items:
            type: string
        version:
          type: string
          description: Version of the collection.
        deprecated:
          type: boolean
          default: false
          description: >-
            Specifies that the collection is deprecated with the potential to be
            removed in any of the next versions. It should be transitioned out
            of usage as soon as possible and users should refrain from using it
            in new implementations.


            A link with relation type `latest-version` SHOULD be added to the
            `links` and MUST refer to the collection that can be used instead.
        license:
          $ref: '#/components/schemas/stac_license'
        providers:
          $ref: '#/components/schemas/stac_providers'
        extent:
          type: object
          title: STAC Collection Extent
          description: >-
            The extent of the features in the collection. Additional members MAY
            be added to represent other extents, for example, thermal or
            pressure ranges.
          required:
            - spatial
            - temporal
          properties:
            spatial:
              description: >-
                The *potential* spatial extent of the features in the
                collection.
              type: object
              properties:
                bbox:
                  description: >-
                    One or more bounding boxes that describe the spatial extent
                    of the dataset.

                    If multiple areas are provided, the union of the bounding
                    boxes describes the spatial extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Each bounding box is provided as four or six numbers,
                      depending on whether the coordinate reference system
                      includes a vertical axis (height or depth):

                      * West (lower left corner, coordinate axis 1)

                      * South (lower left corner, coordinate axis 2)

                      * Base (optional, minimum value, coordinate axis 3)

                      * East (upper right corner, coordinate axis 1)

                      * North (upper right corner, coordinate axis 2)

                      * Height (optional, maximum value, coordinate axis 3)


                      The coordinate reference system of the values is WGS 84
                      longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).

                      For WGS 84 longitude/latitude the values are in most cases
                      the sequence of minimum longitude, minimum latitude, maximum
                      longitude and maximum latitude.

                      However, in cases where the box spans the antimeridian the
                      first value (west-most box edge) is larger than the third value
                      (east-most box edge).

                      If the vertical axis is included, the third and the sixth
                      number are the bottom and the top of the 3-dimensional bounding box.

                      If a feature has multiple spatial geometry properties, it
                      is the decision of the server whether only a single spatial geometry
                      property is used to determine the extent or all relevant geometries.
                    type: array
                    minItems: 4
                    maxItems: 6
                    items:
                      type: number
                    example:
                      - -180
                      - -90
                      - 180
                      - 90
            temporal:
              description: >-
                The *potential* temporal extent of the features in the
                collection.
              type: object
              properties:
                interval:
                  description: >-
                    One or more time intervals that describe the temporal extent
                    of the dataset.

                    The value `null` is supported and indicates an open time
                    intervall.

                    In the Core only a single time interval is supported.
                    Extensions may support

                    multiple intervals. If multiple intervals are provided, the
                    union of the

                    intervals describes the temporal extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Begin and end times of the time interval. The coordinate
                      reference system is the Gregorian calendar.
                    type: array
                    minItems: 2
                    maxItems: 2
                    items:
                      type: string
                      format: date-time
                      nullable: true
                    example:
                      - '2011-11-11T12:22:11Z'
                      - null
        links:
          description: >-
            Links related to this collection.
            Could reference to licensing information, other meta data formats with
            additional information or a preview image.

            It is RECOMMENDED to provide links with the following
            `rel` (relation) types:

            1. `root` and `parent`: URL to the data discovery endpoint at `/collections`.

            2. `license`: A link to the license(s) should be specified if the `license`
            field is set to `proprietary` or `various`.

            3. `derived_from`: Allows linking to the data this collection was derived from.

            4. `cite-as`: For all DOI names specified in the collection, the respective DOI
            links should be added.

            5. `latest-version`: If a collection has been marked as deprecated, a link should
            point to the latest version of the collection.

            6. `alternate`: An alternative representation of the collection.
            For example, this could be the collection available through another
            catalog service such as OGC CSW, a human-readable HTML version or a
            metadata document following another standard such as ISO 19115 or DCAT.

            For additional relation types see also the lists of
            [common relation types in openEO](#section/Web-Linking)
            and the STAC specification for Collections.
          type: array
          items:
            $ref: '#/components/schemas/link'
    stac_version:
      type: string
      description: The STAC version implemented.
      enum:
        - 0.8.1
    stac_extensions:
      type: array
      description: >-
        A list of implemented STAC extensions. The list contains URLs to the
        JSON Schema files it can be validated against. For official extensions,
        a "shortcut" can be used. This means you can specify the folder name of
        the extension in the STAC repository, for example `sar` for the SAR
        extension. If the versions of the extension and the collection diverge,
        you can specify the URL of the JSON schema file.
      uniqueItems: true
      items:
        anyOf:
          - title: Reference to a JSON Schema
            type: string
            format: uri
            example: 'https://www.example.com/stac/custom-extemsion/v1.0/schema.json'
          - title: Reference to a core extension
            type: string
            example: eo
    stac_license:
      type: string
      description: >-
        License(s) of the data as a SPDX [License
        identifier](https://spdx.org/licenses/) or
        [expression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60).
        Alternatively, use `proprietary` if the license is not on the SPDX
        license list or `various` if multiple licenses apply. In these two cases
        links to the license texts SHOULD be added, see the `license` link
        relation type.


        Non-SPDX licenses SHOULD add a link to the license text with the
        `license` relation in the links section. The license text MUST NOT be
        provided as a value of this field. If there is no public license URL
        available, it is RECOMMENDED to host the license text and link to it.
      example: Apache-2.0
    stac_providers:
      type: array
      description: >-
        A list of providers, which may include all organizations capturing or
        processing the data or the hosting provider. Providers should be listed
        in chronological order with the most recent provider being the last
        element of the list.
      items:
        type: object
        title: Provider
        required:
          - name
        properties:
          name:
            description: The name of the organization or the individual.
            type: string
          description:
            description: >-
              Multi-line description to add further provider information such as
              processing details for processors and producers, hosting details
              for hosts or basic contact information.


              CommonMark 0.29 syntax MAY be used for rich text representation.
            type: string
          roles:
            description: >-
              Roles of the provider.


              The provider's role(s) can be one or more of the following
              elements:

              * licensor: The organization that is licensing the dataset under
              the license specified in the collection's license field.

              * producer: The producer of the data is the provider that
              initially captured and processed the source data, e.g. ESA for
              Sentinel-2 data.

              * processor: A processor is any provider who processed data to a
              derived product.

              * host: The host is the actual provider offering the data on their
              storage. There should be no more than one host, specified as last
              element of the list.
            type: array
            items:
              type: string
              enum:
                - producer
                - licensor
                - processor
                - host
          url:
            description: >-
              Homepage on which the provider describes the dataset and publishes
              contact information.
            type: string
            format: url
    collection_id:
      type: string
      description: >-
        A unique identifier for the collection, which MUST match the specified
        pattern.
      pattern: '^[A-Za-z0-9_\-\.~\/]+$'
      example: Sentinel-2A
    collection_dimension_type_spatial:
      description: 'Type of the dimension, always `spatial`.'
      type: string
      enum:
        - spatial
    collection_dimension_extent_open:
      description: >-
        If the dimension consists of
        [ordinal](https://en.wikipedia.org/wiki/Level_of_measurement#Ordinal_scale)
        values, the extent (lower and upper bounds) of the values as
        two-dimensional array. Use `null` for open intervals.
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        nullable: true
    collection_dimension_values:
      description: >-
        A set of all potential values, especially useful for
        [nominal](https://en.wikipedia.org/wiki/Level_of_measurement#Nominal_level)
        values.


        **Important:** The order of the values MUST be exactly how the dimension
        values are also ordered in the data (cube). If the values specify band
        names, the values MUST be in the same order as they are in the
        corresponding band fields (i.e. `eo:bands` or `sar:bands`).
      type: array
      minItems: 1
      items:
        oneOf:
          - type: number
          - type: string
    collection_dimension_step:
      description: >-
        If the dimension consists of
        [interval](https://en.wikipedia.org/wiki/Level_of_measurement#Interval_scale)
        values, the space between the values. Use `null` for irregularly spaced
        steps.
      type: number
      nullable: true
    collection_dimension_unit:
      description: >-
        The unit of measurement for the data, preferably the symbols from
        [SI](https://physics.nist.gov/cuu/Units/units.html) or
        [UDUNITS](https://ncics.org/portfolio/other-resources/udunits2/).
      type: string
    collection_dimension_reference_system_spatial:
      description: >-
        The spatial reference system for the data, specified as [EPSG code](http://www.epsg-registry.org/), [WKT2 (ISO 19162) string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html), [PROJJSON](https://proj.org/projjson.html) or [PROJ definition (deprecated)](https://proj.org/usage/quickstart.html). Defaults to EPSG code 4326.
      oneOf:
        - type: object
          description: PROJJSON
        - type: string
          description: WKT2 or PROJ definition
        - type: number
          default: 4326
          description: EPSG code
    variable:
      title: Process Graph Variable
      description: >-
        Process graphs can hold a variable, which can be filled in later. For
        shared process graphs this can be useful to make them more portable, e.g
        in case a back-end specific product name would be stored with the
        process graph.


        If a process graph with a variable is about to be executed and neither a
        value nor a default value is specified, the back-end MUST reject the
        request with an error of type `VariableValueMissing`. The values are
        usually defined when loading the process graph with the
        `run_process_graph` process.


        Invalid variable types MUST be rejected with error
        `VariableTypeInvalid`. If the default value is not compatible to the
        specified type an `VariableDefaultValueTypeInvalid` error MUST be sent.
        Invalid variable ids MUST be rejected with error `VariableIdInvalid`. 
      type: object
      required:
        - variable_id
      properties:
        variable_id:
          type: string
          description: >-
            The name of the variable. Can be any valid JSON key, but it is
            RECOMMENDED to use snake case and limit the characters to `a-z`,
            `0-9` and `_`.
        type:
          $ref: '#/components/schemas/data_type'
        description:
          description: Optional description about the variable.
          type: string
          nullable: true
        default:
          description: >-
            Whenever no value for the variable is defined, the default value is
            used.
          nullable: true
    data_type:
      type: string
      description: >-
        The type is the expected data type for the content of the variable or
        parameter. `null` is allowed for all types. If no type is specified, any
        type is allowed to be passed.
      enum:
        - string
        - number
        - integer
        - boolean
        - array
        - object
    process_arguments:
      title: Process Arguments
      type: object
      additionalProperties:
        $ref: '#/components/schemas/process_argument_value'
    process_argument_value:
      title: Process Argument Value
      description: Arguments for a process. See the API documentation for more information.
      nullable: true
      anyOf:
        - type: object
          nullable: true
          title: Object
        - type: string
          title: String
        - type: number
          title: Number (incl. integers)
        - type: boolean
          title: Boolean
        - type: array
          title: Array
          items:
            $ref: '#/components/schemas/process_argument_value'
        - $ref: '#/components/schemas/variable'
        - type: object
          title: Result
          description: Data that is expected to be passed from another process.
          required:
            - from_node
          properties:
            from_node:
              description: The ID of the node that data is expected to come from.
              type: string
          additionalProperties: false
        - type: object
          title: Parameter in a Parametrized Process Graph
          description: >-
            Data that is expected to be passed to a parametrized process graph from the process
            that is executing the parametrized process graph.
          required:
            - from_argument
          properties:
            from_argument:
              description: >-
                The name of the parameter that is made available to a parametrized process graph
                by a calling process.
              type: string
          additionalProperties: false
        - type: object
          title: Parametrized Process Graph
          description: Process graph with parameters, which is executed from withing another process.
          required:
            - callback
          properties:
            callback:
              $ref: '#/components/schemas/process_graph'
          additionalProperties: false
    process_graph:
      title: Process Graph
      description: >-
        A process graph defines a graph-like structure as a connected set of
        executable processes. Each key is a unique identifier (node ID) that is
        used to refer to the process in the graph.
      type: object
      additionalProperties:
        x-additionalPropertiesName: Node ID
        title: Process Node
        type: object
        required:
          - process_id
          - arguments
        properties:
          process_id:
            $ref: '#/components/schemas/process_id'
          result:
            type: boolean
            description: >-
              Used to specify which node is the last in the chain and returns
              the result to return to the requesting context. This flag MUST
              only be set once in each list of process nodes.
            default: false
          description:
            description: Optional description about the process and its arguments.
            type: string
            nullable: true
          arguments:
            $ref: '#/components/schemas/process_arguments'
      example:
        dc:
          process_id: load_collection
          arguments:
            id: Sentinel-2
            spatial_extent:
              west: 16.1
              east: 16.6
              north: 48.6
              south: 47.2
            temporal_extent:
              - '2018-01-01'
              - '2018-02-01'
        bands:
          process_id: filter_bands
          description: >-
            Filter and order the bands. The order is important for the following
            reduce operation.
          arguments:
            data:
              from_node: dc
            bands:
              - B08
              - B04
              - B02
        evi:
          process_id: reduce
          description: >-
            Compute the EVI. Formula: 2.5 * (NIR - RED) / (1 + NIR + 6*RED +
            -7.5*BLUE)
          arguments:
            data:
              from_node: bands
            dimension: spectral
            reducer:
              callback:
                nir:
                  process_id: array_element
                  arguments:
                    data:
                      from_argument: data
                    index: 0
                red:
                  process_id: array_element
                  arguments:
                    data:
                      from_argument: data
                    index: 1
                blue:
                  process_id: array_element
                  arguments:
                    data:
                      from_argument: data
                    index: 2
                sub:
                  process_id: subtract
                  arguments:
                    data:
                      - from_node: nir
                      - from_node: red
                p1:
                  process_id: product
                  arguments:
                    data:
                      - 6
                      - from_node: red
                p2:
                  process_id: product
                  arguments:
                    data:
                      - -7.5
                      - from_node: blue
                sum:
                  process_id: sum
                  arguments:
                    data:
                      - 1
                      - from_node: nir
                      - from_node: p1
                      - from_node: p2
                div:
                  process_id: divide
                  arguments:
                    data:
                      - from_node: sub
                      - from_node: sum
                p3:
                  process_id: product
                  arguments:
                    data:
                      - 2.5
                      - from_node: div
                  result: true
        mintime:
          process_id: reduce
          description: Compute a minimum time composite by reducing the temporal dimension
          arguments:
            data:
              from_node: evi
            dimension: temporal
            reducer:
              callback:
                min:
                  process_id: min
                  arguments:
                    data:
                      from_argument: data
                  result: true
        save:
          process_id: save_result
          arguments:
            data:
              from_node: mintime
            format: GTiff
          result: true
    process:
      title: Process
      type: object
      required:
        - id
        - description
        - parameters
        - returns
      properties:
        id:
          $ref: '#/components/schemas/process_id'
        summary:
          type: string
          description: A short summary of what the process does.
        description:
          $ref: '#/components/schemas/process_description'
        categories:
          type: array
          description: A list of categories.
          items:
            type: string
            description: Name of the category.
        parameter_order:
          type: array
          description: >-
            Describes the order or the parameter for any environments that don't
            support named parameters. This property MUST be present for all
            processes with two or more parameters.
          items:
            type: string
            description: Each item MUST correspond to a key in the `parameters` object.
            pattern: '^[A-Za-z0-9_]+$'
        parameters:
          type: object
          title: Process Parameters
          description: >-
            A list of parameters that are applicable for this process. The keys
            of the object are the names of the parameters. They keys MUST match
            the following pattern: `^[A-Za-z0-9_]+$`
          additionalProperties:
            x-additionalPropertiesName: Parameter Name
            title: Process Parameter
            type: object
            required:
              - description
              - schema
            properties:
              description:
                $ref: '#/components/schemas/process_description'
              required:
                type: boolean
                description: Determines whether this parameter is mandatory.
                default: false
              deprecated:
                $ref: '#/components/schemas/process_deprecated'
              experimental:
                $ref: '#/components/schemas/process_experimental'
              default:
                description: >-
                  The default value for this parameter.
                  Required parameters SHOULD NOT specify a default value. Optional parameters SHOULD always specify a default value.
                nullable: true
              schema:
                $ref: '#/components/schemas/process_schema'
        returns:
          type: object
          title: Process Return Value
          description: The data that is returned from this process.
          required:
            - description
            - schema
          properties:
            description:
              $ref: '#/components/schemas/process_description'
            schema:
              $ref: '#/components/schemas/process_schema'
        deprecated:
          $ref: '#/components/schemas/process_deprecated'
        experimental:
          $ref: '#/components/schemas/process_experimental'
        exceptions:
          type: object
          title: Process Exceptions
          description: >-
            Declares any exceptions (errors) that might occur during execution
            of this process. MUST be used only for exceptions that stop the
            execution of a process and are therefore not to be used for
            warnings, or notices or debugging messages.


            The keys define the error code and MUST match the following pattern:
            `^[A-Za-z0-9_]+$`


            This schema follows the schema of the general openEO error list (see
            errors.json).
          additionalProperties:
            x-additionalPropertiesName: Error Code
            title: Process Exception
            type: object
            required:
              - message
            properties:
              description:
                type: string
                description: >-
                  Detailed description to fully explain the error to client
                  users and back-end developers. This should not be shown in the
                  clients directly, but may be linked to in the errors `url`
                  property.


                  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used
                  for rich text representation.
              message:
                type: string
                description: >-
                  Explains the reason the server is rejecting the request. This
                  message is intended to be displayed to the client user. For
                  "4xx" error codes the message should explain shortly how the
                  client needs to modify the request.


                  The message MAY contain variables, which are enclosed by curly
                  brackets. Example: `{variable_name}`
                example: >-
                  The value specified for the process argument '{argument}' in
                  process '{process}' is invalid: {reason}
              http:
                type: integer
                description: >-
                  HTTP Status Code, following the [error handling conventions in
                  openEO](https://open-eo.github.io/openeo-api/draft/errors/).
                  Defaults to `400`.
                default: 400
        examples:
          type: array
          description: >-
            Examples, may be used for tests. Either `process_graph` or
            `arguments` must be set, never both.
          items:
            title: Process Example
            type: object
            oneOf:
              - title: Process Example with Process Graph
                required:
                  - process_graph
              - title: Process Example with Arguments
                required:
                  - arguments
            properties:
              title:
                type: string
                description: A title for the example.
              description:
                $ref: '#/components/schemas/process_description'
              process_graph:
                $ref: '#/components/schemas/process_graph'
              arguments:
                $ref: '#/components/schemas/process_arguments'
              returns:
                nullable: true
        links:
          type: array
          description: >-
            Links related to this process, e.g. additional external documentation.

            It is RECOMMENDED to provide links with the following `rel` (relation) types:

            1. `latest-version`: If a process has been marked as deprecated, a link should
            point to the preferred version of the process.

            2. `cite-as`: For all DOIs associated with the process, the respective DOI
            links should be added.

            For additional relation types see also the lists of
            [common relation types in openEO](#section/Web-Linking).
          items:
            $ref: '#/components/schemas/link'
    process_id:
      type: string
      description: Unique identifier of the process.
      pattern: '^[A-Za-z0-9_]+$'
      example: ndvi
    process_experimental:
      type: boolean
      description: >-
        Declares the process or parameter to be experimental, which means that
        it is likely to change or may produce unpredictable behaviour. Users
        should refrain from using it in production,  but still feel encouraged
        to try it out and give feedback.
      default: false
    process_deprecated:
      type: boolean
      description: >-
        Specifies that the process or parameter is deprecated with the potential
        to be removed in any of the next versions. It should be transitioned out
        of usage as soon as possible and users should refrain from using it in
        new implementations.


        For processes a link with relation type `latest-version` SHOULD be
        added to the `links` and MUST refer to the process that can be used
        instead.
      default: false
    process_graph_id:
      type: string
      description: >-
        Unique identifier of a process graph that is generated by the back-end
        during process graph submission. MUST match the specified pattern.
      pattern: '^[A-Za-z0-9_\-\.~]+$'
      example: cc2bab1e3b3a52aa
    job_id:
      type: string
      description: >-
        Unique identifier of a job that is generated by the back-end during job
        submission. MUST match the specified pattern.
      pattern: '^[A-Za-z0-9_\-\.~]+$'
      example: a3cca2b2aa1e3b5b
    submitted:
      type: string
      format: date-time
      description: >-
        Date and time of creation, formatted as a [RFC
        3339](https://www.ietf.org/rfc/rfc3339) date-time.
      example: '2017-01-01T09:32:12Z'
    updated:
      type: string
      format: date-time
      description: >-
        Date and time of last status change, formatted as a [RFC
        3339](https://www.ietf.org/rfc/rfc3339) date-time.
      example: '2017-01-01T09:36:18Z'
    user_id:
      type: string
      description: >-
        Unique identifier of the user. MUST match the specified pattern. SHOULD
        be a human-friendly user name instead of a randomly generated
        identifier.
      pattern: '^[A-Za-z0-9_\-\.~]+$'
      example: john_doe
    status:
      type: string
      enum:
        - submitted
        - queued
        - running
        - canceled
        - finished
        - error
      description: >-
        The current status of a batch job.


        The following status changes can occur:

        * `POST /jobs`: The status is initialized as `submitted`.

        * `POST /jobs/{job_id}/results`: The status is set to `queued`, if
        processing doesn't start instantly.
            * Once the processing starts the status is set to `running`.
            * Once the data is available to download the status is set to `finished`.
            * Whenever an error occurs during processing, the status must be set to `error`.
        * `DELETE /jobs/{job_id}/results`: The status is set to `canceled` if
        the status was `running` beforehand and partial or preliminary results
        are available to be downloaded. Otherwise the status is set to
        `submitted`. 
      example: running
      default: submitted
    description:
      description: >-
        Detailed description to fully explain the entity.


        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
        text representation.
      type: string
    eo_title:
      description: A short description to easily distinguish entities.
      type: string
      nullable: true
      example: NDVI based on Sentinel 2
    eo_description:
      description: >-
        Detailed description to fully explain the entity.


        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
        text representation.
      type: string
      nullable: true
      example: Deriving minimum NDVI measurements over pixel time series of Sentinel 2
    process_description:
      description: >-
        Detailed description to fully explain the entity.


        [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich
        text representation. In addition to the CommonMark syntax, clients can
        convert process IDs that are formatted as in the following example into
        links instead of code blocks: ``` ``process_id()`` ```
      type: string
    service_type:
      description: >-
        Definition of the service type to access result data. All available
        service types can be retrieved via `GET /service_types`. Service types
        MUST be accepted *case insensitive*.
      type: string
      example: wms
    service_parameters:
      type: object
      title: Service Parameters
      description: >-
        List of arguments, i.e. the parameter names supported by the secondary
        web service combined with actual values. See `GET /service_types` for
        supported parameters and valid arguments. For example, this could
        specify the required version of the service, visualization details or
        any other service dependant configuration.
      example:
        version: 1.3.0
    service_enabled:
      type: boolean
      description: >-
        Describes whether a secondary web service is responding to requests
        (true) or not (false). Defaults to true. Disabled services don't produce
        any costs.
      default: true
    service_url:
      type: string
      format: url
      description: >-
        URL at which the secondary web service is accessible. Doesn't
        necessarily need to be located within the API.
      example: 'https://openeo.org/wms/wms-a3cca9'
    service_id:
      type: string
      description: >-
        Unique identifier of a secondary web service that is generated by the
        back-end during creation. MUST match the specified pattern.
      pattern: '^[A-Za-z0-9_\-\.~]+$'
      example: wms-a3cca9
    argument:
      x-additionalPropertiesName: Parameter Name
      type: object
      title: Argument
      description: Describes a general argument for various entities.
      required:
        - description
      properties:
        type:
          $ref: '#/components/schemas/data_type'
        description:
          type: string
          description: A brief description of the argument.
        required:
          type: boolean
          description: Determines whether this argument is mandatory.
          default: false
        default:
          description: >-
            The default value represents what would be assumed by the consumer
            of the input as the value of the argument if none is provided. The
            value MUST conform to the defined type for the argument defined at
            the same level. For example, if type is string, then default can be
            "foo" but cannot be 1.
          nullable: true
        minimum:
          type: number
          description: Minimum value allowed for numeric arguments.
        maximum:
          type: number
          description: Maximum value allowed for numeric arguments.
        enum:
          type: array
          description: >-
            List of allowed values for this argument. To represent examples that
            cannot be naturally represented in JSON, a string value can be used
            to contain the example with escaping where necessary.
          items:
            description: A single value allowed for this argument.
        example:
          description: >-
            A free-form property to include an example for this argument. To
            represent examples that cannot be naturally represented in JSON, a
            string value can be used to contain the example with escaping where
            necessary.
      example:
        description: A percentage between 0 and 100.
        required: true
        minimum: 0
        maximum: 100
    error:
      title: General Error
      description: >-
        An error object declares additional information about a client-side or
        server-side error. The [openEO
        documentation](https://open-eo.github.io/openeo-api/draft/errors/index.html)
        provides additional information regarding error handling and a list of
        potential error codes.
      type: object
      required:
        - code
        - message
      properties:
        id:
          type: string
          description: >-
            A back-end may add a unique identifier to the error response to be able
            to log and track errors with further non-disclosable details. A client
            could communicate this id to a back-end provider to get further
            information.
          example: 550e8400-e29b-11d4-a716-446655440000
        code:
          $ref: '#/components/schemas/log_code'
        message:
          type: string
          description: >-
            A message explaining what the client may need to change or what
            difficulties the server is facing.
        links:
          $ref: '#/components/schemas/log_links'
    log_code:
      type: string
      description: >-
        The code is either one of the standardized error codes or a custom code,
        for example specified by a user in the `debug` process.
      example: SampleError
    log_links:
      description: |-
        Links related to this log entry / error, e.g. to a resource that
        provides further explanations.

        For relation types see the lists of
        [common relation types in openEO](#section/Web-Linking).
      type: array
      items:
        $ref: '#/components/schemas/link'
      example:
        - href: 'http://www.openeo.org/docs/errors/SampleError'
          rel: about
    process_schema:
      title: Supported Data Type(s)
      description: >-
        Either a single data type or a list of data types.
      oneOf:
        - $ref: '#/components/schemas/process_json_schema'
        - title: Multiple data types
          description: |-
            A list of data types this parameter or return value supports, specified as JSON Schemas.

            Note: To validate the list of JSON Schemas using a JSON Schema validator, wrap the list of schemas in an object with a property `anyOf`: `{"anyOf": ...}`
          type: array
          minItems: 1
          uniqueItems: true
          items:
            $ref: '#/components/schemas/process_json_schema'
    process_json_schema:
      type: object
      title: Single data type
      description: |-
        Specifies a data type supported by a parameter or return value.

        The data types are specified according to the [JSON Schema draft-07](http://json-schema.org/) specification.
        See the chapter [Schemas in Process Discovery](#section/Schemas) for more information.

        It is discouraged to specify JSON Schemas with `default`, `anyOf`, `oneOf`, `allOf` or `not` at the top-level of the schema.
        Instead specify each data type in a seperate array element.

        It is recommended to refrain from using the following more complex JSON Schema keywords:
        `if`, `then`, `else`, `readOnly`, `writeOnly`, `dependencies`, `minProperties`, `maxProperties`, `patternProperties`, `multipleOf`.

        Clients are not expected to support dereferencing `$refs`.

        Note: The specified schema is only a common subset of JSON Schema. Additional keywords MAY be used.
      properties:
        type:
          oneOf:
            - $ref: '#/components/schemas/json_schema_type'
            - type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/json_schema_type'
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/process_json_schema'
        pattern:
          type: "string"
          format: "regex"
        enum:
          type: array
          items: {}
        minimum:
          type: number
        maximum:
          type: number
        minItems:
          type: number
          minimum: 0
          default: 0
        maxItems:
          type: number
          minimum: 0
        items:
          anyOf:
            - type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/process_json_schema'
            - $ref: '#/components/schemas/process_json_schema'
      additionalProperties: true
    json_schema_type:
      type: string
      enum:
        - array
        - boolean
        - integer
        - 'null'
        - number
        - object
        - string
    file:
      title: Workspace File
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: >-
            Path of the file, relative to the user's root directory. MUST NOT
            start with a slash and MUST NOT be url-encoded.
          example: folder/file.txt
        size:
          type: integer
          description: File size in bytes.
          example: 1024
        modified:
          type: string
          format: date-time
          description: >-
            Date and time the file has lastly been modified, formatted as a [RFC
            3339](https://www.ietf.org/rfc/rfc3339) date-time.
          example: '2018-01-03T10:55:29Z'
    bbox:
      description: >-
        Potential *spatial extent* covered by the data. The bounding box is
        provided as four or six numbers, depending on whether the coordinate
        reference system includes a vertical axis (height or depth):


        - West (lower left corner, coordinate axis 1)

        - South (lower left corner, coordinate axis 2)

        - Base (optional, lower left corner, coordinate axis 3)

        - East (upper right corner, coordinate axis 1)

        - North (upper right corner, coordinate axis 2)

        - Height (optional, upper right corner, coordinate axis 3)


        The coordinate reference system of the values is WGS84
        longitude/latitude.
      type: array
      minItems: 4
      maxItems: 6
      items:
        type: number
      example:
        - -180
        - -90
        - 180
        - 90
    GeoJsonPoint3D:
      type: array
      description: Point in 3D space
      minItems: 2
      maxItems: 3
      items:
        type: number
    GeoJsonPoint:
      type: object
      title: GeoJSON Point
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonGeometry:
      title: GeoJSON Geometry
      oneOf:
        - $ref: '#/components/schemas/GeoJsonPoint'
        - $ref: '#/components/schemas/GeoJsonLineString'
        - $ref: '#/components/schemas/GeoJsonPolygon'
        - $ref: '#/components/schemas/GeoJsonMultiPoint'
        - $ref: '#/components/schemas/GeoJsonMultiLineString'
        - $ref: '#/components/schemas/GeoJsonMultiPolygon'
        - $ref: '#/components/schemas/GeoJsonGeometryCollection'
    GeoJsonLineString:
      type: object
      title: GeoJSON LineString
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonPolygon:
      type: object
      title: GeoJSON Polygon
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonMultiPoint:
      type: object
      title: GeoJSON MultiPoint
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonMultiLineString:
      type: object
      title: GeoJSON MultiLineString
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonMultiPolygon:
      type: object
      title: GeoJSON MultiPolygon
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/GeoJsonPoint3D'
    GeoJsonGeometryCollection:
      type: object
      title: GeoJSON GeometryCollection
      required:
        - type
        - geometries
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/GeoJsonGeometry'
    log_entry:
      title: Log Entry
      description: >-
        An log message that communicates information about the processed data.
      type: object
      required:
        - id
        - level
        - message
        - path
      properties:
        id:
          type: string
          description: >-
            An unique identifier for the log message, could simply be an incrementing number.
          example: "1"
        code:
          $ref: '#/components/schemas/log_code'
        level:
          description: |-
            The severity level of the log entry.

            The order of the levels is as follows (from high to low severity): `error`, `warning`, `info`, `debug`.
            
            The level `error` usually stops processing the data.
          type: string
          enum:
            - error
            - warning
            - info
            - debug
          example: error
        message:
          type: string
          description: A message explaining the log entry.
          example: >-
            Can't load the UDF file from the URL `http://example.com/invalid/file.txt`.
            Server responded with error 404.
        data:
          description: |-
            Data of any type. It is the back-ends task to decide how to best
            present passed data to a user.

            For example, a raster-cube passed to the `debug` should return the
            metadata similar to the collection metadata, including `cube:dimensions`.
          nullable: true
        path:
          description: >-
            Describes where the log entry has occured.
            
            
            The first element of the array is the process that has triggered the log entry, the second element is the parent of the process that has triggered the log entry, etc. This pattern is followed until the root of the process graph.
          type: array
          items:
            type: object
            required:
              - node_id
            properties:
              node_id:
                type: string
                example: runudf1
              process_id:
                type: string
                example: run_udf
              parameter:
                type: string
                nullable: true
                example: udf
        links:
          $ref: '#/components/schemas/log_links'
  responses:
    logs:
      description: Lists the requested log entries.
      content:
        application/json:
          schema:
            type: object
            required:
              - logs
              - links
            properties:
              logs:
                type: array
                items:
                  $ref: '#/components/schemas/log_entry'
              links:
                type: array
                description: |-
                  Links related to this log file, e.g. a link to the
                  customer support, external documentation or an
                  alternative version of the log file.

                  For relation types see the lists of
                  [common relation types in openEO](#section/Web-Linking).
                items:
                  $ref: '#/components/schemas/link'
    created:
      description: >-
        The resource has been created successfully and the location of the newly
        created resource is advertized by the back-end.


        Examples:

        * `POST /services` redirects to `GET /services/{service_id}`

        * `POST /jobs` redirects to `GET /jobs/{job_id}`
      headers:
        Location:
          required: true
          schema:
            description: URL to the newly created resource.
            format: url
            type: string
            example: 'https://openeo.org/api/v0.4/resource/123'
        OpenEO-Identifier:
          required: true
          schema:
            description: >-
              Unique Identifier (e.g. job id or service id) of the newly created
              resource.
            type: string
            example: '123'
    client_error:
      description: >-
        The request can't be fulfilled due to an error on client-side, i.e. the
        request is invalid. The client should not repeat the request without
        modifications. The response body SHOULD contain a JSON error object.
        MUST be any HTTP status code specified in [RFC
        7231](https://tools.ietf.org/html/rfc7231#section-6.6). This request
        usually does not respond with HTTP status codes 401 and 403 due to
        missing authorization. HTTP status code 404 should be used if the value
        of a path parameter is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    client_error_auth:
      description: >-
        The request can't be fulfilled due to an error on client-side, i.e. the
        request is invalid. The client should not repeat the request without
        modifications. The response body SHOULD contain a JSON error object.
        MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6).
        This request MUST respond with HTTP status codes 401 if authorization is required or
        403 if the authorization failed or access is forbidden in general to the
        authenticated user. HTTP status code 404 should be used if the value of
        a path parameter is invalid.
        See also the global [Error Handling](#section/Error-Handling) definitions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    server_error:
      description: >-
        The request can't be fulfilled due to an error at the back-end. The
        error is never the client’s fault and therefore it is reasonable for the
        client to retry the exact same request that triggered this response. The
        response body SHOULD contain a JSON error object. MUST be any HTTP
        status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6).
        See also the global [Error Handling](#section/Error-Handling) definitions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  parameters:
    log_limit:
      name: limit
      description: The maximum amount of log entries to include in the response. If not provided or empty, return all log entries.
      in: query
      allowEmptyValue: true
      example: 10
      schema:
        type: integer
        minimum: 1
    log_offset:
      name: offset
      description: The last identifier (property `id` of a log entry) the client has received. If provided, the back-ends only sends the entries that occured after the specified identifier. If not provided or empty, start with the first entry.
      in: query
      allowEmptyValue: true
      example: "log1234"
      schema:
        type: string
    process_graph_id:
      name: process_graph_id
      in: path
      description: Unique process graph identifier.
      required: true
      schema:
        $ref: '#/components/schemas/process_graph_id'
    service_id:
      name: service_id
      in: path
      description: Unique secondary web service identifier.
      required: true
      schema:
        $ref: '#/components/schemas/service_id'
    job_id:
      name: job_id
      in: path
      description: Unique job identifier.
      required: true
      schema:
        $ref: '#/components/schemas/job_id'
    file_path:
      name: path
      in: path
      description: "Path of the file, relative to the user's root directory.\r\n\r\n**Note:** Folder and file names in the path MUST be url-encoded. The path separator `/` and the file extension separator `.` MUST NOT be url-encoded. This may be shown incorrectly in rendered versions due to [OpenAPI 3 not supporting path parameters which contain slashes](https://github.com/OAI/OpenAPI-Specification/issues/892)."
      required: true
      schema:
        type: string
      examples:
        normal:
          description: >-
            A path without special chars. It describes a file `europe.geojson`
            in a folder called `borders`.
          value: borders/europe.geojson
        specialchars:
          description: >-
            A path with special chars. It describes a file `münster.shp` in
            folders called `europe` and `österreich`.
          value: europe/%C3%B6sterreich/m%C3%BCnster.shp
  requestBodies:
    process_graph:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/process_graph'
      description: Description of one or more (chained) processes.
      required: true
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: >-
        The Bearer Token MUST consist of the authentification method, a provider
        ID (if available) and the token itself. All separated by a forward slash
        `/`. Examples (replace `TOKEN` with the actual access token): (1) Basic
        authentication (no provider ID available): `basic//TOKEN` (2) OpenID
        Connect (provider ID is `ms`): `oidc/ms/TOKEN`. For OpenID Connect, the
        provider ID corresponds to the value specified for `id` for each
        provider in `GET /credentials/oidc`.
    Basic:
      type: http
      scheme: basic