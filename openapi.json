{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://localhost/api/{version}/",
      "description": "The URL of the API MAY freely be chosen by the back-end providers. The path, including API versioning, is a *recommendation* only. Nevertheless, all servers MUST support HTTPS as the authentication methods are not secure with HTTP only!",
      "variables": {
        "version": {
          "default": "v0.4",
          "description": "API versioning is RECOMMENDED. As the openEO API is following [SemVer](https://semver.org/) only the MAJOR part of the stable version numbers (i.e. versions >= 1.0.0) SHOULD be used for API versioning in the URL. The reason is that backward-incompatible changes are usually introduced by major changes. Therefore, the version number in the URL MUST not be used by the clients to detect the version number of the API. Use the version number returned from `GET /` instead."
        }
      }
    }
  ],
  "info": {
    "title": "openEO API",
    "version": "0.4.0",
    "description": "The openEO API specification for interoperable cloud-based processing of large Earth observation datasets.\n \n**Make sure to take account of several global API specifications**, which are not (fully) covered in this specification:\n * [Cross-Origin Resource Sharing (CORS) support](https://open-eo.github.io/openeo-api/v/0.4.0/cors/index.html) to allow browser-based access to the API.\n * [Error handling](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html)\n * Unless otherwise stated the API works *case sensitive*.",
    "contact": {
      "name": "openEO Consortium",
      "url": "http://www.openeo.org",
      "email": "openeo@list.tuwien.ac.at"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs": {
    "description": "openEO Documentation",
    "url": "https://open-eo.github.io/openeo-api/v/0.4.0/"
  },
  "tags": [
    {
      "name": "Capabilities",
      "description": "General information about the API implementation and other supported capabilities at the back-end."
    },
    {
      "name": "EO Data Discovery",
      "description": "Discovery of Earth observation collections that are available at the back-end."
    },
    {
      "name": "Process Discovery",
      "description": "Discovery of processes that are available at the back-end."
    },
    {
      "name": "Account Management",
      "description": "User management, accounting and authentication."
    },
    {
      "name": "File Management",
      "description": "Management of user-uploaded assets and processed data."
    },
    {
      "name": "Process Graph Management",
      "description": "Management of stored process graphs."
    },
    {
      "name": "Job Management",
      "description": "Management of batch processing tasks (jobs) and their results."
    },
    {
      "name": "Secondary Services Management",
      "description": "On-demand access to data using other web service protocols."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Supported features and other general information about the back-end.",
        "description": "The request will ask the back-end which version and endpoints of the openEO API are supported. Also lists available billing plans.",
        "tags": [
          "Capabilities"
        ],
        "security": [
          {}
        ],
        "responses": {
          "200": {
            "description": "Information about the API version and supported endpoints / features.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "api_version",
                    "backend_version",
                    "endpoints"
                  ],
                  "properties": {
                    "api_version": {
                      "type": "string",
                      "description": "Version number of the openEO specification this back-end implements.",
                      "example": "0.4.0"
                    },
                    "backend_version": {
                      "type": "string",
                      "description": "Version number of the back-end implementation.\nEvery change on back-end side MUST cause a change of the version number.",
                      "example": "1.1.2"
                    },
                    "endpoints": {
                      "type": "array",
                      "description": "Lists all supported endpoints. Supported are all endpoints, which are implemented and do not return openEO error `FeatureUnsupported` / HTTP error code 501.",
                      "items": {
                        "type": "object",
                        "required": [
                          "path",
                          "methods"
                        ],
                        "properties": {
                          "path": {
                            "description": "Path to the endpoint, starting from the base url of the API. MUST contain a leading slash, *must not* contain a trailing slash. Variables in the paths must be placed in curly braces, e.g. `{process_id}`, and have a self-speaking name. It is RECOMMENDED that the path variable names fully follow the API specification.",
                            "type": "string"
                          },
                          "methods": {
                            "description": "Supported HTTP verbs in uppercase. It is not required to list OPTIONS as method (see the documentation regarding CORS).",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "GET",
                                "POST",
                                "PATCH",
                                "PUT",
                                "DELETE"
                              ]
                            }
                          }
                        }
                      },
                      "example": [
                        {
                          "path": "/collections",
                          "methods": [
                            "GET"
                          ]
                        },
                        {
                          "path": "/collections/{name}",
                          "methods": [
                            "GET"
                          ]
                        },
                        {
                          "path": "/processes",
                          "methods": [
                            "GET"
                          ]
                        },
                        {
                          "path": "/jobs",
                          "methods": [
                            "GET",
                            "POST"
                          ]
                        },
                        {
                          "path": "/jobs/{job_id}",
                          "methods": [
                            "GET",
                            "DELETE",
                            "PATCH"
                          ]
                        }
                      ]
                    },
                    "billing": {
                      "description": "Billing related data, e.g. the currency used or available plans to process jobs. MUST be specified if the back-end uses any billing related functionalities, e.g. budgeting, estimates.",
                      "type": "object",
                      "required": [
                        "currency"
                      ],
                      "properties": {
                        "currency": {
                          "description": "The currency the back-end is billing in. The currency MUST be either a valid currency code as defined in ISO-4217 or a proprietary currency, e.g. tiles or back-end specific credits.",
                          "type": "string",
                          "example": "USD"
                        },
                        "default_plan": {
                          "type": "string",
                          "description": "Name of the default plan to use when the user doesn't specify a plan. Is allowed to be *case insensitive* throughout the API.",
                          "example": "free"
                        },
                        "plans": {
                          "description": "Array of plans",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name",
                              "description"
                            ],
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the plan. Is allowed to be *case insensitive* throughout the API.",
                                "example": "free"
                              },
                              "description": {
                                "type": "string",
                                "description": "A description that gives a rough overview over the plan.",
                                "example": "Free plan. Calculates one tile per second and a maximum amount of 100 tiles per hour."
                              },
                              "url": {
                                "type": "string",
                                "description": "URL to a web page with more details about the plan.",
                                "format": "url",
                                "example": "http://openeo.org/plans/free-plan"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/output_formats": {
      "get": {
        "summary": "List supported output formats.",
        "description": "The request will ask the back-end for supported output formats, e.g. PNG, GTiff and JSON, and its default output format. The response is an object of the default and all available output formats and their options. This does not include the supported secondary web services.\n\n**Note**: Output format names and parameters SHOULD be fully aligned with the GDAL codes if available, see [GDAL Raster Formats](http://www.gdal.org/formats_list.html) and [OGR Vector Formats](http://www.gdal.org/ogr_formats.html). It is OPTIONAL to support all output format parameters supported by GDAL. Some file formats not available through GDAL could be defined centrally for openEO. Custom output formats or parameters MAY be defined, but it is recommended to stick to GDAL to increase interoperability.\n\nA `JSON` file format MAY be supported by back-ends to allow outputting data that doesn't fit into raster or vector file formats.\n\nFile formats that define multiple GIS spatial data types in `gis_data_types` (e.g. raster and vector) SHOULD define a parameter `gis_data_type` in the `parameters` for the output format to allow speciying which data type should be used for writing job or other results.\n\nOutput format names are allowed to be *case insensitive* throughout the API.",
        "tags": [
          "Capabilities",
          "Job Management"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "An object with the default output format and a map containing all output format names as keys and an object that defines supported paramaters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "default",
                    "formats"
                  ],
                  "properties": {
                    "default": {
                      "type": "string",
                      "example": "GTiff"
                    },
                    "formats": {
                      "type": "object",
                      "description": "List of supported output formats.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Describes a specific output format. The key of the entry is the output format name.",
                        "required": [
                          "gis_data_types"
                        ],
                        "properties": {
                          "gis_data_types": {
                            "type": "array",
                            "description": "Specifies the supported GIS spatial data type for this format.",
                            "items": {
                              "$ref": "#/components/schemas/gis_data_type"
                            }
                          },
                          "parameters": {
                            "description": "Specifies the supported parameters for this output format.",
                            "type": "object",
                            "properties": {
                              "gis_data_type": {
                                "$ref": "#/components/schemas/gis_data_type"
                              }
                            },
                            "additionalProperties": {
                              "$ref": "#/components/schemas/argument"
                            }
                          }
                        }
                      },
                      "example": {
                        "GTiff": {
                          "gis_data_types": [
                            "raster"
                          ],
                          "parameters": {
                            "tiled": {
                              "type": "boolean",
                              "description": "This option can be used to force creation of tiled TIFF files [true]. By default [false] stripped TIFF files are created.",
                              "default": false
                            },
                            "compress": {
                              "type": "string",
                              "description": "Set the compression to use.",
                              "default": "none",
                              "enum": [
                                "JPEG",
                                "LZW",
                                "DEFLATE",
                                "NONE"
                              ]
                            },
                            "photometric": {
                              "type": "string",
                              "description": "Set the photometric interpretation tag.",
                              "enum": [
                                "MINISBLACK",
                                "MINISWHIT",
                                "RGB",
                                "CMYK",
                                "YCBCR",
                                "CIELAB",
                                "ICCLAB",
                                "ITULAB"
                              ],
                              "default": "RGB"
                            },
                            "jpeg_quality": {
                              "type": "integer",
                              "description": "Set the JPEG quality when using JPEG.",
                              "minimum": 1,
                              "maximum": 100,
                              "default": 75
                            }
                          }
                        },
                        "GeoPackage": {
                          "gis_data_types": [
                            "raster",
                            "vector"
                          ],
                          "parameters": {
                            "gis_data_type": {
                              "type": "string",
                              "enum": [
                                "raster",
                                "vector"
                              ],
                              "required": true
                            },
                            "version": {
                              "type": "string",
                              "description": "Set GeoPackage version. In AUTO mode, this will be equivalent to 1.2 starting with GDAL 2.3.",
                              "enum": [
                                "auto",
                                1,
                                1.1,
                                1.2
                              ],
                              "default": "auto"
                            },
                            "geometry_name": {
                              "type": "string",
                              "description": "**VECTOR ONLY.** Column to use for the geometry column.",
                              "default": "geom"
                            },
                            "table": {
                              "type": "string",
                              "description": "**RASTER ONLY.** Name of the table containing the tiles. If the GeoPackage dataset only contains one table, this option is not necessary. Otherwise, it is required."
                            }
                          }
                        },
                        "JSON": {
                          "gis_data_types": [
                            "other"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/collections": {
      "get": {
        "summary": "List available EO datasets/collections.",
        "description": "Requests will ask the back-end for available collections and will return an array of available collections with very basic information such as their unique identifiers.\n\nMore information on [data discovery](https://open-eo.github.io/openeo-api/v/0.4.0/collections/), including common relation types for links, are available in the documentation.\n\n**Note:** openEO strives for compatibility with [STAC](https://github.com/radiantearth/stac-spec) and [OGC WFS 3.0](https://github.com/opengeospatial/WFS_FES) as far as possible. Both standards, as well as openEO, are still under development. Therefore, it is likely that further changes and adjustments will be made in the future.",
        "tags": [
          "EO Data Discovery"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of related links and collections, including their unique identifiers and some basic required metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "collections",
                    "links"
                  ],
                  "properties": {
                    "collections": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "description",
                          "license",
                          "extent",
                          "links"
                        ],
                        "additionalProperties": true,
                        "properties": {
                          "name": {
                            "$ref": "#/components/schemas/collection_name"
                          },
                          "title": {
                            "$ref": "#/components/schemas/collection_title"
                          },
                          "description": {
                            "$ref": "#/components/schemas/collection_description"
                          },
                          "license": {
                            "$ref": "#/components/schemas/license"
                          },
                          "extent": {
                            "$ref": "#/components/schemas/extent"
                          },
                          "links": {
                            "$ref": "#/components/schemas/collection_links"
                          }
                        }
                      }
                    },
                    "links": {
                      "description": "General links related to the data discovery service, for example  another service such as a OGC WCS that describes all the collections.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/link"
                      }
                    }
                  },
                  "example": {
                    "collections": [
                      {
                        "name": "Sentinel-2A",
                        "title": "Sentinel-2A MSI L1C",
                        "description": "Sentinel-2A is a wide-swath, high-resolution, multi-spectral imaging mission supporting Copernicus Land Monitoring studies, including the monitoring of vegetation, soil and water cover, as well as observation of inland waterways and coastal areas.",
                        "license": "proprietary",
                        "extent": {
                          "spatial": [
                            180,
                            -56,
                            -180,
                            83
                          ],
                          "temporal": [
                            "2015-06-23T00:00:00Z",
                            null
                          ]
                        },
                        "links": [
                          {
                            "rel": "self",
                            "href": "https://openeo.org/api/collections/Sentinel-2A"
                          },
                          {
                            "rel": "license",
                            "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf"
                          }
                        ]
                      },
                      {
                        "name": "MOD09Q1",
                        "title": "MODIS/Terra Surface Reflectance 8-Day L3 Global 250m SIN Grid V006",
                        "description": "The MOD09Q1 Version 6 product provides an estimate of the surface spectral reflectance of Terra MODIS Bands 1-2 corrected for atmospheric conditions such as gasses, aerosols, and Rayleigh scattering. Provided along with the two 250 m MODIS bands is one additional layer, the Surface Reflectance QC 250 m band. For each pixel, a value is selected from all the acquisitions within the 8-day composite period. The criteria for the pixel choice include cloud and solar zenith. When several acquisitions meet the criteria the pixel with the minimum channel 3 (blue) value is used. Validation at stage 3 has been achieved for all MODIS Surface Reflectance products.",
                        "license": "proprietary",
                        "extent": {
                          "spatial": [
                            180,
                            -90,
                            -180,
                            90
                          ],
                          "temporal": [
                            "2000-02-01T00:00:00Z",
                            null
                          ]
                        },
                        "links": [
                          {
                            "rel": "self",
                            "href": "https://openeo.org/api/collections/MOD09Q1"
                          },
                          {
                            "rel": "license",
                            "href": "https://openeo.org/api/collections/MOD09Q1/license"
                          }
                        ]
                      }
                    ],
                    "links": [
                      {
                        "rel": "self",
                        "href": "https://openeo.org/api/collections"
                      },
                      {
                        "rel": "alternate",
                        "href": "https://openeo.org/csw",
                        "title": "openEO catalog (OGC Catalogue Services 3.0)"
                      }
                    ]
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/collections/{name}": {
      "parameters": [
        {
          "name": "name",
          "in": "path",
          "description": "Unique collection identifier.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/collection_name"
          }
        }
      ],
      "get": {
        "summary": "Full information about a specific EO dataset/collection.",
        "description": "The request will ask the back-end for further details about a collection specified by the identifier `collection_name`.\n\nThis endpoint aims to be compatible with STAC and all features and extensions of [STAC](https://github.com/radiantearth/stac-spec) can be used here.\n\nMore information on [data discovery](https://open-eo.github.io/openeo-api/v/0.4.0/collections/), including common relation types for links, are available in the documentation.\n\n**Note:** openEO strives for compatibility with [STAC](https://github.com/radiantearth/stac-spec) and [OGC WFS 3.0](https://github.com/opengeospatial/WFS_FES) as far as possible. Both standards, as well as openEO, are still under development. Therefore, it is likely that further changes and adjustments will be made in the future.",
        "tags": [
          "EO Data Discovery"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with metadata about the collection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "description",
                    "license",
                    "extent",
                    "links"
                  ],
                  "additionalProperties": true,
                  "properties": {
                    "name": {
                      "$ref": "#/components/schemas/collection_name"
                    },
                    "title": {
                      "$ref": "#/components/schemas/collection_title"
                    },
                    "description": {
                      "$ref": "#/components/schemas/collection_description"
                    },
                    "license": {
                      "$ref": "#/components/schemas/license"
                    },
                    "extent": {
                      "$ref": "#/components/schemas/extent"
                    },
                    "keywords": {
                      "type": "array",
                      "description": "List of keywords describing the collection.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the collection."
                    },
                    "provider": {
                      "type": "array",
                      "description": "A list of data providers, the organizations which influenced the content of the collection. Providers should be listed in chronological order with the most recent provider being the last element of the list.",
                      "items": {
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "The name of the organization or the individual.",
                            "type": "string"
                          },
                          "url": {
                            "description": "Homepage of the provider.",
                            "type": "string",
                            "format": "url"
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/collection_links"
                    },
                    "eo:gsd": {
                      "type": "number",
                      "description": "The nominal Ground Sample Distance for the data, as measured in meters on the ground. Since GSD can vary across a scene depending on projection, this should be the average or most commonly used GSD in the center of the image. If the data includes multiple bands with different GSD values, this should be the value for the greatest number or most common bands. For instance, Landsat optical and short-wave IR bands are all 30 meters, but the panchromatic band is 15 meters. The eo:gsd should be 30 meters in this case since those are the bands most commonly used."
                    },
                    "eo:platform": {
                      "type": "string",
                      "description": "Unique name of the specific platform the instrument is attached to. For satellites this would be the name of the satellite (e.g., landsat-8, sentinel-2A), whereas for drones this would be a unique name for the drone."
                    },
                    "eo:constellation": {
                      "type": "string",
                      "description": "The name of the group of satellites that have similar payloads and have their orbits arranged in a way to increase the temporal resolution of acquisitions of data with similar geometric and radiometric characteristics. Examples are the Sentinel-2 constellation, which has S2A and S2B and RapidEye. This field allows users to search for Sentinel-2 data, for example, without needing to specify which specific platform the data came from."
                    },
                    "eo:instrument": {
                      "type": "string",
                      "description": "Name of instrument or sensor used (e.g., MODIS, ASTER, OLI, Canon F-1), although for collections which contain data from multiple sensors this could also name multiple sensors. For example, data from the Landsat-8 platform is collected with the OLI sensor as well as the TIRS sensor, but the data is distributed together and commonly referred to as OLI_TIRS."
                    },
                    "eo:epsg": {
                      "type": "number",
                      "description": "A Coordinate Reference System (CRS) is the native reference system (sometimes called a 'projection') used by the data, and can usually be referenced using an EPSG code. If the data does not have a CRS, such as in the case of non-rectified imagery with Ground Control Points, eo:epsg should be set to null. It should also be set to `null` if a CRS exists, but for which there is no valid EPSG code.",
                      "nullable": true
                    },
                    "eo:bands": {
                      "type": "object",
                      "description": "This is a dictionary of band information where each key in the dictionary is an identifier for the band (e.g., \"B01\", \"B02\", \"B1\", \"B5\", \"QA\").",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {
                          "common_name": {
                            "type": "string",
                            "description": "Not required, but **STRONGLY RECOMMENDED**! The name commonly used to refer to the band to make it easier to search for bands across instruments. See the STAC EO extension for a list of accepted common names."
                          },
                          "description": {
                            "$ref": "#/components/schemas/description"
                          },
                          "gsd": {
                            "type": "number",
                            "description": "Ground Sample distance, the nominal distance between pixel centers available, in meters. See eo:gsd for more information. Defaults to eo:gsd if not provided."
                          },
                          "accuracy": {
                            "type": "number",
                            "description": "The expected error between the measured location and the true location of a pixel, in meters on the ground."
                          },
                          "wavelength": {
                            "type": "number",
                            "description": "The center wavelength of the band, in microns."
                          },
                          "full_width_half_max": {
                            "type": "number",
                            "description": "Full width at half maximum (FWHM) is a common way to describe the size of a spectral band. It is the width, in microns, of the bandpass measured at a half of the maximum transmission. Thus, if the maximum transmission of the bandpass was 80%, the FWHM is measured as the width of the bandpass at 40% transmission."
                          },
                          "offset": {
                            "description": "Offset to convert band values to the actual measurement scale.",
                            "type": "number",
                            "default": 0
                          },
                          "scale": {
                            "description": "Scale to convert band values to the actual measurement scale.",
                            "type": "number",
                            "default": 1
                          },
                          "unit": {
                            "description": "Unit of measurements, preferably following the singular unit names in the [UDUNITS2 database](https://ncics.org/portfolio/other-resources/udunits2/).",
                            "type": "string"
                          },
                          "nodata": {
                            "description": "Specific values representing no data.",
                            "type": "array",
                            "items": {
                              "type": "number"
                            }
                          },
                          "periodicity": {
                            "description": "Periodictity of the measurements, preferably specified using ISO 8601.",
                            "type": "number"
                          }
                        }
                      }
                    },
                    "sci:doi": {
                      "type": "string",
                      "description": "The DOI name of the collection, e.g. `10.1000/xyz123`. This MUST NOT be a DOIs link. For all DOI names respective DOI links SHOULD be added to the links section of the collection with relation type `cite-as`.",
                      "pattern": "^(10[.][0-9]{4,}(?:[.][0-9]+)*/(?:(?![%\"#? ])\\S)+)$"
                    },
                    "sci:citation": {
                      "type": "string",
                      "description": "The recommended human-readable reference (citation) to be used by publications citing this collection. No specific citation style is suggested, but the citation should contain all information required to find the publication distinctively."
                    },
                    "sci:publications": {
                      "type": "object",
                      "description": "A list of publications which describe and reference the collection.",
                      "properties": {
                        "doi": {
                          "type": "string",
                          "description": "The DOI name of a publication which describes and references the collection. The publications should include more information about the collection and how it was processed. This MUST NOT be a DOIs link. For all DOI names respective DOI links SHOULD be added to the links section of the collection with relation type `cite-as`.",
                          "pattern": "^(10[.][0-9]{4,}(?:[.][0-9]+)*/(?:(?![%\"#? ])\\S)+)$"
                        },
                        "citation": {
                          "type": "string",
                          "description": "Human-readable reference (citation) of a publication which describes and references the collection. The publications should include more information about the collection and how it was processed. No specific citation style is suggested, but a citation should contain all information required to find the publication distinctively."
                        }
                      }
                    }
                  },
                  "example": {
                    "name": "Sentinel-2A",
                    "title": "Sentinel-2A MSI L1C",
                    "description": "Sentinel-2A is a wide-swath, high-resolution, multi-spectral imaging mission supporting Copernicus Land Monitoring studies, including the monitoring of vegetation, soil and water cover, as well as observation of inland waterways and coastal areas.",
                    "license": "proprietary",
                    "keywords": [
                      "copernicus",
                      "esa",
                      "eu",
                      "msi",
                      "radiance",
                      "sentinel"
                    ],
                    "provider": [
                      {
                        "name": "European Space Agency (ESA)",
                        "url": "https://sentinel.esa.int/web/sentinel/user-guides/sentinel-2-msi"
                      }
                    ],
                    "extent": {
                      "spatial": [
                        180,
                        -56,
                        -180,
                        83
                      ],
                      "temporal": [
                        "2015-06-23T00:00:00Z",
                        null
                      ]
                    },
                    "links": [
                      {
                        "rel": "self",
                        "href": "https://openeo.org/api/collections/Sentinel-2A"
                      },
                      {
                        "rel": "license",
                        "href": "https://scihub.copernicus.eu/twiki/pub/SciHubWebPortal/TermsConditions/Sentinel_Data_Terms_and_Conditions.pdf"
                      },
                      {
                        "rel": "about",
                        "href": "https://earth.esa.int/web/sentinel/user-guides/sentinel-2-msi/product-types/level-1c",
                        "title": "ESA Sentinel-2 MSI Level-1C User Guide"
                      }
                    ],
                    "sci:citation": "Copernicus Sentinel data [Year]",
                    "eo:epsg": 32632,
                    "eo:platform": "sentinel-2a",
                    "eo:constellation": "sentinel-2",
                    "eo:bands": {
                      "B1": {
                        "common_name": "coastal",
                        "center_wavelength": 4.439,
                        "gsd": 60,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B2": {
                        "common_name": "blue",
                        "center_wavelength": 4.966,
                        "gsd": 10,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B3": {
                        "common_name": "green",
                        "center_wavelength": 5.6,
                        "gsd": 10,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B4": {
                        "common_name": "red",
                        "center_wavelength": 6.645,
                        "gsd": 10,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B5": {
                        "center_wavelength": 7.039,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B6": {
                        "center_wavelength": 7.402,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B7": {
                        "center_wavelength": 7.825,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B8": {
                        "common_name": "nir",
                        "center_wavelength": 8.351,
                        "gsd": 10,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B8A": {
                        "center_wavelength": 8.648,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B9": {
                        "center_wavelength": 9.45,
                        "gsd": 60,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B10": {
                        "center_wavelength": 1.3735,
                        "gsd": 60,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B11": {
                        "common_name": "swir16",
                        "center_wavelength": 1.6137,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      },
                      "B12": {
                        "common_name": "swir22",
                        "center_wavelength": 2.2024,
                        "gsd": 20,
                        "scale": 0.0001,
                        "offset": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/processes": {
      "get": {
        "summary": "List supported processes.",
        "description": "The request asks the back-end for available processes and returns detailed process descriptions, including parameters and return values. Processes are described using the Functio specification for language-agnostic process descriptions.",
        "tags": [
          "Process Discovery"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Formal specification describing the supported processes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "processes",
                    "links"
                  ],
                  "properties": {
                    "processes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "description",
                          "parameters",
                          "returns"
                        ],
                        "properties": {
                          "id": {
                            "$ref": "#/components/schemas/process_id"
                          },
                          "summary": {
                            "type": "string",
                            "description": "A short summary of what the process does."
                          },
                          "description": {
                            "$ref": "#/components/schemas/description"
                          },
                          "parameters": {
                            "type": "object",
                            "description": "A list of parameters that are applicable for this process. The key of the map is the name of the parameter.",
                            "additionalProperties": {
                              "type": "object",
                              "required": [
                                "description",
                                "schema"
                              ],
                              "properties": {
                                "description": {
                                  "$ref": "#/components/schemas/description"
                                },
                                "required": {
                                  "type": "boolean",
                                  "description": "Determines whether this parameter is mandatory.",
                                  "default": false
                                },
                                "dependencies": {
                                  "type": "array",
                                  "description": "A list of parameters that influence this parameter or this parameter depends on.",
                                  "items": {
                                    "type": "object",
                                    "description": "A dependency this parameter has with another parameter. It MAY be restricted to certain values using the ref_values field. Otherwise the specified parameter in the field parameter is always required for this parameter.",
                                    "required": [
                                      "parameter"
                                    ],
                                    "properties": {
                                      "description": {
                                        "$ref": "#/components/schemas/description"
                                      },
                                      "parameter": {
                                        "type": "string",
                                        "description": "The name of the referenced parameter."
                                      },
                                      "ref_values": {
                                        "type": "array",
                                        "description": "Embedded literal value that the referenced parameter MUST hold for this dependency to apply.",
                                        "items": {
                                          "description": "Any data type allowed for the referenced parameter."
                                        }
                                      }
                                    }
                                  }
                                },
                                "deprecated": {
                                  "type": "boolean",
                                  "description": "Specifies that a parameter is deprecated and SHOULD be transitioned out of usage.",
                                  "default": false
                                },
                                "media_type": {
                                  "type": "string",
                                  "description": "The media (MIME) type that the parameter is formatted with."
                                },
                                "schema": {
                                  "$ref": "#/components/schemas/json_schema"
                                }
                              }
                            }
                          },
                          "min_parameters": {
                            "type": "integer",
                            "description": "Minimum number of parameters required for this process, including required parameters."
                          },
                          "returns": {
                            "type": "object",
                            "description": "The data that is returned from this process. If not specified the process does not return anything.",
                            "required": [
                              "description",
                              "schema"
                            ],
                            "properties": {
                              "description": {
                                "$ref": "#/components/schemas/description"
                              },
                              "media_type": {
                                "type": "string",
                                "description": "The media (MIME) type that the returned data is formatted with."
                              },
                              "schema": {
                                "$ref": "#/components/schemas/json_schema"
                              }
                            }
                          },
                          "deprecated": {
                            "type": "boolean",
                            "description": "Declares this process to be deprecated. Consumers SHOULD refrain from usage of the declared process.",
                            "default": false
                          },
                          "exceptions": {
                            "type": "object",
                            "description": "Declares any exceptions (errors) that might occur during execution of this process. MUST be used only for exceptions that stop the execution of a process and are therefore not to be used for warnings, or notices or debugging messages. The keys define the error code. This schema follows the schema of the  general openEO error list (see errors.json).",
                            "additionalProperties": {
                              "type": "object",
                              "required": [
                                "message"
                              ],
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "description": "Detailed description to fully explain the error to client users and back-end developers. This should not be shown in the clients directly, but may be linked to in the errors `url` property.  \n\n[CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation."
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Explains the reason the server is rejecting the request. This message is intended to be displayed to the client user. For \"4xx\" error codes the message should explain shortly how the client needs to modify the request.\n\nThe message MAY contain variables, which are enclosed by curly brackets. Example: `{variable_name}`",
                                  "example": "The value specified for the process argument '{argument}' in process '{process}' is invalid: {reason}"
                                },
                                "http": {
                                  "type": "integer",
                                  "description": "HTTP Status Code, following the [error handling conventions in openEO](https://open-eo.github.io/openeo-api/v/0.4.0/errors/). Defaults to `400`.",
                                  "default": 400
                                }
                              }
                            }
                          },
                          "examples": {
                            "type": "object",
                            "description": "If parameters or return values are referencing a schema which contains an example, the examples value SHALL override the example provided by the schema.",
                            "additionalProperties": {
                              "type": "object",
                              "description": "The sourceCode field is mutually exclusive of the paramaters and returns fields, i.e. you can only specify either sourceCode or parameters/returns.",
                              "required": [
                                "description"
                              ],
                              "properties": {
                                "summary": {
                                  "type": "string",
                                  "description": "Short summary for the example."
                                },
                                "description": {
                                  "$ref": "#/components/schemas/description"
                                },
                                "process_graph": {
                                  "$ref": "#/components/schemas/process_graph"
                                }
                              }
                            }
                          },
                          "links": {
                            "type": "array",
                            "description": "Related links, e.g. additional external documentation for this process.",
                            "items": {
                              "$ref": "#/components/schemas/link"
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/list_links"
                    }
                  },
                  "example": {
                    "processes": [
                      {
                        "id": "get_collection_example",
                        "summary": "Selects a collection.",
                        "description": "Filters and selects a single collection provided by the back-end. The back-end provider decides which of the potential collections is the most relevant one to be selected.\n\nExample - do not use, it's not an official process description!",
                        "min_parameters": 1,
                        "parameters": {
                          "name": {
                            "description": "Filter by collection name",
                            "schema": {
                              "type": "string",
                              "examples": [
                                "Sentinel2A-L1C"
                              ]
                            }
                          },
                          "spatial_extent": {
                            "description": "Filter by spatial extent, may include a vertical axis (height or depth).",
                            "schema": {
                              "type": "object",
                              "format": "spatial_extent"
                            }
                          },
                          "temporal_extent": {
                            "description": "Filter by time",
                            "schema": {
                              "type": "array",
                              "format": "temporal_extent"
                            }
                          },
                          "bands": {
                            "description": "Filter by band IDs",
                            "schema": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "returns": {
                          "description": "Processed EO data.",
                          "schema": {
                            "type": "object",
                            "format": "eodata"
                          }
                        }
                      },
                      {
                        "id": "filter_bands_example",
                        "summary": "Filter an image collection by bands.",
                        "description": "Allows to extract one or multiple bands of multi-band raster image collection.\nBands can be chosen either by band id, band name or by wavelength.\n\nimagery and at least one of the other arguments is required to be specified.\n\nExample - do not use, it's not an official process description!",
                        "min_parameters": 2,
                        "parameters": {
                          "imagery": {
                            "description": "EO data to process.",
                            "required": true,
                            "schema": {
                              "type": "object",
                              "format": "eodata"
                            }
                          },
                          "bands": {
                            "description": "string or array of strings containing band ids.",
                            "schema": {
                              "type": [
                                "string",
                                "array"
                              ],
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "names": {
                            "description": "string or array of strings containing band names.",
                            "schema": {
                              "type": [
                                "string",
                                "array"
                              ],
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "wavelengths": {
                            "description": "number or two-element array of numbers containing a wavelength or a minimum and maximum wavelength respectively.",
                            "schema": {
                              "type": [
                                "number",
                                "array"
                              ],
                              "minItems": 2,
                              "maxItems": 2,
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        },
                        "returns": {
                          "description": "Processed EO data.",
                          "schema": {
                            "type": "object",
                            "format": "eodata"
                          }
                        }
                      },
                      {
                        "id": "filter_daterange_example",
                        "summary": "Filter an image collection by temporal extent.",
                        "description": "Example - do not use, it's not an official process description!",
                        "min_parameters": 1,
                        "parameters": {
                          "imagery": {
                            "description": "EO data to process.",
                            "required": true,
                            "schema": {
                              "type": "object",
                              "format": "eodata"
                            }
                          },
                          "extent": {
                            "type": "array",
                            "description": "Temporal extent specified by a start and an end time, each formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time. Open date ranges are supported and can be specified by setting one of the times to null. Setting both entries to null is not allowed.",
                            "examples": [
                              [
                                "2016-01-01T00:00:00Z",
                                "2017-10-01T00:00:00Z"
                              ]
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "format": "date-time",
                              "minItems": 2,
                              "maxItems": 2
                            }
                          }
                        },
                        "returns": {
                          "description": "Processed EO data.",
                          "schema": {
                            "type": "object",
                            "format": "eodata"
                          }
                        }
                      },
                      {
                        "id": "process_graph_example",
                        "description": "Loads another process graph and applies it to the specified imagery. This can be an externally hosted process graph.\n\nExample - do not use, it's not an official process description!",
                        "parameters": {
                          "imagery": {
                            "description": "EO data to process.",
                            "required": true,
                            "schema": {
                              "type": "object",
                              "format": "eodata"
                            }
                          },
                          "url": {
                            "description": "An URL to a process graph.",
                            "required": true,
                            "schema": {
                              "type": "string",
                              "format": "url",
                              "examples": [
                                "http://otherhost.org/api/v1/users/12345/process_graphs/abcdef"
                              ]
                            }
                          }
                        },
                        "returns": {
                          "description": "Processed EO data.",
                          "schema": {
                            "type": "object",
                            "format": "eodata"
                          }
                        },
                        "exceptions": {
                          "NotFound": {
                            "message": "Process graph doesn't exist."
                          }
                        }
                      }
                    ],
                    "links": [
                      {
                        "rel": "alternate",
                        "href": "https://openeo.org/processes",
                        "type": "text/html",
                        "title": "HTML version of the processes"
                      }
                    ]
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/credentials/oidc": {
      "get": {
        "summary": "Authentication with OpenID Connect.",
        "description": "This endpoint redirects to the [OpenID Connect discovery](http://openid.net/specs/openid-connect-discovery-1_0.html) document, which is usually located at `https://{{domain}}/.well-known/openid-configuration` and provides all information required to authenticate using [OpenID Connect](http://openid.net/connect/). It is highly RECOMMENDED to implement OpenID Connect for public services in favor of Basic authentication.",
        "tags": [
          "Account Management"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "303": {
            "description": "Specifies the location of the OpenID Connect discovery document.",
            "headers": {
              "Location": {
                "required": true,
                "schema": {
                  "type": "string",
                  "example": "https://openeo.org/.well-known/openid-configuration"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/credentials/basic": {
      "get": {
        "summary": "Authentication with HTTP Basic.",
        "description": "This request checks whether the credentials provided in the HTTP Basic header are valid. Returns the user ID and a bearer token for authorization in subsequent API calls. It is RECOMMENDED to implement this authentication method for non-public services only.",
        "tags": [
          "Account Management"
        ],
        "security": [
          {
            "Basic": []
          }
        ],
        "responses": {
          "200": {
            "description": "Credentials are correct and authentication succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "user_id",
                    "access_token"
                  ],
                  "properties": {
                    "user_id": {
                      "$ref": "#/components/schemas/user_id"
                    },
                    "access_token": {
                      "description": "An access token that is used for subsequent calls to the API as Bearer token in the `Authorization` header.",
                      "type": "string",
                      "example": "b34ba2bdf9ac9ee1"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/validation": {
      "post": {
        "summary": "Validate a process graph.",
        "description": "Validates a process graph without executing it. A process graph is considered valid unless \nthe `errors` array in the response contains at least one error.\n\nChecks whether the process graph is schematically correct and the processes are supported\nby the back-end. It MUST also checks the parameter values against the schema,\nbut checking whether the values are adequate in the context of data is OPTIONAL.\nFor example, a non-existing band name may may get rejected only by a few back-ends.\nErrors that usually occure during processing MAY NOT get reported, e.g. if a\nreferenced file is accessible at the time of execution.\n\nBack-ends can either report all errors at once or stop the validation once\nthey found the first error. \n\nPlease note that a validation always returns with HTTP status code 200.\nError codes in the 4xx and 5xx ranges MUST be returned only when the generel\nvalidation request is invalid (e.g. server is busy or no process graph parameter specified),\nbut never if the process graph validation found an error (e.g. an unsupported process).",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the validation result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "errors"
                  ],
                  "properties": {
                    "errors": {
                      "description": "List of errors. An empty list indicates a successful validation.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/error"
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "process_graph"
                ],
                "properties": {
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph_vars"
                  }
                }
              }
            }
          },
          "description": "Specifies the process graph to be validated."
        }
      }
    },
    "/preview": {
      "post": {
        "summary": "Process and download EO data synchronously.",
        "description": "Process graphs will be executed directly and the result will be downloaded in the specified format. Requests might time-out after a certain amount of time by sending openEO error `RequestTimeout`. A header named `OpenEO-Costs` MAY be sent with all responses, which MUST include the costs for processing and downloading the data. This endpoint could be used especially to generate small previews or test process graphs before starting a batch job.",
        "tags": [
          "Process Graph Management",
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Result data in the specified output format",
            "headers": {
              "Content-Type": {
                "description": "The appropriate media (MIME) type for the requested output format MUST be sent.",
                "schema": {
                  "type": "string"
                }
              },
              "OpenEO-Costs": {
                "description": "MAY include the costs for processing and downloading the data.",
                "schema": {
                  "$ref": "#/components/schemas/money"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "description": "Specifies the job details, e.g. the process graph and the output format.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "process_graph"
                ],
                "properties": {
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph"
                  },
                  "output": {
                    "$ref": "#/components/schemas/output_format"
                  },
                  "budget": {
                    "$ref": "#/components/schemas/budget"
                  },
                  "plan": {
                    "$ref": "#/components/schemas/billing_plan_defaultable"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/process_graphs": {
      "get": {
        "summary": "List all user-specific process graphs.",
        "description": "This service lists all process graphs of the authenticated user that are stored at the back-end.",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON array with stored process graph meta data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "process_graphs",
                    "links"
                  ],
                  "properties": {
                    "process_graphs": {
                      "description": "Array of stored process graphs",
                      "type": "array",
                      "items": {
                        "description": "Defines limited metadata of stored process graphs that have been submitted by users.",
                        "type": "object",
                        "required": [
                          "process_graph_id"
                        ],
                        "properties": {
                          "process_graph_id": {
                            "$ref": "#/components/schemas/process_graph_id"
                          },
                          "title": {
                            "$ref": "#/components/schemas/title"
                          },
                          "description": {
                            "$ref": "#/components/schemas/description"
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/list_links"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "post": {
        "summary": "Store a new process graph.",
        "description": "Creates a unique resource for a provided process graph that can be reused in other process graphs.",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/created"
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "process_graph"
                ],
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph_vars"
                  }
                }
              }
            }
          },
          "description": "Specifies the process graph with its meta data."
        }
      }
    },
    "/process_graphs/{process_graph_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/process_graph_id"
        }
      ],
      "get": {
        "summary": "Full information about a process graph.",
        "description": "Returns all information about a process graph.",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON object with process graph",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Defines full metadata of stored process graphs that have been submitted by users.",
                  "type": "object",
                  "required": [
                    "process_graph_id",
                    "process_graph"
                  ],
                  "properties": {
                    "process_graph_id": {
                      "$ref": "#/components/schemas/process_graph_id"
                    },
                    "title": {
                      "$ref": "#/components/schemas/title"
                    },
                    "description": {
                      "$ref": "#/components/schemas/description"
                    },
                    "process_graph": {
                      "$ref": "#/components/schemas/process_graph_vars"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "patch": {
        "summary": "Modify a process graph.",
        "description": "Replaces a process graph or modifies the title, but maintains the identifier.",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "The process graph data has been updated successfully."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph_vars"
                  }
                }
              }
            }
          },
          "description": "Specifies the process graph with a title."
        }
      },
      "delete": {
        "summary": "Delete a process graph.",
        "tags": [
          "Process Graph Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "The process graph has been successfully deleted"
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/service_types": {
      "get": {
        "summary": "List supported secondary web service protocols.",
        "description": "The request will ask the back-end for supported secondary web service protocols, e.g. WMS or WCS. The response is an object of all available secondary web service protocols, including their parameters and attributes.\nParameters configure the service and therefore need to be defined upon creation of a service. Attributes are read-only characteristics of the service and may be computed based on the parameters, e.g. available layers for a WMS based on the bands in the underlying GeoTiff.\nTo improve interoperability between back-ends common names for the services SHOULD be used, e.g. the abbreviations used in the official [OGC Schema Repository](http://schemas.opengis.net/) for the respective services.\nService names are allowed to be *case insensitive* throughout the API.",
        "tags": [
          "Capabilities",
          "Secondary Services Management"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "An object with a map containing all service names as keys and an object that defines supported paramaters and attributes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "List of supported secondary web services.",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "parameters": {
                        "type": "object",
                        "description": "List of supported parameters for configuration.",
                        "additionalProperties": {
                          "$ref": "#/components/schemas/argument"
                        }
                      },
                      "attributes": {
                        "type": "object",
                        "description": "List of supported attributes.",
                        "additionalProperties": {
                          "$ref": "#/components/schemas/argument"
                        }
                      }
                    }
                  },
                  "example": {
                    "WMS": {
                      "parameters": {
                        "version": {
                          "type": "string",
                          "description": "The WMS version to use.",
                          "default": "1.3.0",
                          "enum": [
                            "1.1.1",
                            "1.3.0"
                          ]
                        }
                      },
                      "attributes": {
                        "layers": {
                          "type": "array",
                          "description": "Array of layer names.",
                          "example": [
                            "roads",
                            "countries",
                            "water_bodies"
                          ]
                        }
                      }
                    },
                    "WFS": {
                      "parameters": {
                        "version": {
                          "type": "string",
                          "description": "The WFS version to use.",
                          "default": "2.0.0",
                          "enum": [
                            "1.0.0",
                            "1.1.0",
                            "2.0.0"
                          ]
                        },
                        "maxFeatures": {
                          "type": "integer",
                          "description": "Maximum number of features (since WFS 2.0.0 only).",
                          "default": 10000,
                          "minimum": 1,
                          "maximum": 100000
                        }
                      },
                      "attributes": {
                        "typeNames": {
                          "type": "array",
                          "description": "Array of available feature type names.",
                          "example": [
                            "topp:states",
                            "topp:cities"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/services": {
      "get": {
        "summary": "List all user-specific secondary web services.",
        "description": "Requests to this endpoint will list all running secondary web services submitted by a user with given id.",
        "tags": [
          "Secondary Services Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of service descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "services",
                    "links"
                  ],
                  "properties": {
                    "services": {
                      "type": "array",
                      "items": {
                        "description": "Defines metadata of services.",
                        "type": "object",
                        "required": [
                          "service_id",
                          "enabled",
                          "type",
                          "url"
                        ],
                        "properties": {
                          "service_id": {
                            "$ref": "#/components/schemas/service_id"
                          },
                          "title": {
                            "$ref": "#/components/schemas/title"
                          },
                          "description": {
                            "$ref": "#/components/schemas/description"
                          },
                          "url": {
                            "$ref": "#/components/schemas/service_url"
                          },
                          "type": {
                            "$ref": "#/components/schemas/service_type"
                          },
                          "enabled": {
                            "$ref": "#/components/schemas/service_enabled"
                          },
                          "submitted": {
                            "$ref": "#/components/schemas/submitted"
                          },
                          "plan": {
                            "$ref": "#/components/schemas/billing_plan"
                          },
                          "costs": {
                            "$ref": "#/components/schemas/money"
                          },
                          "budget": {
                            "$ref": "#/components/schemas/budget"
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/list_links"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "post": {
        "summary": "Publish a new secondary web service.",
        "description": "Calling this endpoint will create a secondary web service such as WMTS, TMS or WCS. The underlying data is processes on-demand, but a process graph may simply access results from a batch job. Computations should be performed in the sense that it is only evaluated for the requested spatial / temporal extent and resolution.\n\n**Note:** Costs incured by shared secondary web services are usually paid by the owner, but this depends on the service type and whether it supports charging fees or not.",
        "tags": [
          "Secondary Services Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/created"
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "job_id",
                  "type",
                  "process_graph"
                ],
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph"
                  },
                  "type": {
                    "$ref": "#/components/schemas/service_type"
                  },
                  "enabled": {
                    "$ref": "#/components/schemas/service_enabled"
                  },
                  "parameters": {
                    "$ref": "#/components/schemas/service_parameters"
                  },
                  "plan": {
                    "$ref": "#/components/schemas/billing_plan_defaultable"
                  },
                  "budget": {
                    "$ref": "#/components/schemas/budget"
                  }
                }
              }
            }
          },
          "description": "The base data for the secondary web service to create"
        }
      }
    },
    "/services/{service_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/service_id"
        }
      ],
      "patch": {
        "summary": "Updates a secondary web service.",
        "description": "Calling this endpoint will change the specified secondary web service, but maintain its identifier. Changes can be grouped in a single request. To change the service type create a new service.",
        "tags": [
          "Secondary Services Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Changes to the service were applied successfully."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph"
                  },
                  "enabled": {
                    "$ref": "#/components/schemas/service_enabled"
                  },
                  "parameters": {
                    "$ref": "#/components/schemas/service_parameters"
                  },
                  "plan": {
                    "$ref": "#/components/schemas/billing_plan_defaultable"
                  },
                  "budget": {
                    "$ref": "#/components/schemas/budget"
                  }
                }
              }
            }
          },
          "description": "The data to change for the spcified secondary web service."
        }
      },
      "get": {
        "summary": "Full information about a secondary web service.",
        "description": "Requests to this endpoint will return JSON description of the secondary web service.",
        "tags": [
          "Secondary Services Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the created service",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Metadata of a service.",
                  "type": "object",
                  "required": [
                    "service_id",
                    "process_graph",
                    "enabled",
                    "type",
                    "url",
                    "parameters",
                    "attributes"
                  ],
                  "properties": {
                    "service_id": {
                      "$ref": "#/components/schemas/service_id"
                    },
                    "title": {
                      "$ref": "#/components/schemas/title"
                    },
                    "description": {
                      "$ref": "#/components/schemas/description"
                    },
                    "process_graph": {
                      "$ref": "#/components/schemas/process_graph"
                    },
                    "url": {
                      "$ref": "#/components/schemas/service_url"
                    },
                    "type": {
                      "$ref": "#/components/schemas/service_type"
                    },
                    "enabled": {
                      "$ref": "#/components/schemas/service_enabled"
                    },
                    "parameters": {
                      "$ref": "#/components/schemas/service_parameters"
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Additional attributes of the secondary web service, e.g. available layers for a WMS based on the bands in the underlying GeoTiff. See `GET /service_types` for supported attributes.",
                      "additionalProperties": true,
                      "example": {
                        "layers": [
                          "ndvi",
                          "evi"
                        ]
                      }
                    },
                    "submitted": {
                      "$ref": "#/components/schemas/submitted"
                    },
                    "plan": {
                      "$ref": "#/components/schemas/billing_plan"
                    },
                    "costs": {
                      "$ref": "#/components/schemas/money"
                    },
                    "budget": {
                      "$ref": "#/components/schemas/budget"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a secondary web service.",
        "description": "Calling this endpoint will stop a given secondary web service to access result data.",
        "tags": [
          "Secondary Services Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "The service has been successfully deleted."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "List all user-specific jobs.",
        "description": "Requests to this endpoint will list all batch jobs submitted by a user with given id.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of job descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "jobs",
                    "links"
                  ],
                  "properties": {
                    "jobs": {
                      "description": "Array of job descriptions",
                      "type": "array",
                      "items": {
                        "description": "Defines a metadata subset of betch jobs that have been submitted by users. To get the full metadata for a job including a process graph call `GET /jobs/{job_id}`",
                        "type": "object",
                        "required": [
                          "job_id",
                          "submitted",
                          "locked"
                        ],
                        "properties": {
                          "job_id": {
                            "$ref": "#/components/schemas/job_id"
                          },
                          "title": {
                            "$ref": "#/components/schemas/title"
                          },
                          "description": {
                            "$ref": "#/components/schemas/description"
                          },
                          "status": {
                            "$ref": "#/components/schemas/status"
                          },
                          "submitted": {
                            "$ref": "#/components/schemas/submitted"
                          },
                          "updated": {
                            "$ref": "#/components/schemas/updated"
                          },
                          "plan": {
                            "$ref": "#/components/schemas/billing_plan"
                          },
                          "costs": {
                            "$ref": "#/components/schemas/money"
                          },
                          "budget": {
                            "$ref": "#/components/schemas/budget"
                          }
                        }
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/list_links"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "post": {
        "summary": "Create a new job.",
        "description": "Creates a new batch processing task (job) from one or more (chained) processes at the back-end.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/created"
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "process_graph"
                ],
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph"
                  },
                  "output": {
                    "$ref": "#/components/schemas/output_format"
                  },
                  "plan": {
                    "$ref": "#/components/schemas/billing_plan_defaultable"
                  },
                  "budget": {
                    "$ref": "#/components/schemas/budget"
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "description": "Specifies the job details, e.g. the process graph and _optionally_ the output format."
        }
      }
    },
    "/jobs/{job_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/job_id"
        }
      ],
      "patch": {
        "summary": "Modify a job.",
        "description": "Modifies an existing job at the back-end but maintains the identifier. Changes can be grouped in a single request.\n\nJobs can only be modified when the job is not queued or running. Otherweise requests to this endpoint MUST be rejected with openEO error `JobLocked`.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Changes to the job applied successfully."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "$ref": "#/components/schemas/title"
                  },
                  "description": {
                    "$ref": "#/components/schemas/description"
                  },
                  "process_graph": {
                    "$ref": "#/components/schemas/process_graph"
                  },
                  "output": {
                    "$ref": "#/components/schemas/output_format"
                  },
                  "plan": {
                    "$ref": "#/components/schemas/billing_plan_defaultable"
                  },
                  "budget": {
                    "$ref": "#/components/schemas/budget"
                  }
                },
                "additionalProperties": true
              }
            }
          },
          "description": "Specifies the job details to update."
        }
      },
      "get": {
        "summary": "Full information about a job.",
        "description": "Returns detailed information about a submitted batch job.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full job information.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Defines full metadata of batch jobs that have been submitted by users.",
                  "type": "object",
                  "required": [
                    "job_id",
                    "process_graph",
                    "submitted"
                  ],
                  "properties": {
                    "job_id": {
                      "$ref": "#/components/schemas/job_id"
                    },
                    "title": {
                      "$ref": "#/components/schemas/title"
                    },
                    "description": {
                      "$ref": "#/components/schemas/description"
                    },
                    "process_graph": {
                      "$ref": "#/components/schemas/process_graph"
                    },
                    "output": {
                      "$ref": "#/components/schemas/output_format"
                    },
                    "status": {
                      "$ref": "#/components/schemas/status"
                    },
                    "submitted": {
                      "$ref": "#/components/schemas/submitted"
                    },
                    "updated": {
                      "$ref": "#/components/schemas/updated"
                    },
                    "plan": {
                      "$ref": "#/components/schemas/billing_plan"
                    },
                    "costs": {
                      "$ref": "#/components/schemas/money"
                    },
                    "budget": {
                      "$ref": "#/components/schemas/budget"
                    }
                  },
                  "additionalProperties": true
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "delete": {
        "summary": "Delete a job.",
        "description": "Deletes all data related to this job. Computations are stopped and computed results are deleted. This job won't generate additional costs for processing.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "The job has been successfully deleted."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/jobs/{job_id}/estimate": {
      "get": {
        "summary": "Get an estimate for a job.",
        "description": "Clients can ask for an estimate for a batch job. Back-ends can decide to either calculate the duration, the costs, the size or a combination of them. This MUST be the upper limit of the incurring costs. Clients can be charged less than specified, but never more. Back-end providers MAY specify an expiry time for the estimate. Starting to process data afterwards MAY be charged at a higher cost. Costs MAY NOT include downloading costs. This can be indicated with the `downloads_included` flag.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/job_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The estimated costs with regard to money, processing time and storage capacity. At least one of `costs`, `duration` or `size` MUST be provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "costs": {
                      "$ref": "#/components/schemas/money"
                    },
                    "duration": {
                      "type": "string",
                      "description": "Estimated duration for the operation. Duration MUST be specified as a ISO 8601 duration.",
                      "example": "P1Y2M10DT2H30M"
                    },
                    "size": {
                      "type": "integer",
                      "description": "Estimated required storage capacity, i.e. the size of the generated files. Size MUST be specified in bytes.",
                      "example": 157286400
                    },
                    "downloads_included": {
                      "type": "integer",
                      "description": "Specifies how many full downloads of the processed data are included in the estimate.",
                      "example": false,
                      "default": true
                    },
                    "expires": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Time until which the estimate is valid, formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time.",
                      "example": "2020-11-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/jobs/{job_id}/results": {
      "parameters": [
        {
          "$ref": "#/components/parameters/job_id"
        }
      ],
      "get": {
        "summary": "Download information for a completed job.",
        "description": "After finishing processing, this request will provide signed URLs to the processed files of the batch job.\n\nTitle, description and the date and time of the last update from the job SHOULD be included in the response.\n\nURL signing is a way to protect files from unauthorized access with a key instead of HTTP header based authorization. The URL signing key is similar to a password and it's inclusion in the URL allows to download files using simple GET requests supported by a wide range of programs, e.g. web browsers or download managers. Back-ends are responsible to generate the URL signing keys and their appropriate expiration. The back-end MAY indicate an expiration time by sending an `Expires` header.\n\nDepending on the `Accept` header, the response is either a JSON array containing links or a metalink XML document.\n\nIf processing has not finished yet requests to this endpoint MUST be rejected with openEO error `JobNotFinished`.\n\nA header named `OpenEO-Costs` MAY be sent with all responses to indicate the costs for downloading the data.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Valid download links have been returned. The download links doesn't necessarily need to be located under the API base url.",
            "headers": {
              "Expires": {
                "description": "Indicates the expiration time of the signed URLs contained in this document. Needs to follow the specification at https://tools.ietf.org/html/rfc2616#section-14.21",
                "schema": {
                  "type": "string",
                  "example": "Wed, 21 Oct 2018 07:28:00 GMT"
                }
              },
              "OpenEO-Costs": {
                "description": "Specifies the costs for fully downloading the data **once**, i.e. this header MAY change in subsequent calls. It MUST be set to `0` if the requester is the owner of the job and still has free downloads included in his processing charges estimated by `GET /jobs/{job_id}/estimate`.\n If a requester other than the owner is requesting the data of a shared job this header indicates the costs for the requester.",
                "schema": {
                  "$ref": "#/components/schemas/money"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "links"
                  ],
                  "properties": {
                    "job_id": {
                      "$ref": "#/components/schemas/job_id"
                    },
                    "title": {
                      "$ref": "#/components/schemas/title"
                    },
                    "description": {
                      "$ref": "#/components/schemas/description"
                    },
                    "updated": {
                      "$ref": "#/components/schemas/updated"
                    },
                    "links": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/link"
                      },
                      "example": [
                        {
                          "href": "https://openeo.org/api/v0.4/download/583fba8b2ce/1.tif",
                          "type": "image/tiff"
                        },
                        {
                          "href": "https://openeo.org/api/v0.4/download/583fba8b2ce/2.tif",
                          "type": "image/tiff"
                        }
                      ]
                    }
                  }
                }
              },
              "application/metalink+xml": {
                "examples": {
                  "response": {
                    "summary": "External metalink file as an example (no openEO related content).",
                    "externalValue": "http://releases.ubuntu.com/precise/ubuntu-12.04.5-server-amd64.metalink"
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "post": {
        "summary": "Start processing a job.",
        "description": "Adds a batch job to the processing queue to compute the results.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "202": {
            "description": "The creation of the resource has been queued successfully."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "delete": {
        "summary": "Cancel processing a job.",
        "description": "Cancels all related computations for this job at the back-end. It will stop generating additional costs for processing. A subset of processed results may be available for downloading depending on the state of the job as it was canceled. Results SHOULD not be deleted until the job is deleted or job processing is started again.",
        "tags": [
          "Job Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "Processing the job has been successfully canceled."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/files/{user_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/user_id"
        }
      ],
      "get": {
        "summary": "List all user-specific files.",
        "description": "This service lists all user-uploaded files that are stored at the back-end.",
        "tags": [
          "File Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Flattened file tree with path relative to the user's root directory and some basic properties such as the file size and the timestamp of the last modification. All properties except the name are optional.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "files",
                    "links"
                  ],
                  "properties": {
                    "files": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Path of the file, relative to the user's root directory. MUST NOT start with a slash and MUST NOT be url-encoded."
                          },
                          "size": {
                            "type": "integer",
                            "description": "File size in bytes."
                          },
                          "modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time the file has lastly been modified, formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time."
                          }
                        },
                        "additionalProperties": true
                      }
                    },
                    "links": {
                      "$ref": "#/components/schemas/list_links"
                    }
                  },
                  "example": {
                    "files": [
                      {
                        "path": "test.txt",
                        "size": 182,
                        "modified": "2015-10-20T17:22:10Z"
                      },
                      {
                        "path": "test.tif",
                        "size": 183142,
                        "modified": "2017-01-01T09:36:18Z"
                      },
                      {
                        "path": "Sentinel2/S2A_MSIL1C_20170819T082011_N0205_R121_T34KGD_20170819T084427.zip",
                        "size": 4183353142,
                        "modified": "2018-01-03T10:55:29Z"
                      }
                    ],
                    "links": {}
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/files/{user_id}/{path}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/user_id"
        },
        {
          "$ref": "#/components/parameters/file_path"
        }
      ],
      "get": {
        "summary": "Download a file.",
        "description": "This service downloads a user files identified by its path relative to the user's root directory.",
        "tags": [
          "File Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "file from user storage",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      },
      "put": {
        "summary": "Upload a file.",
        "description": "This service uploads a new or updates an existing file at a given path.",
        "tags": [
          "File Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "$ref": "#/components/parameters/file_path"
          }
        ],
        "responses": {
          "204": {
            "description": "The file upload has been successful."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        },
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a file.",
        "description": "This service deletes an existing user-uploaded file specified by its path.",
        "tags": [
          "File Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/user_id"
          },
          {
            "$ref": "#/components/parameters/file_path"
          }
        ],
        "responses": {
          "204": {
            "description": "The file has been successfully deleted at the back-end."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "Information about the authenticated user.",
        "description": "This endpoint always returns the user id and MAY return the disk quota available to the user. It MAY also return additional links related to the user, e.g. where payments are handled or the user profile could be changed.\nFor back-ends that involve accounting, this service MAY also return the currently available money or credits in the currency the back-end is working with.\nThis endpoint MAY be extended to fulfil the specification of the [OpenID Connect UserInfo Endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).",
        "tags": [
          "Account Management"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Holds user information. If no budget or storage limit applies to the user account the corresponding properties MUST be set to null.",
                  "type": "object",
                  "additionalProperties": true,
                  "required": [
                    "user_id"
                  ],
                  "properties": {
                    "user_id": {
                      "$ref": "#/components/schemas/user_id"
                    },
                    "storage": {
                      "description": "Information about the storage space available to the user.",
                      "type": "object",
                      "nullable": true,
                      "required": [
                        "free",
                        "quota"
                      ],
                      "properties": {
                        "free": {
                          "type": "integer",
                          "description": "Free storage space in bytes, which is still availble to the user. Effectively, this is the disk quota minus the used space by the user, e.g. user-uploaded files and job results.",
                          "example": 536870912
                        },
                        "quota": {
                          "type": "integer",
                          "description": "Maximum storage space (disk quota) in bytes available to the user.",
                          "example": 1073741824
                        }
                      }
                    },
                    "budget": {
                      "$ref": "#/components/schemas/budget"
                    },
                    "links": {
                      "description": "Additional links related to the user, e.g. where payments are handled or the user profile could be changed.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/link"
                      },
                      "example": [
                        {
                          "href": "http://www.openeo.org/john_doe/payment/",
                          "rel": "payment"
                        },
                        {
                          "href": "http://www.openeo.org/john_doe/edit/",
                          "rel": "edit"
                        },
                        {
                          "href": "http://www.openeo.org/john_doe/",
                          "rel": "about",
                          "type": "text/html",
                          "title": "User profile"
                        },
                        {
                          "href": "http://www.openeo.org/john_doe.vcf",
                          "rel": "about",
                          "type": "text/vcard",
                          "title": "vCard of the user"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    },
    "/subscription": {
      "get": {
        "summary": "Subscribe to updates.",
        "description": "Get notified when execution updates occure, e.g. status updates for a job, recently updated EO collections or added/deleted resources like files and process graphs.\n\n**Note:** There are two main differences for this request compared to regular API requests:\n\n1. WebSockets use the `wss://` protocol instead of `https://` - `ws://` is not allowed!\n2. The authorization token is sent in the web socket requests, not as HTTP header. See the `authorization` field in the openEO API for Subscriptions for more details.\n\nAfter upgrading from HTTP to the WebSockets protocol, the [openEO API for Subscriptions](https://open-eo.github.io/openeo-api/v/0.4.0/apireference-subscriptions/) applies for requests and responses.",
        "tags": [
          "Job Management",
          "File Management",
          "Process Graph Management",
          "Secondary Services Management",
          "EO Data Discovery"
        ],
        "security": [
          {},
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "Connection",
            "in": "header",
            "description": "WebSocket handshake request to indicate that an upgrade is requested.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Upgrade"
              ]
            }
          },
          {
            "name": "Upgrade",
            "in": "header",
            "description": "WebSocket handshake request to indicate the protocol to upgrade to.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "websocket"
              ]
            }
          },
          {
            "name": "Sec-WebSocket-Protocol",
            "in": "header",
            "description": "The Sec-WebSocket-Protocol header specifies the WebSocket protocols that you wish to use. The protocol to use is always `openeo-{api_version}`.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "openeo-v0.4"
              ]
            }
          },
          {
            "name": "Sec-WebSocket-Version",
            "in": "header",
            "description": "The WebSocket protocol version the client wishes to use when communicating with the server. This number should be the most recent version possible listed in the IANA WebSocket Version Number Registry.",
            "required": true,
            "schema": {
              "type": "number",
              "enum": [
                13
              ]
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Successful subscription to notifications returns in a protocol change to a web socket connection. The web socket connection is described in the referenced openEO API for Subscriptions documentation."
          },
          "4XX": {
            "$ref": "#/components/responses/client_error_auth"
          },
          "5XX": {
            "$ref": "#/components/responses/server_error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "collection_links": {
        "description": "Additional links related to this collection. Could reference to other meta data formats with additional information or a preview image.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/link"
        }
      },
      "list_links": {
        "description": "Additional links related to this list of resources. Could reference to alternative formats such as a rendered HTML version.\n\nThe links could also be used for pagination using the [rel types](https://www.iana.org/assignments/link-relations/link-relations.xhtml) `first`, `prev`, `next` and `last`. Pagination is currently OPTIONAL and clients may not support it. Therefore it MUST be implemented in a way that clients not supporting pagination get all resources regardless.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/link"
        }
      },
      "link": {
        "description": "A link to another resource on the web. Bases on [RFC5899](https://tools.ietf.org/html/rfc5988) and SHOULD follow [registered link relation types](https://www.iana.org/assignments/link-relations/link-relations.xml) whenever feasible.",
        "type": "object",
        "required": [
          "href"
        ],
        "properties": {
          "rel": {
            "type": "string",
            "example": "related"
          },
          "href": {
            "type": "string",
            "description": "The value MUST be a dereferenceable URL.",
            "format": "url",
            "example": "http://www.openeo.org"
          },
          "type": {
            "type": "string",
            "description": "The value MUST be a string that hints at the format used to represent data at the provided URI, preferably a media (MIME) type.",
            "example": "text/html"
          },
          "title": {
            "type": "string",
            "description": "Used as a human-readable label for a link.",
            "example": "openEO"
          }
        }
      },
      "license": {
        "type": "string",
        "description": "Collection's license(s) as a SPDX [License identifier](https://spdx.org/licenses/), SPDX [expression](https://spdx.org/spdx-specification-21-web-version#h.jxpfx0ykyb60), or the string `proprietary` if the license is not on the SPDX license list. Proprietary licensed data SHOULD add a link to the license text with the `license` relation in the links section (*not* as a value of this fields).",
        "example": "Apache-2.0"
      },
      "money": {
        "description": "An amount of money or credits. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling `GET /`.",
        "type": "number",
        "example": 12.98
      },
      "budget": {
        "type": "number",
        "nullable": true,
        "default": null,
        "description": "Maximum amount of costs the user is allowed to produce. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling `GET /`. If possible, back-ends SHOULD reject jobs with openEO error `PaymentRequired` if the budget is too low to process the request completely. Otherwise, when reaching the budget jobs MAY try to return partial results if possible. Otherwise the request and results are discarded. Users SHOULD be warned by clients that reaching the budget MAY discard the results and that setting this value should be well-wrought. Setting the buget to `null` means there is no specified budget.",
        "example": 100
      },
      "billing_plan_defaultable": {
        "type": "string",
        "description": "The billing plan to process and charge the job with.\n\nThe plans and the default plan can be retrieved by calling `GET /`.\n\nBilling plans MUST be accepted *case insensitive*. Billing plans not on the list of available plans MUST be rejected with openEO error `BillingPlanInvalid`.\n\nIf no billing plan is specified by the client, the server MUST default to the default billing plan in `GET /`. If the default billing plan of the provider changes, the job or service MUST not be affected by the change, i.e. the default plan which is valid during job or service creation must be permanently assigned to the job or service until the client requests to change it.",
        "example": "free",
        "nullable": true
      },
      "billing_plan": {
        "type": "string",
        "description": "The billing plan to process and charge the job with. The plans can be retrieved by calling `GET /`. Billing plans MUST be accepted *case insensitive*.",
        "example": "free"
      },
      "collection_name": {
        "type": "string",
        "description": "Unique identifier for EO collections. MUST match the specified pattern.",
        "pattern": "^[A-Za-z0-9_\\-\\.~\\/]+$",
        "example": "Sentinel-2A"
      },
      "variable": {
        "description": "Process graphs can hold a variable, which can be filled in later. For shared process graphs this can be useful to make them more portable, e.g in case a back-end specific product name would be stored with the process graph.",
        "type": "object",
        "required": [
          "variable_id"
        ],
        "properties": {
          "variable_id": {
            "type": "string",
            "description": "The name of the variable. Can be any valid JSON key, but it is RECOMMENDED to use snake case and limit the characters to `a-z`, `0-9` and `_`."
          },
          "type": {
            "type": "string",
            "description": "The value for type is the expected data type for the content of the variable.",
            "enum": [
              "string",
              "number",
              "boolean",
              "array",
              "object"
            ],
            "default": "string"
          },
          "description": {
            "$ref": "#/components/schemas/description"
          },
          "default": {
            "description": "Whenever no value for the variable is defined, the default value is used.",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "array"
              },
              {
                "type": "boolean"
              },
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/process_graph"
              }
            ]
          }
        }
      },
      "process_graph_arg_value": {
        "description": "Arguments for a process. See the API documentation for more information.",
        "nullable": true,
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/process_graph"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/process_graph_arg_value"
            }
          }
        ]
      },
      "process_graph_arg_value_vars": {
        "description": "Arguments for a process. See the API documentation for more information.",
        "nullable": true,
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "type": "object"
          },
          {
            "$ref": "#/components/schemas/process_graph"
          },
          {
            "$ref": "#/components/schemas/variable"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/process_graph_arg_value_vars"
            }
          }
        ]
      },
      "process_graph": {
        "description": "A process graph defines an executable process, i.e. one process or a combination of chained processes. *Does NOT* allow process graph variables.",
        "type": "object",
        "required": [
          "process_id"
        ],
        "properties": {
          "process_id": {
            "$ref": "#/components/schemas/process_id"
          },
          "process_description": {
            "$ref": "#/components/schemas/description"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/process_graph_arg_value"
        },
        "example": {
          "process_id": "min_time",
          "process_description": "Deriving minimum NDVI measurements over pixel time series of Sentinel 2 imagery.",
          "imagery": {
            "process_id": "NDVI",
            "imagery": {
              "process_id": "filter_daterange",
              "imagery": {
                "process_id": "get_collection",
                "name": "Sentinel2A-L1C"
              },
              "extent": [
                "2017-01-01T00:00:00Z",
                "2017-01-31T23:59:59Z"
              ]
            },
            "red": "B4",
            "nir": "B8"
          }
        }
      },
      "process_graph_vars": {
        "description": "A process graph defines an executable process, i.e. one process or a combination of chained processes. *Does* allow process graph variables.",
        "type": "object",
        "required": [
          "process_id"
        ],
        "properties": {
          "process_id": {
            "$ref": "#/components/schemas/process_id"
          },
          "process_description": {
            "$ref": "#/components/schemas/description"
          }
        },
        "additionalProperties": {
          "$ref": "#/components/schemas/process_graph_arg_value_vars"
        },
        "example": {
          "process_id": "min_time",
          "imagery": {
            "process_id": "NDVI",
            "imagery": {
              "process_id": "filter_daterange",
              "imagery": {
                "process_id": "get_collection",
                "name": {
                  "variable_id": "collection",
                  "type": "string",
                  "default": "Sentinel2A-L1C"
                }
              },
              "extent": [
                "2017-01-01T00:00:00Z",
                "2017-01-31T23:59:59Z"
              ]
            },
            "red": {
              "variable_id": "red_band",
              "type": "string",
              "default": "B4"
            },
            "nir": {
              "variable_id": "nir_band",
              "type": "string",
              "default": "B8"
            }
          }
        }
      },
      "process_id": {
        "type": "string",
        "description": "Unique identifier of the process.",
        "pattern": "^[A-Za-z0-9_\\-]+$",
        "example": "ndvi"
      },
      "process_graph_id": {
        "type": "string",
        "description": "Unique identifier of a job that is generated by the back-end during job submission. MUST match the specified pattern.",
        "pattern": "^[A-Za-z0-9_\\-\\.~]+$",
        "example": "cc2bab1e3b3a52aa"
      },
      "job_id": {
        "type": "string",
        "description": "Unique identifier of a job that is generated by the back-end during job submission. MUST match the specified pattern.",
        "pattern": "^[A-Za-z0-9_\\-\\.~]+$",
        "example": "a3cca2b2aa1e3b5b"
      },
      "submitted": {
        "type": "string",
        "format": "date-time",
        "description": "Date and time of creation, formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time.",
        "example": "2017-01-01T09:32:12Z"
      },
      "updated": {
        "type": "string",
        "format": "date-time",
        "description": "Date and time of last status change, formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time.",
        "example": "2017-01-01T09:36:18Z"
      },
      "user_id": {
        "type": "string",
        "description": "Unique identifier of the user. MUST match the specified pattern. SHOULD be a human-friendly user name instead of a randomly generated identifier.",
        "pattern": "^[A-Za-z0-9_\\-\\.~]+$",
        "example": "john_doe"
      },
      "status": {
        "type": "string",
        "enum": [
          "submitted",
          "queued",
          "running",
          "canceled",
          "finished",
          "error"
        ],
        "description": "The current status of a batch job. The default state for a job is `Submitted`. A job is `queued` after calling `POST /jobs/{job_id}/results`. It remains in this state until processing has been started, which changes the status to `running`. After the processing has been completed the status is `finished` and results can be downloaded by requesting `GET /jobs/{job_id}/results`. Whenever an error occurs the status must be set to `error`.",
        "example": "running",
        "default": "submitted"
      },
      "title": {
        "description": "A short description to easily distinguish entities.",
        "type": "string",
        "nullable": true,
        "example": "NDVI based on Sentinel 2"
      },
      "description": {
        "description": "Detailed description to fully explain the entity.\n\n[CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.",
        "type": "string",
        "nullable": true,
        "example": "Deriving minimum NDVI measurements over pixel time series of Sentinel 2 imagery."
      },
      "collection_title": {
        "description": "A short descriptive one-line title for the collection.",
        "type": "string"
      },
      "collection_description": {
        "description": "Detailed multi-line description to fully explain the collection. [CommonMark 0.28](http://commonmark.org/) syntax MAY be used for rich text representation.",
        "type": "string"
      },
      "service_type": {
        "description": "Definintion of the service type to access result data. All available service types can be retrieved via `GET /service_types`. Service types MUST be accepted *case insensitive*.",
        "type": "string",
        "example": "wms"
      },
      "service_parameters": {
        "type": "object",
        "description": "List of arguments, i.e. the parameter names supported by the secondary web service combined with actual values. See `GET /service_types` for supported parameters and valid arguments. For example, this could specify the required version of the service, visualization details or any other service dependant configuration. ",
        "additionalProperties": true,
        "example": {
          "version": "1.3.0"
        }
      },
      "service_enabled": {
        "type": "boolean",
        "description": "Describes whether a secondary web service is responding to requests (true) or not (false). Defaults to true. Disabled services don't produce any costs.",
        "default": true
      },
      "service_url": {
        "type": "string",
        "format": "url",
        "description": "URL at which the secondary web service is accessible. Doesn't necessarily need to be located within the API.",
        "example": "https://openeo.org/wms/wms-a3cca9"
      },
      "service_id": {
        "type": "string",
        "description": "Unique identifier of a secondary web service that is generated by the back-end during creation. MUST match the specified pattern.",
        "pattern": "^[A-Za-z0-9_\\-\\.~]+$",
        "example": "wms-a3cca9"
      },
      "argument": {
        "type": "object",
        "description": "Describes a general argument for various entities.",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the argument."
          },
          "required": {
            "type": "boolean",
            "description": "Determines whether this argument is mandatory.",
            "default": false
          },
          "default": {
            "description": "The default value represents what would be assumed by the consumer of the input as the value of the argument if none is provided. The value MUST conform to the defined type for the argument defined at the same level. For example, if type is string, then default can be \"foo\" but cannot be 1."
          },
          "minimum": {
            "type": "number",
            "description": "Minimum value allowed for numeric arguments."
          },
          "maximum": {
            "type": "number",
            "description": "Maximum value allowed for numeric arguments."
          },
          "enum": {
            "type": "array",
            "description": "List of allowed values for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary.",
            "items": {
              "description": "A single value allowed for this argument."
            }
          },
          "example": {
            "description": "A free-form property to include an example for this argument. To represent examples that cannot be naturally represented in JSON, a string value can be used to contain the example with escaping where necessary."
          }
        }
      },
      "output_format": {
        "description": "Output format to be used. Supported formats and options can be retrieved using the endpoint `GET /output_formats`.",
        "type": "object",
        "nullable": true,
        "required": [
          "format"
        ],
        "properties": {
          "format": {
            "type": "string",
            "description": "One of the supported output formats. MUST be accepted *case insensitive*."
          },
          "parameters": {
            "type": "object",
            "description": "List of arguments, i.e. the parameter names supported by the output format combined with actual values. \n\n`gis_data_type` is a special parameter only for output formats supporting multiple GIS spatial data types (e.g. raster and vector).\n\nSee `GET /output_formats` for more information, including supported parameters and valid arguments.",
            "properties": {
              "gis_data_type": {
                "$ref": "#/components/schemas/gis_data_type"
              }
            },
            "additionalProperties": true
          }
        },
        "example": {
          "format": "GTiff",
          "parameters": {
            "tiles": true,
            "compress": "jpeg",
            "photometric": "YCBCR",
            "jpeg_quality": 80
          }
        }
      },
      "gis_data_type": {
        "type": "string",
        "enum": [
          "raster",
          "vector",
          "table",
          "other"
        ]
      },
      "error": {
        "description": "An error object declares addtional information about a client-side or server-side error. The [openEO documentation](https://open-eo.github.io/openeo-api/v/0.4.0/errors/index.html) provides additional information regarding error handling and a list of error codes.",
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "A back-end may add a unique identifier to the error response to be able to log and track errors with further non-disclosable details.",
            "example": "550e8400-e29b-11d4-a716-446655440000"
          },
          "code": {
            "type": "string",
            "description": "The code is either one of the standardized error codes or a custom error code.",
            "example": "SampleError"
          },
          "message": {
            "type": "string",
            "description": "A message explaining what the client may need to change or what difficulties the server is facing. By default the message must be sent in English language. Content Negotiation is used to localize the error messages: If an Accept-Language header is sent by the client and a translation is available, the message should be translated accordingly and the Content-Language header must be present in the response.",
            "example": "A sample error message."
          },
          "links": {
            "description": "Additional links related to this error, e.g. a resource that is explaining the error and potential solutions in-depth or a contact e-mail address.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/link"
            },
            "example": [
              {
                "href": "http://www.openeo.org/docs/errors/SampleError",
                "rel": "about"
              }
            ]
          }
        }
      },
      "extent": {
        "type": "object",
        "properties": {
          "spatial": {
            "description": "The potential spatial extent covered by the collection. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):\n\n- West (lower left corner, coordinate axis 1)\n- South (lower left corner, coordinate axis 2)\n- Base (optional, lower left corner, coordinate axis 3)\n- East (upper right corner, coordinate axis 1)\n- North (upper right corner, coordinate axis 2)\n- Height (optional, upper right corner, coordinate axis 3)\n\nThe coordinate reference system of the values is WGS84 longitude/latitude.",
            "type": "array",
            "minItems": 4,
            "maxItems": 6,
            "items": {
              "type": "number"
            },
            "example": [
              -180,
              -90,
              180,
              90
            ]
          },
          "temporal": {
            "type": "array",
            "description": "Potential *temporal extent* covered by the collection. The temporal extent specified by a start and an end time, each formatted as a [RFC 3339](https://www.ietf.org/rfc/rfc3339) date-time. Open date ranges are supported and can be specified by setting one of the times to null. Setting both entries to null is not allowed. Only the Gregorian calendar is supported.",
            "example": [
              "2016-01-01T00:00:00Z",
              "2017-10-01T00:00:00Z"
            ],
            "items": {
              "type": "string",
              "format": "date-time",
              "minItems": 2,
              "maxItems": 2,
              "nullable": true
            }
          }
        }
      },
      "json_schema": {
        "type": "object",
        "description": "A schema object according to the specification of [JSON Schema draft-07](http://json-schema.org/). Additional values for `format` are defined [centrally in the API documentation](https://open-eo.github.io/openeo-api/v/0.4.0/processes/index.html), e.g. bbox or crs."
      }
    },
    "responses": {
      "created": {
        "description": "The resource has been created successfully and the location of the newly created resource is advertized by the back-end.\nExamples: * `POST /services` redirects to `GET /services/{service_id}` * `POST /jobs` redirects to `GET /jobs/{job_id}`",
        "headers": {
          "Location": {
            "required": true,
            "schema": {
              "description": "URL to the newly created resource.",
              "format": "url",
              "type": "string",
              "example": "https://openeo.org/api/v0.4/resource/123"
            }
          },
          "OpenEO-Identifier": {
            "required": true,
            "schema": {
              "description": "Unique Identifier (e.g. job id or service id) of the newly created resource.",
              "type": "string",
              "example": "123"
            }
          }
        }
      },
      "client_error": {
        "description": "The request can't be fulfilled due to an error on client-side, i.e. the request is invalid. The client should not repeat the request without modifications. The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6). This request usually does not respond with HTTP status codes 401 and 403 due to missing authorization. HTTP status code 404 should be used if the value of a path parameter is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "client_error_auth": {
        "description": "The request can't be fulfilled due to an error on client-side, i.e. the request is invalid. The client should not repeat the request without modifications. The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6). This request MUST respond with HTTP status codes 401 if authorization is required or 403 if the authorization failed or access is forbidden in general to the authenticated user. HTTP status code 404 should be used if the value of a path parameter is invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "server_error": {
        "description": "The request can't be fulfilled due to an error at the back-end. The error is never the client’s fault and therefore it is reasonable for the client to retry the exact same request that triggered this response. The response body SHOULD contain a JSON error object. MUST be any HTTP status code specified in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-6.6).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      }
    },
    "parameters": {
      "user_id": {
        "name": "user_id",
        "in": "path",
        "description": "Unique user identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/user_id"
        }
      },
      "process_graph_id": {
        "name": "process_graph_id",
        "in": "path",
        "description": "Unique process graph identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/process_graph_id"
        }
      },
      "service_id": {
        "name": "service_id",
        "in": "path",
        "description": "Unique secondary web service identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/service_id"
        }
      },
      "job_id": {
        "name": "job_id",
        "in": "path",
        "description": "Unique job identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/job_id"
        }
      },
      "file_path": {
        "name": "path",
        "in": "path",
        "description": "Path of the file, relative to the user's root directory. Folder and file names in the path MUST be url-encoded. The path separator `/` MUST NOT be url-encoded.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "borders/europe.geojson"
        }
      }
    },
    "requestBodies": {
      "process_graph": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/process_graph"
            }
          }
        },
        "description": "Description of one or more (chained) processes.",
        "required": true
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "Basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}