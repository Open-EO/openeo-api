{
    "id": "order",
    "summary": "Create a permutation",
    "description": "Computes a permutation which allows rearranging the data into ascending or descending order. In other words, this process computes the ranked (sorted) element positions in the original list.\n\n**Remarks:**\n\n* The positions in the result are zero-based.\n* Ties will be left in their original ordering.\n* Temporal strings can *not* be compared based on their string representation due to the time zone / time-offset representations.",
    "categories": [
        "arrays",
        "sorting"
    ],
    "parameter_order": ["data", "asc", "nodata"],
    "parameters": {
        "data": {
            "description": "An array to compute the order for.",
            "schema": {
                "type": "array",
                "items": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        },
                        {
                            "type": "string",
                            "format": "date-time"
                        },
                        {
                            "type": "string",
                            "format": "date"
                        },
                        {
                            "type": "string",
                            "format": "time"
                        }
                    ]
                }
            },
            "required": true
        },
        "asc": {
            "description": "The default sort order is ascending, with smallest values first. To sort in reverse (descending) order, set this parameter to `false`.",
            "schema": {
                "type": "boolean",
                "default": true
            }
        },
        "nodata": {
            "description": "Controls the handling of no-data values (`null`). By default they are removed. If `true`, missing values in the data are put last; if `false`, they are put first.",
            "schema": {
                "type": [
                    "boolean",
                    "null"
                ],
                "default": null
            }
        }
    },
    "returns": {
        "description": "The computed permutation.",
        "schema": {
            "type": "array",
            "items": {
                "type": "integer",
                "minimum": 0
            }
        }
    },
    "examples": [
        {
            "arguments": {
                "data": [6,-1,2,null,7,4,null,8,3,9,9]
            },
            "returns": [1,2,8,5,0,4,7,9,10]
        },
        {
            "arguments": {
                "data": [6,-1,2,null,7,4,null,8,3,9,9],
                "nodata": true
            },
            "returns": [1,2,8,5,0,4,7,9,10,3,6]
        },
        {
            "arguments": {
                "data": [6,-1,2,null,7,4,null,8,3,9,9],
                "asc": false,
                "nodata": true
            },
            "returns": [9,10,7,4,0,5,8,2,1,3,6]
        },
        {
            "arguments": {
                "data": [6,-1,2,null,7,4,null,8,3,9,9],
                "asc": false,
                "nodata": false
            },
            "returns": [3,6,9,10,7,4,0,5,8,2,1]
        }
    ],
    "links": [
        {
            "rel": "about",
            "href": "https://open-eo.github.io/openeo-api/processes/#openeo-specific-formats",
            "title": "Information about the supported temporal formats."
        },
        {
            "rel": "about",
            "href": "http://mathworld.wolfram.com/Permutation.html",
            "title": "Permutation explained by Wolfram MathWorld"
        }
    ]
}